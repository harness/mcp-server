package prompts

import (
	p "github.com/harness/harness-mcp/pkg/prompts"
	"github.com/mark3labs/mcp-go/server"
)

// RegisterPrompts initializes and registers predefined prompts with the MCP server.
func RegisterPrompts(mcpServer *server.MCPServer) {
	prompts := p.Prompts{}

	// This prompt is intended to make the LLM handle the date parameters in the correct format because fields descriptions where not enough.
	prompts.Append(
		p.NewPrompt().SetName("get_ccm_overview").
			SetDescription("Ensure parameters are provided correctly and in the right format. ").
			SetResultDescription("Input parameters validation").
			SetText(`{"standard": "When calling get_ccm_overview, ensure you have: accountIdentifier, groupBy, startDate, and endDate.\n\t\t\t\t\t- If any are missing, ask the user for the specific value(s).\n\t\t\t\t\t- Always send startDate and endDate in the following format: 'MM/DD/YYYY' (e.g. '10/30/2025')\n\t\t\t\t\t- If no dates are supplied, default startDate to 60 days ago and endDate to now."}`).
			Build())

	prompts.Append(
		p.NewPrompt().SetName("ask_confirmation_for_update_and_delete_operations").
			SetDescription("Ensure that Update or Delete operations are executed ONLY after user confirmation.").
			SetResultDescription("Execute operation if user input 'yes', cancel otherwise.").
			SetText(`{"standard": "**Confirmation Policy**:\nWhen a function/tool description contains the tag <INSERT_TOOL>, <UPDATE_TOOL> or <DELETE_TOOL>, **BEFORE** calling it you **ALWAYS** must:\n\n- Present a clear, minimal summary of the impending change (show key fields/values).\n- Ask: 'Please confirm to proceed (yes/no).'\n- **ONLY** invoke the tool if the user's next message is exactly \"yes\" (case-insensitive).\n- If the user's answer is anything other than \"yes\", do not call the tool; instead, offer to adjust or cancel.\n- Never assume consent; always re-ask if the context is ambiguous or stale."}`).
			Build())

	// Pipeline summarization prompt
	prompts.Append(
		p.NewPrompt().SetName("pipeline_summarizer").
			SetDescription("Summarize a Harness pipeline's structure, purpose, and behavior.").
			SetResultDescription("Comprehensive pipeline summary with key details.").
			SetText(`{"standard": "I need you to summarise the pipeline with the input pipeline identifier.\n\n1. **What to do?**\n   - Fetch any required metadata or definitions for the pipeline.\n   - Analyze its configuration and structure.\n   - Make the necessary tool calls to get the pipeline related details.\n   - Produce a concise, accurate summary of the pipeline's design and behavior.\n\n2. **Tools to call to get a complete overview of pipeline**\n   - get_pipeline\n   - get_pipeline_summary\n   - list_pipelines\n   - get_environment\n   - get_service\n   - list_settings (with category as NOTIFICATIONS)\n   - get_secret\n   - list_triggers\n\n3. **Must-have details in the output** (acceptance criteria):\n   - **Purpose and Objective**: What this pipeline is designed to accomplish (e.g. \"Builds and deploys a Node.js microservice to staging and production.\")\n   - **High-Level Architecture**: Major components and phases (build, test, security scanning, deployment).\n   - **Environment Flow**: How the execution moves through environments.\n   - **Key Technologies**: Languages, frameworks, deployment targets, and tools used.\n   - **Trigger Conditions**: What events start the pipeline (Git commits, manual triggers, schedules).\n   - **Approval Gates**: Any manual approvals required, and who must sign off.\n   - **Dependencies**: External dependencies such as environments, infrastructures, connectors, services, other pipelines this one relies on, etc with their ids if available.\n   - **Success Criteria**: What defines a successful run.\n\n4. **Output format**\n   Return the following data ONLY in a markdown format, DO NOT use JSON literals:\n   {\n     \"purpose\":       string,\n     \"architecture\":  string,\n     \"environment\":   string,\n     \"technologies\":  string[],\n     \"triggers\":      string[],\n     \"approvals\":     string[],\n     \"dependencies\":  string[],\n     \"success_criteria\": string,\n     \"past_execution_details\": string[]\n   }"}`).
			Build())

	// Pipeline error analysis prompt
	prompts.Append(
		p.NewPrompt().SetName("pipeline_error_analysis").
			SetDescription("Comprehensive error analysis for failed pipelines").
			SetResultDescription("Structured error analysis report").
			SetText(`{"standard": "Perform a comprehensive error analysis for the failed pipeline <PIPELINE_EXECUTION_ID> and provide a structured, detailed report.\n\nWhat to do?\n\nRetrieve execution data, error logs and any related metadata for <PIPELINE_EXECUTION_ID>.\n\nIntelligent Error Categorisation: Classify each error by type for every failed step and stage (e.g., build failure, test failure, deployment issue, infrastructure problem, configuration error, external dependency failure).\n\nRoot Cause Identification: Analyze logs and execution context to pinpoint the exact cause of the failure.\n\nChange Impact Correlation: Identify recent pipeline changes, code commits, and configuration updates that may have introduced the error.\n\nEnvironmental Context Analysis: Identify any changes or updates to the infrastructure definitions used by the pipeline at the time of failure, based on available audit records. Call list_audits MCP tool to fetch all revisions of the infrastructure referenced in the pipeline.\n\nHistorical Pattern Matching: Compare with previous similar failures to identify recurring issues and known solutions.\n\nFailure Timeline Reconstruction: Produce a timeline of what happened in the pipeline before it failed.\n\nContextual Recommendations: Provide prioritized remediation actions based on error type, severity, and environmental context.\n\nPreventive Measures: Suggest improvements to prevent similar failures in the future.\n\nImpact Assessment: Determine the dependent resources that may be affected by this failure.\n\nWhat tools to call?\n\n- download_execution_logs\n- get_execution\n- get_pipeline \n- list_audits #(with resource filter as PIPELINE for detecting changes to pipeline configuration)\n- list_pipeline_triggers \n\n- get_environment\n- get_service\n- get_connector\n- get_secret\n- get_infrastructure\n- get_settings            #(for configured notifications)\n- get_repository\n\nMust-have details in the output:\n- Pipeline Execution Context:\n- pipeline_id, execution_id\n\nError Categorisation:\n- Per step and stage classification (error type)\n\nRoot Cause Analysis:\n- Specific cause\n- Supporting evidence (log excerpts, config diffs)\n\nChange Impact Correlation:\n- Relevant updates with timestamps, authors, and description\n\nEnvironmental Context:\n- Infrastructure status, resource usage, external dependency health at failure time, etc\n\nHistorical Pattern Matching:\n- Similar past failures, matched patterns, and solutions applied\n\nFailure Timeline:\n- Ordered events from pipeline start to failure point\n\nRemediation:\n- Action items with priority/severity\n\nPreventive Measures:\n- Suggested long-term fixes\n\nImpact Assessment:\n- Affected downstream resources and risk level\n\nOutput format:\nReturn the following data in a markdown format:\n\n\n\n{\n  \"pipeline_id\": \"string\",\n  \"execution_id\": \"string\",\n  \"error_categorisation\": [\n    {\n      \"stage\": \"string\",\n      \"step\": \"string\",\n      \"error_type\": \"build_failure | test_failure | deployment_issue | infrastructure_problem | configuration_error | external_dependency_failure\"\n    }\n  ],\n  \"root_cause_analysis\": {\n    \"summary\": \"string\",\n    \"evidence\": [\"string\"]\n  },\n  \"change_impact_correlation\": [\n    {\n      \"timestamp\": \"string\",\n      \"author\": \"string\",\n      \"description\": \"string\"\n    }\n  ],\n  \"environmental_context\": {\n    \"infrastructure_status\": \"string\",\n    \"external_dependency_status\": [\n      { \"dependency_type\": \"string\", \"name\": \"string\", \"status\": \"string\" }\n    ]\n  },\n  \"historical_pattern_matching\": [\n    {\n      \"previous_failure_id\": \"string\",\n      \"similarity_score\": \"string\",\n      \"matched_pattern\": \"string\",\n      \"resolution_applied\": \"string\"\n    }\n  ],\n  \"failure_timeline\": [\n    {\n      \"timestamp\": \"string\",\n      \"event\": \"string\",\n      \"details\": \"string\"\n    }\n  ],\n  \"recommendations\": [\n    {\n      \"action\": \"string\",\n      \"priority\": \"string\",\n      \"justification\": \"string\"\n    }\n  ],\n  \"preventive_measures\": [\"string\"],\n  \"impact_assessment\": {\n    \"affected_services\": [\"string\"],\n    \"risk_level\": \"string\"\n  },\n  \"generated_at\": \"string\"\n}"}`).
			Build())

	p.AddPrompts(prompts, mcpServer)
}
