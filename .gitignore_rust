# Rust-specific .gitignore

# Generated by Cargo
# will have compiled files and executables
/target/

# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries
# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html
Cargo.lock

# These are backup files generated by rustfmt
**/*.rs.bk

# MSVC Windows builds of rustc may generate these, which store debugging information
*.pdb

# IDE files
.vscode/
.idea/
*.swp
*.swo
*~

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Logs
*.log
logs/

# Environment variables
.env
.env.local
.env.*.local

# Configuration files with secrets
config.toml
*.secret

# Test artifacts
/test-results/
/coverage/

# Benchmark results
/benches/target/

# Documentation build
/target/doc/

# Flamegraph profiling
flamegraph.svg
perf.data*

# Criterion benchmark results
/target/criterion/

# Temporary files
*.tmp
*.temp

# Binary releases
/releases/

# Local development
/local/
/scratch/

# Docker
.dockerignore

# CI/CD
/.github/workflows/cache/

# Rust analyzer
rust-project.json

# Clippy cache
.clippy.toml

# Audit cache
.cargo-audit.cache

# Cross compilation
/target/*/

# Profiling
*.prof
*.profraw

# Memory profiling
massif.out.*
callgrind.out.*

# Fuzzing
/fuzz/target/
/fuzz/corpus/
/fuzz/artifacts/

# Local configuration
local.toml
dev.toml

# Test databases
*.db
*.sqlite
*.sqlite3

# Generated code
/generated/

# Build artifacts
/dist/
/build/

# Package manager
node_modules/
package-lock.json
yarn.lock

# Python (if using Python tools)
__pycache__/
*.py[cod]
*$py.class
.Python
env/
venv/
.venv/

# Go files (from original implementation)
# Uncomment these when cleaning up Go files
# *.go
# go.mod
# go.sum
# /cmd/
# /pkg/
# /vendor/