#[cfg(test)]\nmod tests {\n    use super::*;\n    use crate::config::{Config, LogFormat, TransportType};\n    use axum::http::StatusCode;\n    use serde_json::json;\n    use tokio_test;\n    use tower::ServiceExt;\n    \n    fn create_test_config() -> Config {\n        Config {\n            version: \"test\".to_string(),\n            read_only: false,\n            toolsets: vec![\"default\".to_string()],\n            enable_modules: vec![],\n            log_file_path: None,\n            debug: false,\n            enable_license: false,\n            output_dir: None,\n            log_format: LogFormat::Text,\n            transport: TransportType::Http,\n            http_port: 8080,\n            http_path: \"/mcp\".to_string(),\n            internal: false,\n            base_url: Some(\"https://app.harness.io\".to_string()),\n            account_id: Some(\"test_account\".to_string()),\n            default_org_id: Some(\"test_org\".to_string()),\n            default_project_id: Some(\"test_project\".to_string()),\n            api_key: Some(\"pat.test_account.token.secret\".to_string()),\n            bearer_token: None,\n            pipeline_svc_base_url: None,\n            pipeline_svc_secret: None,\n            ng_manager_base_url: None,\n            ng_manager_secret: None,\n            chatbot_base_url: None,\n            chatbot_secret: None,\n            genai_base_url: None,\n            genai_secret: None,\n            artifact_registry_base_url: None,\n            artifact_registry_secret: None,\n            nextgen_ce_base_url: None,\n            nextgen_ce_secret: None,\n            ccm_comm_orch_base_url: None,\n            ccm_comm_orch_secret: None,\n            idp_svc_base_url: None,\n            idp_svc_secret: None,\n            mcp_svc_secret: None,\n            chaos_manager_svc_base_url: None,\n            chaos_manager_svc_secret: None,\n            template_svc_base_url: None,\n            template_svc_secret: None,\n            intelligence_svc_base_url: None,\n            intelligence_svc_secret: None,\n            code_svc_base_url: None,\n            code_svc_secret: None,\n            log_svc_base_url: None,\n            log_svc_secret: None,\n            dashboard_svc_base_url: None,\n            dashboard_svc_secret: None,\n            scs_svc_secret: None,\n            scs_svc_base_url: None,\n            sto_svc_secret: None,\n            sto_svc_base_url: None,\n            sei_svc_base_url: None,\n            sei_svc_secret: None,\n            audit_svc_base_url: None,\n            audit_svc_secret: None,\n            dbops_svc_base_url: None,\n            dbops_svc_secret: None,\n            acl_svc_base_url: None,\n            acl_svc_secret: None,\n            license_cache_ttl: Duration::from_secs(1800),\n            license_cache_clean_interval: Duration::from_secs(300),\n        }\n    }\n    \n    #[tokio::test]\n    async fn test_health_check() {\n        let config = create_test_config();\n        let server = create_mcp_server(&config).unwrap();\n        let state = AppState {\n            server: Arc::new(server),\n            config,\n        };\n        \n        let app = Router::new()\n            .route(\"/health\", get(health_check))\n            .with_state(state);\n        \n        let request = Request::builder()\n            .uri(\"/health\")\n            .body(axum::body::Body::empty())\n            .unwrap();\n        \n        let response = app.oneshot(request).await.unwrap();\n        \n        assert_eq!(response.status(), StatusCode::OK);\n    }\n    \n    #[tokio::test]\n    async fn test_mcp_initialize() {\n        let config = create_test_config();\n        let server = create_mcp_server(&config).unwrap();\n        let state = AppState {\n            server: Arc::new(server),\n            config: config.clone(),\n        };\n        \n        let app = Router::new()\n            .route(&config.http_path, post(handle_mcp_request))\n            .with_state(state);\n        \n        let init_request = json!({\n            \"jsonrpc\": \"2.0\",\n            \"id\": 1,\n            \"method\": \"initialize\",\n            \"params\": {\n                \"protocolVersion\": \"2024-11-05\",\n                \"capabilities\": {},\n                \"clientInfo\": {\n                    \"name\": \"test-client\",\n                    \"version\": \"1.0.0\"\n                }\n            }\n        });\n        \n        let request = Request::builder()\n            .uri(&config.http_path)\n            .method(\"POST\")\n            .header(\"content-type\", \"application/json\")\n            .body(axum::body::Body::from(serde_json::to_vec(&init_request).unwrap()))\n            .unwrap();\n        \n        let response = app.oneshot(request).await.unwrap();\n        \n        assert_eq!(response.status(), StatusCode::OK);\n    }\n}"