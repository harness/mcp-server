// Package ar provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package ar

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"github.com/rs/zerolog/log"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// Defines values for AuthType.
const (
	AuthTypeAnonymous    AuthType = "Anonymous"
	AuthTypeUserPassword AuthType = "UserPassword"
)

// Defines values for ClientSetupStepType.
const (
	GenerateToken ClientSetupStepType = "GenerateToken"
	Static        ClientSetupStepType = "Static"
)

// Defines values for EnvironmentType.
const (
	EnvironmentTypePreProduction EnvironmentType = "PreProduction"
	EnvironmentTypeProduction    EnvironmentType = "Production"
)

// Defines values for PackageType.
const (
	DOCKER  PackageType = "DOCKER"
	GENERIC PackageType = "GENERIC"
	HELM    PackageType = "HELM"
	MAVEN   PackageType = "MAVEN"
)

// Defines values for RegistryType.
const (
	RegistryTypeUPSTREAM RegistryType = "UPSTREAM"
	RegistryTypeVIRTUAL  RegistryType = "VIRTUAL"
)

// Defines values for ReplicationRuleDestinationType.
const (
	ReplicationRuleDestinationTypeGCP   ReplicationRuleDestinationType = "GCP"
	ReplicationRuleDestinationTypeJfrog ReplicationRuleDestinationType = "Jfrog"
	ReplicationRuleDestinationTypeLocal ReplicationRuleDestinationType = "Local"
)

// Defines values for ReplicationRuleSourceType.
const (
	ReplicationRuleSourceTypeGCP   ReplicationRuleSourceType = "GCP"
	ReplicationRuleSourceTypeJfrog ReplicationRuleSourceType = "Jfrog"
	ReplicationRuleSourceTypeLocal ReplicationRuleSourceType = "Local"
)

// Defines values for ReplicationRuleRequestDestinationType.
const (
	ReplicationRuleRequestDestinationTypeGCP   ReplicationRuleRequestDestinationType = "GCP"
	ReplicationRuleRequestDestinationTypeJfrog ReplicationRuleRequestDestinationType = "Jfrog"
	ReplicationRuleRequestDestinationTypeLocal ReplicationRuleRequestDestinationType = "Local"
)

// Defines values for ReplicationRuleRequestSourceType.
const (
	ReplicationRuleRequestSourceTypeGCP   ReplicationRuleRequestSourceType = "GCP"
	ReplicationRuleRequestSourceTypeJfrog ReplicationRuleRequestSourceType = "Jfrog"
	ReplicationRuleRequestSourceTypeLocal ReplicationRuleRequestSourceType = "Local"
)

// Defines values for ScannerName.
const (
	AQUATRIVY ScannerName = "AQUA_TRIVY"
	GRYPE     ScannerName = "GRYPE"
)

// Defines values for SectionType.
const (
	INLINE SectionType = "INLINE"
	TABS   SectionType = "TABS"
)

// Defines values for Status.
const (
	StatusERROR   Status = "ERROR"
	StatusFAILURE Status = "FAILURE"
	StatusSUCCESS Status = "SUCCESS"
)

// Defines values for Trigger.
const (
	ARTIFACTCREATION Trigger = "ARTIFACT_CREATION"
	ARTIFACTDELETION Trigger = "ARTIFACT_DELETION"
)

// Defines values for UpstreamConfigSource.
const (
	Custom    UpstreamConfigSource = "Custom"
	Dockerhub UpstreamConfigSource = "Dockerhub"
)

// Defines values for WebhookExecResult.
const (
	WebhookExecResultFATALERROR     WebhookExecResult = "FATAL_ERROR"
	WebhookExecResultRETRIABLEERROR WebhookExecResult = "RETRIABLE_ERROR"
	WebhookExecResultSUCCESS        WebhookExecResult = "SUCCESS"
)

// Defines values for RegistryTypeParam.
const (
	RegistryTypeParamUPSTREAM RegistryTypeParam = "UPSTREAM"
	RegistryTypeParamVIRTUAL  RegistryTypeParam = "VIRTUAL"
)

// Defines values for EnvType.
const (
	EnvTypePreProduction EnvType = "PreProduction"
	EnvTypeProduction    EnvType = "Production"
)

// Defines values for GetArtifactDeploymentsParamsEnvType.
const (
	PreProduction GetArtifactDeploymentsParamsEnvType = "PreProduction"
	Production    GetArtifactDeploymentsParamsEnvType = "Production"
)

// Defines values for GetAllRegistriesParamsType.
const (
	UPSTREAM GetAllRegistriesParamsType = "UPSTREAM"
	VIRTUAL  GetAllRegistriesParamsType = "VIRTUAL"
)

// Anonymous defines model for Anonymous.
type Anonymous = interface{}

// ArtifactDeploymentsDetail Artifact deployments Detail
type ArtifactDeploymentsDetail struct {
	Count         *int    `json:"count,omitempty"`
	EnvIdentifier *string `json:"envIdentifier,omitempty"`
	EnvName       *string `json:"envName,omitempty"`

	// EnvType Environment Type
	EnvType                   *EnvironmentType `json:"envType,omitempty"`
	InfraIdentifier           *string          `json:"infraIdentifier,omitempty"`
	InfraName                 *string          `json:"infraName,omitempty"`
	LastDeployedAt            *string          `json:"lastDeployedAt,omitempty"`
	LastDeployedById          *string          `json:"lastDeployedById,omitempty"`
	LastDeployedByName        *string          `json:"lastDeployedByName,omitempty"`
	LastPipelineExecutionId   *string          `json:"lastPipelineExecutionId,omitempty"`
	LastPipelineExecutionName *string          `json:"lastPipelineExecutionName,omitempty"`
	OrgIdentifier             *string          `json:"orgIdentifier,omitempty"`
	PipelineId                *string          `json:"pipelineId,omitempty"`
	ProjectIdentifier         *string          `json:"projectIdentifier,omitempty"`
	ServiceIdentifier         *string          `json:"serviceIdentifier,omitempty"`
	ServiceName               *string          `json:"serviceName,omitempty"`
}

// ArtifactDeploymentsDetails Docker Artifact deployments Details
type ArtifactDeploymentsDetails struct {
	// Deployments A list of Artifact Deployments
	Deployments ArtifactDeploymentsList `json:"deployments"`

	// DeploymentsStats DeploymentStats
	DeploymentsStats *DeploymentStats `json:"deploymentsStats,omitempty"`
}

// ArtifactDeploymentsList A list of Artifact Deployments
type ArtifactDeploymentsList struct {
	// Deployments A list of Artifact
	Deployments *[]ArtifactDeploymentsDetail `json:"deployments,omitempty"`

	// ItemCount The total number of items
	ItemCount *int64 `json:"itemCount,omitempty"`

	// PageCount The total number of pages
	PageCount *int64 `json:"pageCount,omitempty"`

	// PageIndex The current page
	PageIndex *int64 `json:"pageIndex,omitempty"`

	// PageSize The number of items per page
	PageSize *int `json:"pageSize,omitempty"`
}

// ArtifactDetail Artifact Detail
type ArtifactDetail struct {
	CreatedAt     *string `json:"createdAt,omitempty"`
	CreatedBy     *string `json:"createdBy,omitempty"`
	DownloadCount *int64  `json:"downloadCount,omitempty"`
	ModifiedAt    *string `json:"modifiedAt,omitempty"`
	Name          *string `json:"name,omitempty"`

	// PackageType refers to package
	PackageType PackageType `json:"packageType"`
	Size        *string     `json:"size,omitempty"`
	Version     string      `json:"version"`
	union       json.RawMessage
}

// ArtifactLabelRequest defines model for ArtifactLabelRequest.
type ArtifactLabelRequest struct {
	Labels []string `json:"labels"`
}

// ArtifactMetadata Artifact Metadata
type ArtifactMetadata struct {
	DeploymentMetadata *DeploymentMetadata `json:"deploymentMetadata,omitempty"`
	DownloadsCount     *int64              `json:"downloadsCount,omitempty"`
	Labels             *[]string           `json:"labels,omitempty"`
	LastModified       *string             `json:"lastModified,omitempty"`
	LatestVersion      string              `json:"latestVersion"`
	Name               string              `json:"name"`

	// PackageType refers to package
	PackageType        *PackageType `json:"packageType,omitempty"`
	PullCommand        *string      `json:"pullCommand,omitempty"`
	RegistryIdentifier string       `json:"registryIdentifier"`
	RegistryPath       string       `json:"registryPath"`
	Version            string       `json:"version"`
}

// ArtifactStats Harness Artifact Stats
type ArtifactStats struct {
	DownloadCount    *int64 `json:"downloadCount,omitempty"`
	DownloadSize     *int64 `json:"downloadSize,omitempty"`
	TotalStorageSize *int64 `json:"totalStorageSize,omitempty"`
	UploadSize       *int64 `json:"uploadSize,omitempty"`
}

// ArtifactSummary Harness Artifact Summary
type ArtifactSummary struct {
	CreatedAt      *string   `json:"createdAt,omitempty"`
	DownloadsCount *int64    `json:"downloadsCount,omitempty"`
	ImageName      string    `json:"imageName"`
	Labels         *[]string `json:"labels,omitempty"`
	ModifiedAt     *string   `json:"modifiedAt,omitempty"`

	// PackageType refers to package
	PackageType PackageType `json:"packageType"`
}

// ArtifactVersionMetadata Artifact Version Metadata
type ArtifactVersionMetadata struct {
	DeploymentMetadata *DeploymentMetadata `json:"deploymentMetadata,omitempty"`
	DigestCount        *int64              `json:"digestCount,omitempty"`
	DownloadsCount     *int64              `json:"downloadsCount,omitempty"`
	FileCount          *int64              `json:"fileCount,omitempty"`
	LastModified       *string             `json:"lastModified,omitempty"`
	Name               string              `json:"name"`

	// PackageType refers to package
	PackageType        *PackageType `json:"packageType,omitempty"`
	PullCommand        *string      `json:"pullCommand,omitempty"`
	RegistryIdentifier string       `json:"registryIdentifier"`
	RegistryPath       string       `json:"registryPath"`
	Size               *string      `json:"size,omitempty"`
}

// ArtifactVersionSummary Docker Artifact Version Summary
type ArtifactVersionSummary struct {
	ImageName string `json:"imageName"`

	// PackageType refers to package
	PackageType          PackageType `json:"packageType"`
	SscaArtifactId       *string     `json:"sscaArtifactId,omitempty"`
	SscaArtifactSourceId *string     `json:"sscaArtifactSourceId,omitempty"`
	StoExecutionId       *string     `json:"stoExecutionId,omitempty"`
	StoPipelineId        *string     `json:"stoPipelineId,omitempty"`
	Version              string      `json:"version"`
}

// AuthType Authentication type
type AuthType string

// BuildDetails defines model for BuildDetails.
type BuildDetails struct {
	OrgIdentifier       *string `json:"orgIdentifier,omitempty"`
	PipelineDisplayName *string `json:"pipelineDisplayName,omitempty"`
	PipelineExecutionId *string `json:"pipelineExecutionId,omitempty"`
	PipelineIdentifier  *string `json:"pipelineIdentifier,omitempty"`
	ProjectIdentifier   *string `json:"projectIdentifier,omitempty"`
	StageExecutionId    *string `json:"stageExecutionId,omitempty"`
	StepExecutionId     *string `json:"stepExecutionId,omitempty"`
}

// CleanupPolicy Cleanup Policy for Harness Artifact Registries
type CleanupPolicy struct {
	ExpireDays    *int      `json:"expireDays,omitempty"`
	Name          *string   `json:"name,omitempty"`
	PackagePrefix *[]string `json:"packagePrefix,omitempty"`
	VersionPrefix *[]string `json:"versionPrefix,omitempty"`
}

// ClientSetupDetails Client Setup Details
type ClientSetupDetails struct {
	MainHeader string               `json:"mainHeader"`
	SecHeader  string               `json:"secHeader"`
	Sections   []ClientSetupSection `json:"sections"`
}

// ClientSetupSection Client Setup Section
type ClientSetupSection struct {
	Header    *string `json:"header,omitempty"`
	SecHeader *string `json:"secHeader,omitempty"`

	// Type refers to client setup section type
	Type  SectionType `json:"type"`
	union json.RawMessage
}

// ClientSetupStep Client Setup Step
type ClientSetupStep struct {
	Commands *[]ClientSetupStepCommand `json:"commands,omitempty"`
	Header   *string                   `json:"header,omitempty"`

	// Type ClientSetupStepType type
	Type *ClientSetupStepType `json:"type,omitempty"`
}

// ClientSetupStepCommand Client Setup Step Command
type ClientSetupStepCommand struct {
	Label *string `json:"label,omitempty"`
	Value *string `json:"value,omitempty"`
}

// ClientSetupStepConfig Client Setup Step
type ClientSetupStepConfig struct {
	Steps *[]ClientSetupStep `json:"steps,omitempty"`
}

// ClientSetupStepType ClientSetupStepType type
type ClientSetupStepType string

// DeploymentDetails defines model for DeploymentDetails.
type DeploymentDetails struct {
	NonProdDeployment int `json:"nonProdDeployment"`
	ProdDeployment    int `json:"prodDeployment"`
	TotalDeployment   int `json:"totalDeployment"`
}

// DeploymentMetadata defines model for DeploymentMetadata.
type DeploymentMetadata struct {
	NonProdEnvCount int `json:"nonProdEnvCount"`
	ProdEnvCount    int `json:"prodEnvCount"`
}

// DeploymentStats DeploymentStats
type DeploymentStats struct {
	PreProduction int `json:"PreProduction"`
	Production    int `json:"Production"`
}

// DockerArtifactDetail Docker Artifact Detail
type DockerArtifactDetail struct {
	CreatedAt      *string `json:"createdAt,omitempty"`
	DownloadsCount *int64  `json:"downloadsCount,omitempty"`
	ImageName      string  `json:"imageName"`
	ModifiedAt     *string `json:"modifiedAt,omitempty"`

	// PackageType refers to package
	PackageType  PackageType `json:"packageType"`
	PullCommand  *string     `json:"pullCommand,omitempty"`
	RegistryPath string      `json:"registryPath"`
	Size         *string     `json:"size,omitempty"`
	Url          string      `json:"url"`
	Version      string      `json:"version"`
}

// DockerArtifactDetailConfig Config for docker artifact details
type DockerArtifactDetailConfig struct {
	PullCommand *string `json:"pullCommand,omitempty"`
}

// DockerArtifactIntegrationDetail Docker Artifact Detail
type DockerArtifactIntegrationDetail struct {
	BuildDetails       *BuildDetails      `json:"buildDetails,omitempty"`
	DeploymentsDetails *DeploymentDetails `json:"deploymentsDetails,omitempty"`
	SbomDetails        *SBOMDetails       `json:"sbomDetails,omitempty"`
	SlsaDetails        *SLSADetails       `json:"slsaDetails,omitempty"`
	StoDetails         *STODetails        `json:"stoDetails,omitempty"`
}

// DockerArtifactManifest Docker Artifact Manifest
type DockerArtifactManifest struct {
	Manifest string `json:"manifest"`
}

// DockerLayerEntry Harness Artifact Layers
type DockerLayerEntry struct {
	Command string  `json:"command"`
	Size    *string `json:"size,omitempty"`
}

// DockerLayersSummary Harness Layers Summary
type DockerLayersSummary struct {
	Digest string              `json:"digest"`
	Layers *[]DockerLayerEntry `json:"layers,omitempty"`
	OsArch *string             `json:"osArch,omitempty"`
}

// DockerManifestDetails Harness Artifact Layers
type DockerManifestDetails struct {
	CreatedAt      *string     `json:"createdAt,omitempty"`
	Digest         string      `json:"digest"`
	DownloadsCount *int64      `json:"downloadsCount,omitempty"`
	OsArch         string      `json:"osArch"`
	Size           *string     `json:"size,omitempty"`
	StoDetails     *STODetails `json:"stoDetails,omitempty"`
	StoExecutionId *string     `json:"stoExecutionId,omitempty"`
	StoPipelineId  *string     `json:"stoPipelineId,omitempty"`
}

// DockerManifests Harness Manifests
type DockerManifests struct {
	ImageName string                   `json:"imageName"`
	Manifests *[]DockerManifestDetails `json:"manifests,omitempty"`
	Version   string                   `json:"version"`
}

// EnvironmentType Environment Type
type EnvironmentType string

// Error defines model for Error.
type Error struct {
	// Code The http error code
	Code string `json:"code"`

	// Details Additional details about the error
	Details *map[string]interface{} `json:"details,omitempty"`

	// Message The reason the request failed
	Message string `json:"message"`
}

// ExtraHeader Webhook Extra Header
type ExtraHeader struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// FileDetail File Detail
type FileDetail struct {
	Checksums       []string `json:"checksums"`
	CreatedAt       string   `json:"createdAt"`
	DownloadCommand string   `json:"downloadCommand"`
	Name            string   `json:"name"`
	Size            string   `json:"size"`
}

// GenericArtifactDetailConfig Config for generic artifact details
type GenericArtifactDetailConfig struct {
	Description *string `json:"description,omitempty"`
}

// HelmArtifactDetail Helm Artifact Detail
type HelmArtifactDetail struct {
	Artifact       *string `json:"artifact,omitempty"`
	CreatedAt      *string `json:"createdAt,omitempty"`
	DownloadsCount *int64  `json:"downloadsCount,omitempty"`
	ModifiedAt     *string `json:"modifiedAt,omitempty"`

	// PackageType refers to package
	PackageType  PackageType `json:"packageType"`
	PullCommand  *string     `json:"pullCommand,omitempty"`
	RegistryPath string      `json:"registryPath"`
	Size         *string     `json:"size,omitempty"`
	Url          string      `json:"url"`
	Version      string      `json:"version"`
}

// HelmArtifactDetailConfig Config for helm artifact details
type HelmArtifactDetailConfig struct {
	PullCommand *string `json:"pullCommand,omitempty"`
}

// HelmArtifactManifest Helm Artifact Manifest
type HelmArtifactManifest struct {
	Manifest string `json:"manifest"`
}

// JfrogReplicationRegistry defines model for JfrogReplicationRegistry.
type JfrogReplicationRegistry struct {
	Namespace             string  `json:"namespace"`
	PasswordSecretId      *string `json:"passwordSecretId,omitempty"`
	PasswordSecretSpaceId *string `json:"passwordSecretSpaceId,omitempty"`
	Url                   string  `json:"url"`
	Username              *string `json:"username,omitempty"`
}

// ListArtifact A list of Artifacts
type ListArtifact struct {
	// Artifacts A list of Artifact
	Artifacts []ArtifactMetadata `json:"artifacts"`

	// ItemCount The total number of items
	ItemCount *int64 `json:"itemCount,omitempty"`

	// PageCount The total number of pages
	PageCount *int64 `json:"pageCount,omitempty"`

	// PageIndex The current page
	PageIndex *int64 `json:"pageIndex,omitempty"`

	// PageSize The number of items per page
	PageSize *int `json:"pageSize,omitempty"`
}

// ListArtifactLabel A list of Harness Artifact Labels
type ListArtifactLabel struct {
	// ItemCount The total number of items
	ItemCount *int64   `json:"itemCount,omitempty"`
	Labels    []string `json:"labels"`

	// PageCount The total number of pages
	PageCount *int64 `json:"pageCount,omitempty"`

	// PageIndex The current page
	PageIndex *int64 `json:"pageIndex,omitempty"`

	// PageSize The number of items per page
	PageSize *int `json:"pageSize,omitempty"`
}

// ListArtifactVersion A list of Artifact versions
type ListArtifactVersion struct {
	// ArtifactVersions A list of Artifact versions
	ArtifactVersions *[]ArtifactVersionMetadata `json:"artifactVersions,omitempty"`

	// ItemCount The total number of items
	ItemCount *int64 `json:"itemCount,omitempty"`

	// PageCount The total number of pages
	PageCount *int64 `json:"pageCount,omitempty"`

	// PageIndex The current page
	PageIndex *int64 `json:"pageIndex,omitempty"`

	// PageSize The number of items per page
	PageSize *int `json:"pageSize,omitempty"`
}

// ListMigrationImage A list of migration images
type ListMigrationImage struct {
	// Images A list of Artifact versions
	Images []MigrationImage `json:"images"`

	// ItemCount The total number of items
	ItemCount int64 `json:"itemCount"`

	// PageCount The total number of pages
	PageCount int64 `json:"pageCount"`

	// PageIndex The current page
	PageIndex int64 `json:"pageIndex"`

	// PageSize The number of items per page
	PageSize int `json:"pageSize"`
}

// ListRegistry A list of Harness Artifact Registries
type ListRegistry struct {
	// ItemCount The total number of items
	ItemCount *int64 `json:"itemCount,omitempty"`

	// PageCount The total number of pages
	PageCount *int64 `json:"pageCount,omitempty"`

	// PageIndex The current page
	PageIndex *int64 `json:"pageIndex,omitempty"`

	// PageSize The number of items per page
	PageSize *int `json:"pageSize,omitempty"`

	// Registries A list of Harness Artifact Registries
	Registries []RegistryMetadata `json:"registries"`
}

// ListRegistryArtifact A list of Artifacts
type ListRegistryArtifact struct {
	// Artifacts A list of Artifact
	Artifacts []RegistryArtifactMetadata `json:"artifacts"`

	// ItemCount The total number of items
	ItemCount *int64 `json:"itemCount,omitempty"`

	// PageCount The total number of pages
	PageCount *int64 `json:"pageCount,omitempty"`

	// PageIndex The current page
	PageIndex *int64 `json:"pageIndex,omitempty"`

	// PageSize The number of items per page
	PageSize *int `json:"pageSize,omitempty"`
}

// ListReplicationRule A list of replication rules
type ListReplicationRule struct {
	// ItemCount The total number of items
	ItemCount int64 `json:"itemCount"`

	// PageCount The total number of pages
	PageCount int64 `json:"pageCount"`

	// PageIndex The current page
	PageIndex int64 `json:"pageIndex"`

	// PageSize The number of items per page
	PageSize int `json:"pageSize"`

	// Rules A list of Replication Rules
	Rules []ReplicationRule `json:"rules"`
}

// ListWebhooks A list of Harness Registries webhooks
type ListWebhooks struct {
	// ItemCount The total number of items
	ItemCount *int64 `json:"itemCount,omitempty"`

	// PageCount The total number of pages
	PageCount *int64 `json:"pageCount,omitempty"`

	// PageIndex The current page
	PageIndex *int64 `json:"pageIndex,omitempty"`

	// PageSize The number of items per page
	PageSize *int `json:"pageSize,omitempty"`

	// Webhooks A list of Registries webhooks
	Webhooks []Webhook `json:"webhooks"`
}

// ListWebhooksExecutions A list of Harness Registries webhooks executions
type ListWebhooksExecutions struct {
	// Executions A list of Registries webhooks executions
	Executions []WebhookExecution `json:"executions"`

	// ItemCount The total number of items
	ItemCount *int64 `json:"itemCount,omitempty"`

	// PageCount The total number of pages
	PageCount *int64 `json:"pageCount,omitempty"`

	// PageIndex The current page
	PageIndex *int64 `json:"pageIndex,omitempty"`

	// PageSize The number of items per page
	PageSize *int `json:"pageSize,omitempty"`
}

// LocalReplicationRegistry defines model for LocalReplicationRegistry.
type LocalReplicationRegistry struct {
	RegistryIdentifier string `json:"registryIdentifier"`
}

// MavenArtifactDetailConfig Config for maven artifact details
type MavenArtifactDetailConfig struct {
	ArtifactId *string `json:"artifactId,omitempty"`
	GroupId    *string `json:"groupId,omitempty"`
}

// MigrationImage defines model for MigrationImage.
type MigrationImage struct {
	ImageId  *string `json:"imageId,omitempty"`
	ImageTag *string `json:"imageTag,omitempty"`
	Progress *int    `json:"progress,omitempty"`
	Status   *string `json:"status,omitempty"`
}

// NpmArtifactDetailConfig Config for npm artifact details
type NpmArtifactDetailConfig struct {
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// PackageType refers to package
type PackageType string

// PythonArtifactDetailConfig Config for python artifact details
type PythonArtifactDetailConfig struct {
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// Registry Harness Artifact Registry
type Registry struct {
	AllowedPattern *[]string        `json:"allowedPattern,omitempty"`
	BlockedPattern *[]string        `json:"blockedPattern,omitempty"`
	CleanupPolicy  *[]CleanupPolicy `json:"cleanupPolicy,omitempty"`

	// Config SubConfig specific for Virtual or Upstream Registry
	Config      *RegistryConfig `json:"config,omitempty"`
	CreatedAt   *string         `json:"createdAt,omitempty"`
	Description *string         `json:"description,omitempty"`
	Identifier  string          `json:"identifier"`
	Labels      *[]string       `json:"labels,omitempty"`
	ModifiedAt  *string         `json:"modifiedAt,omitempty"`

	// PackageType refers to package
	PackageType PackageType `json:"packageType"`
	Scanners    *[]Scanner  `json:"scanners,omitempty"`
	Url         string      `json:"url"`
}

// RegistryArtifactMetadata Artifact Metadata
type RegistryArtifactMetadata struct {
	DownloadsCount *int64    `json:"downloadsCount,omitempty"`
	Labels         *[]string `json:"labels,omitempty"`
	LastModified   *string   `json:"lastModified,omitempty"`
	LatestVersion  string    `json:"latestVersion"`
	Name           string    `json:"name"`

	// PackageType refers to package
	PackageType        *PackageType `json:"packageType,omitempty"`
	RegistryIdentifier string       `json:"registryIdentifier"`
	RegistryPath       string       `json:"registryPath"`
}

// RegistryConfig SubConfig specific for Virtual or Upstream Registry
type RegistryConfig struct {
	// Type refers to type of registry i.e virtual or upstream
	Type  RegistryType `json:"type"`
	union json.RawMessage
}

// RegistryMetadata Harness Artifact Registry Metadata
type RegistryMetadata struct {
	ArtifactsCount *int64    `json:"artifactsCount,omitempty"`
	Description    *string   `json:"description,omitempty"`
	DownloadsCount *int64    `json:"downloadsCount,omitempty"`
	Identifier     string    `json:"identifier"`
	Labels         *[]string `json:"labels,omitempty"`
	LastModified   *string   `json:"lastModified,omitempty"`

	// PackageType refers to package
	PackageType  PackageType `json:"packageType"`
	Path         *string     `json:"path,omitempty"`
	RegistrySize *string     `json:"registrySize,omitempty"`

	// Type refers to type of registry i.e virtual or upstream
	Type RegistryType `json:"type"`
	Url  string       `json:"url"`
}

// RegistryRequest defines model for RegistryRequest.
type RegistryRequest struct {
	AllowedPattern *[]string        `json:"allowedPattern,omitempty"`
	BlockedPattern *[]string        `json:"blockedPattern,omitempty"`
	CleanupPolicy  *[]CleanupPolicy `json:"cleanupPolicy,omitempty"`

	// Config SubConfig specific for Virtual or Upstream Registry
	Config      *RegistryConfig `json:"config,omitempty"`
	Description *string         `json:"description,omitempty"`
	Identifier  string          `json:"identifier"`
	Labels      *[]string       `json:"labels,omitempty"`

	// PackageType refers to package
	PackageType PackageType `json:"packageType"`
	ParentRef   *string     `json:"parentRef,omitempty"`
	Scanners    *[]Scanner  `json:"scanners,omitempty"`
}

// RegistryType refers to type of registry i.e virtual or upstream
type RegistryType string

// ReplicationRegistry defines model for ReplicationRegistry.
type ReplicationRegistry struct {
	union json.RawMessage
}

// ReplicationRule defines model for ReplicationRule.
type ReplicationRule struct {
	AllowedPatterns []string                       `json:"allowedPatterns"`
	BlockedPatterns []string                       `json:"blockedPatterns"`
	CreatedAt       string                         `json:"createdAt"`
	Destination     ReplicationRegistry            `json:"destination"`
	DestinationType ReplicationRuleDestinationType `json:"destinationType"`
	Identifier      string                         `json:"identifier"`
	ModifiedAt      string                         `json:"modifiedAt"`
	ParentRef       string                         `json:"parentRef"`
	Source          ReplicationRegistry            `json:"source"`
	SourceType      ReplicationRuleSourceType      `json:"sourceType"`
}

// ReplicationRuleDestinationType defines model for ReplicationRule.DestinationType.
type ReplicationRuleDestinationType string

// ReplicationRuleSourceType defines model for ReplicationRule.SourceType.
type ReplicationRuleSourceType string

// ReplicationRuleRequest defines model for ReplicationRuleRequest.
type ReplicationRuleRequest struct {
	AllowedPatterns []string                              `json:"allowedPatterns"`
	BlockedPatterns []string                              `json:"blockedPatterns"`
	Destination     ReplicationRegistry                   `json:"destination"`
	DestinationType ReplicationRuleRequestDestinationType `json:"destinationType"`
	Source          ReplicationRegistry                   `json:"source"`
	SourceType      ReplicationRuleRequestSourceType      `json:"sourceType"`
}

// ReplicationRuleRequestDestinationType defines model for ReplicationRuleRequest.DestinationType.
type ReplicationRuleRequestDestinationType string

// ReplicationRuleRequestSourceType defines model for ReplicationRuleRequest.SourceType.
type ReplicationRuleRequestSourceType string

// RpmArtifactDetailConfig Config for RPM artifact details
type RpmArtifactDetailConfig struct {
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// SBOMDetails defines model for SBOMDetails.
type SBOMDetails struct {
	AllowListViolations *int    `json:"allowListViolations,omitempty"`
	ArtifactId          *string `json:"artifactId,omitempty"`
	ArtifactSourceId    *string `json:"artifactSourceId,omitempty"`
	AvgScore            *string `json:"avgScore,omitempty"`
	ComponentsCount     *int    `json:"componentsCount,omitempty"`
	DenyListViolations  *int    `json:"denyListViolations,omitempty"`
	MaxScore            *string `json:"maxScore,omitempty"`
	OrchestrationId     *string `json:"orchestrationId,omitempty"`
	OrgId               *string `json:"orgId,omitempty"`
	ProjectId           *string `json:"projectId,omitempty"`
}

// SLSADetails defines model for SLSADetails.
type SLSADetails struct {
	ProvenanceId *string `json:"provenanceId,omitempty"`
	Status       *string `json:"status,omitempty"`
}

// STODetails defines model for STODetails.
type STODetails struct {
	Critical    *int    `json:"critical,omitempty"`
	ExecutionId *string `json:"executionId,omitempty"`
	High        *int    `json:"high,omitempty"`
	Ignored     *int    `json:"ignored,omitempty"`
	Info        *int    `json:"info,omitempty"`
	LastScanned *string `json:"lastScanned,omitempty"`
	Low         *int    `json:"low,omitempty"`
	Medium      *int    `json:"medium,omitempty"`
	PipelineId  *string `json:"pipelineId,omitempty"`
	Total       *int    `json:"total,omitempty"`
}

// Scanner Scanner for Harness Artifact Registries
type Scanner struct {
	Name *ScannerName `json:"name,omitempty"`
}

// ScannerName defines model for Scanner.Name.
type ScannerName string

// SectionType refers to client setup section type
type SectionType string

// Status Indicates if the request was successful or not
type Status string

// StorageDetails storage details
type StorageDetails struct {
	TotalSize string `json:"totalSize"`
}

// TabSetupStep Tab Setup step
type TabSetupStep struct {
	Header   *string               `json:"header,omitempty"`
	Sections *[]ClientSetupSection `json:"sections,omitempty"`
}

// TabSetupStepConfig Tab Setup step config
type TabSetupStepConfig struct {
	Tabs *[]TabSetupStep `json:"tabs,omitempty"`
}

// Trigger refers to trigger
type Trigger string

// UpstreamConfig Configuration for Harness Artifact UpstreamProxies
type UpstreamConfig struct {
	Auth *UpstreamConfig_Auth `json:"auth,omitempty"`

	// AuthType Authentication type
	AuthType AuthType              `json:"authType"`
	Source   *UpstreamConfigSource `json:"source,omitempty"`
	Url      *string               `json:"url,omitempty"`
}

// UpstreamConfig_Auth defines model for UpstreamConfig.Auth.
type UpstreamConfig_Auth struct {
	union json.RawMessage
}

// UpstreamConfigSource defines model for UpstreamConfig.Source.
type UpstreamConfigSource string

// UserPassword defines model for UserPassword.
type UserPassword struct {
	SecretIdentifier *string `json:"secretIdentifier,omitempty"`
	SecretSpaceId    *int    `json:"secretSpaceId,omitempty"`
	SecretSpacePath  *string `json:"secretSpacePath,omitempty"`
	UserName         string  `json:"userName"`
}

// VirtualConfig Configuration for Harness Virtual Artifact Registries
type VirtualConfig struct {
	UpstreamProxies *[]string `json:"upstreamProxies,omitempty"`
}

// Webhook Harness Regstries Webhook
type Webhook struct {
	CreatedAt    *string        `json:"createdAt,omitempty"`
	CreatedBy    *int64         `json:"createdBy,omitempty"`
	Description  *string        `json:"description,omitempty"`
	Enabled      bool           `json:"enabled"`
	ExtraHeaders *[]ExtraHeader `json:"extraHeaders,omitempty"`
	Identifier   string         `json:"identifier"`
	Insecure     bool           `json:"insecure"`
	Internal     *bool          `json:"internal,omitempty"`

	// LatestExecutionResult refers to webhook execution
	LatestExecutionResult *WebhookExecResult `json:"latestExecutionResult,omitempty"`
	ModifiedAt            *string            `json:"modifiedAt,omitempty"`
	Name                  string             `json:"name"`
	SecretIdentifier      *string            `json:"secretIdentifier,omitempty"`
	SecretSpaceId         *int64             `json:"secretSpaceId,omitempty"`
	SecretSpacePath       *string            `json:"secretSpacePath,omitempty"`
	Triggers              *[]Trigger         `json:"triggers,omitempty"`
	Url                   string             `json:"url"`
	Version               *int64             `json:"version,omitempty"`
}

// WebhookExecRequest Harness Regstries HTTP Webhook Request
type WebhookExecRequest struct {
	Body    *string `json:"body,omitempty"`
	Headers *string `json:"headers,omitempty"`
	Url     *string `json:"url,omitempty"`
}

// WebhookExecResponse Harness Regstries HTTP Webhook Response
type WebhookExecResponse struct {
	Body       *string `json:"body,omitempty"`
	Headers    *string `json:"headers,omitempty"`
	Status     *string `json:"status,omitempty"`
	StatusCode *int    `json:"statusCode,omitempty"`
}

// WebhookExecResult refers to webhook execution
type WebhookExecResult string

// WebhookExecution Harness Regstries Webhook Execution
type WebhookExecution struct {
	Created  *int64  `json:"created,omitempty"`
	Duration *int64  `json:"duration,omitempty"`
	Error    *string `json:"error,omitempty"`
	Id       *int64  `json:"id,omitempty"`

	// Request Harness Regstries HTTP Webhook Request
	Request *WebhookExecRequest `json:"request,omitempty"`

	// Response Harness Regstries HTTP Webhook Response
	Response *WebhookExecResponse `json:"response,omitempty"`

	// Result refers to webhook execution
	Result        *WebhookExecResult `json:"result,omitempty"`
	RetriggerOf   *int64             `json:"retriggerOf,omitempty"`
	Retriggerable *bool              `json:"retriggerable,omitempty"`

	// TriggerType refers to trigger
	TriggerType *Trigger `json:"triggerType,omitempty"`
	WebhookId   *int64   `json:"webhookId,omitempty"`
}

// WebhookRequest defines model for WebhookRequest.
type WebhookRequest struct {
	Description      *string        `json:"description,omitempty"`
	Enabled          bool           `json:"enabled"`
	ExtraHeaders     *[]ExtraHeader `json:"extraHeaders,omitempty"`
	Identifier       string         `json:"identifier"`
	Insecure         bool           `json:"insecure"`
	Name             string         `json:"name"`
	SecretIdentifier *string        `json:"secretIdentifier,omitempty"`
	SecretSpaceId    *int64         `json:"secretSpaceId,omitempty"`
	SecretSpacePath  *string        `json:"secretSpacePath,omitempty"`
	Triggers         *[]Trigger     `json:"triggers,omitempty"`
	Url              string         `json:"url"`
}

// AccountIdentifierParam defines model for AccountIdentifierParam.
type AccountIdentifierParam = string

// LabelsParam defines model for LabelsParam.
type LabelsParam = []string

// RegistryIdentifierParam defines model for RegistryIdentifierParam.
type RegistryIdentifierParam = []string

// RegistryIdentifierPathParam defines model for RegistryIdentifierPathParam.
type RegistryIdentifierPathParam = string

// RegistryTypeParam defines model for RegistryTypeParam.
type RegistryTypeParam string

// ArtifactParam defines model for artifactParam.
type ArtifactParam = string

// ArtifactPathParam defines model for artifactPathParam.
type ArtifactPathParam = string

// ChildVersionParam defines model for childVersionParam.
type ChildVersionParam = string

// DeployedArtifact defines model for deployedArtifact.
type DeployedArtifact = bool

// DigestOptParam defines model for digestOptParam.
type DigestOptParam = string

// DigestParam defines model for digestParam.
type DigestParam = string

// EnvType Environment Type
type EnvType string

// FromDateParam defines model for fromDateParam.
type FromDateParam = string

// LatestVersion defines model for latestVersion.
type LatestVersion = bool

// PackageTypeParam defines model for packageTypeParam.
type PackageTypeParam = []string

// PageNumber defines model for pageNumber.
type PageNumber = int64

// PageSize defines model for pageSize.
type PageSize = int64

// RecursiveParam defines model for recursiveParam.
type RecursiveParam = bool

// RegistryRefPathParam defines model for registryRefPathParam.
type RegistryRefPathParam = string

// SearchTerm defines model for searchTerm.
type SearchTerm = string

// SortField defines model for sortField.
type SortField = string

// SortOrder defines model for sortOrder.
type SortOrder = string

// SpaceRefPathParam defines model for spaceRefPathParam.
type SpaceRefPathParam = string

// SpaceRefQueryParam defines model for spaceRefQueryParam.
type SpaceRefQueryParam = string

// ToDateParam defines model for toDateParam.
type ToDateParam = string

// VersionParam defines model for versionParam.
type VersionParam = string

// VersionPathParam defines model for versionPathParam.
type VersionPathParam = string

// WebhookExecutionIdPathParam defines model for webhookExecutionIdPathParam.
type WebhookExecutionIdPathParam = string

// WebhookIdentifierPathParam defines model for webhookIdentifierPathParam.
type WebhookIdentifierPathParam = string

// ArtifactDeploymentsResponse defines model for ArtifactDeploymentsResponse.
type ArtifactDeploymentsResponse struct {
	// Data Docker Artifact deployments Details
	Data ArtifactDeploymentsDetails `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// ArtifactDetailResponse defines model for ArtifactDetailResponse.
type ArtifactDetailResponse struct {
	// Data Artifact Detail
	Data ArtifactDetail `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// ArtifactLabelResponse defines model for ArtifactLabelResponse.
type ArtifactLabelResponse struct {
	// Data Harness Artifact Summary
	Data ArtifactSummary `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// ArtifactStatsResponse defines model for ArtifactStatsResponse.
type ArtifactStatsResponse struct {
	// Data Harness Artifact Stats
	Data ArtifactStats `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// ArtifactSummaryResponse defines model for ArtifactSummaryResponse.
type ArtifactSummaryResponse struct {
	// Data Harness Artifact Summary
	Data ArtifactSummary `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// ArtifactVersionSummaryResponse defines model for ArtifactVersionSummaryResponse.
type ArtifactVersionSummaryResponse struct {
	// Data Docker Artifact Version Summary
	Data ArtifactVersionSummary `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// BadRequest defines model for BadRequest.
type BadRequest = Error

// ClientSetupDetailsResponse defines model for ClientSetupDetailsResponse.
type ClientSetupDetailsResponse struct {
	// Data Client Setup Details
	Data ClientSetupDetails `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// DockerArtifactDetailIntegrationResponse defines model for DockerArtifactDetailIntegrationResponse.
type DockerArtifactDetailIntegrationResponse struct {
	// Data Docker Artifact Detail
	Data DockerArtifactIntegrationDetail `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// DockerArtifactDetailResponse defines model for DockerArtifactDetailResponse.
type DockerArtifactDetailResponse struct {
	// Data Docker Artifact Detail
	Data DockerArtifactDetail `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// DockerArtifactManifestResponse defines model for DockerArtifactManifestResponse.
type DockerArtifactManifestResponse struct {
	// Data Docker Artifact Manifest
	Data DockerArtifactManifest `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// DockerLayersResponse defines model for DockerLayersResponse.
type DockerLayersResponse struct {
	// Data Harness Layers Summary
	Data DockerLayersSummary `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// DockerManifestsResponse defines model for DockerManifestsResponse.
type DockerManifestsResponse struct {
	// Data Harness Manifests
	Data DockerManifests `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// FileDetailResponse defines model for FileDetailResponse.
type FileDetailResponse struct {
	// Files A list of Harness Artifact Files
	Files []FileDetail `json:"files"`

	// ItemCount The total number of items
	ItemCount *int64 `json:"itemCount,omitempty"`

	// PageCount The total number of pages
	PageCount *int64 `json:"pageCount,omitempty"`

	// PageIndex The current page
	PageIndex *int64 `json:"pageIndex,omitempty"`

	// PageSize The number of items per page
	PageSize *int `json:"pageSize,omitempty"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// HelmArtifactDetailResponse defines model for HelmArtifactDetailResponse.
type HelmArtifactDetailResponse struct {
	// Data Helm Artifact Detail
	Data HelmArtifactDetail `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// HelmArtifactManifestResponse defines model for HelmArtifactManifestResponse.
type HelmArtifactManifestResponse struct {
	// Data Helm Artifact Manifest
	Data HelmArtifactManifest `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// InternalServerError defines model for InternalServerError.
type InternalServerError = Error

// ListArtifactLabelResponse defines model for ListArtifactLabelResponse.
type ListArtifactLabelResponse struct {
	// Data A list of Harness Artifact Labels
	Data ListArtifactLabel `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// ListArtifactResponse defines model for ListArtifactResponse.
type ListArtifactResponse struct {
	// Data A list of Artifacts
	Data ListArtifact `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// ListArtifactVersionResponse defines model for ListArtifactVersionResponse.
type ListArtifactVersionResponse struct {
	// Data A list of Artifact versions
	Data ListArtifactVersion `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// ListMigrationImageResponse defines model for ListMigrationImageResponse.
type ListMigrationImageResponse struct {
	// Data A list of migration images
	Data ListMigrationImage `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// ListRegistryArtifactResponse defines model for ListRegistryArtifactResponse.
type ListRegistryArtifactResponse struct {
	// Data A list of Artifacts
	Data ListRegistryArtifact `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// ListRegistryResponse defines model for ListRegistryResponse.
type ListRegistryResponse struct {
	// Data A list of Harness Artifact Registries
	Data ListRegistry `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// ListReplicationRuleResponse defines model for ListReplicationRuleResponse.
type ListReplicationRuleResponse struct {
	// Data A list of replication rules
	Data ListReplicationRule `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// ListWebhooksExecutionResponse defines model for ListWebhooksExecutionResponse.
type ListWebhooksExecutionResponse struct {
	// Data A list of Harness Registries webhooks executions
	Data ListWebhooksExecutions `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// ListWebhooksResponse defines model for ListWebhooksResponse.
type ListWebhooksResponse struct {
	// Data A list of Harness Registries webhooks
	Data ListWebhooks `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// NotFound defines model for NotFound.
type NotFound = Error

// RegistryResponse defines model for RegistryResponse.
type RegistryResponse struct {
	// Data Harness Artifact Registry
	Data Registry `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// ReplicationRuleResponse defines model for ReplicationRuleResponse.
type ReplicationRuleResponse struct {
	Data ReplicationRule `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// StorageDetailsResponse defines model for StorageDetailsResponse.
type StorageDetailsResponse struct {
	// Data storage details
	Data StorageDetails `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// Success defines model for Success.
type Success struct {
	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// Unauthenticated defines model for Unauthenticated.
type Unauthenticated = Error

// Unauthorized defines model for Unauthorized.
type Unauthorized = Error

// WebhookExecutionResponse defines model for WebhookExecutionResponse.
type WebhookExecutionResponse struct {
	// Data Harness Regstries Webhook Execution
	Data WebhookExecution `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// WebhookResponse defines model for WebhookResponse.
type WebhookResponse struct {
	// Data Harness Regstries Webhook
	Data Webhook `json:"data"`

	// Status Indicates if the request was successful or not
	Status Status `json:"status"`
}

// CreateRegistryParams defines parameters for CreateRegistry.
type CreateRegistryParams struct {
	// SpaceRef Unique space path
	SpaceRef *SpaceRefQueryParam `form:"space_ref,omitempty" json:"space_ref,omitempty"`
}

// RedirectHarnessArtifactParams defines parameters for RedirectHarnessArtifact.
type RedirectHarnessArtifactParams struct {
	// AccountIdentifier Account Identifier
	AccountIdentifier *AccountIdentifierParam `form:"accountIdentifier,omitempty" json:"accountIdentifier,omitempty"`

	// Version Version
	Version *VersionParam `form:"version,omitempty" json:"version,omitempty"`
}

// ListArtifactLabelsParams defines parameters for ListArtifactLabels.
type ListArtifactLabelsParams struct {
	// Page Current page number
	Page *PageNumber `form:"page,omitempty" json:"page,omitempty"`

	// Size Number of items per page
	Size *PageSize `form:"size,omitempty" json:"size,omitempty"`

	// SearchTerm search Term.
	SearchTerm *SearchTerm `form:"search_term,omitempty" json:"search_term,omitempty"`
}

// GetArtifactStatsForRegistryParams defines parameters for GetArtifactStatsForRegistry.
type GetArtifactStatsForRegistryParams struct {
	// From Date. Format - MM/DD/YYYY
	From *FromDateParam `form:"from,omitempty" json:"from,omitempty"`

	// To Date. Format - MM/DD/YYYY
	To *ToDateParam `form:"to,omitempty" json:"to,omitempty"`
}

// GetArtifactStatsParams defines parameters for GetArtifactStats.
type GetArtifactStatsParams struct {
	// From Date. Format - MM/DD/YYYY
	From *FromDateParam `form:"from,omitempty" json:"from,omitempty"`

	// To Date. Format - MM/DD/YYYY
	To *ToDateParam `form:"to,omitempty" json:"to,omitempty"`
}

// GetArtifactDeploymentsParams defines parameters for GetArtifactDeployments.
type GetArtifactDeploymentsParams struct {
	// EnvType env type
	EnvType *GetArtifactDeploymentsParamsEnvType `form:"env_type,omitempty" json:"env_type,omitempty"`

	// Page Current page number
	Page *PageNumber `form:"page,omitempty" json:"page,omitempty"`

	// Size Number of items per page
	Size *PageSize `form:"size,omitempty" json:"size,omitempty"`

	// SortOrder sortOrder
	SortOrder *SortOrder `form:"sort_order,omitempty" json:"sort_order,omitempty"`

	// SortField sortField
	SortField *SortField `form:"sort_field,omitempty" json:"sort_field,omitempty"`

	// SearchTerm search Term.
	SearchTerm *SearchTerm `form:"search_term,omitempty" json:"search_term,omitempty"`
}

// GetArtifactDeploymentsParamsEnvType defines parameters for GetArtifactDeployments.
type GetArtifactDeploymentsParamsEnvType string

// GetArtifactDetailsParams defines parameters for GetArtifactDetails.
type GetArtifactDetailsParams struct {
	// ChildVersion Child version incase of Docker artifacts.
	ChildVersion *ChildVersionParam `form:"childVersion,omitempty" json:"childVersion,omitempty"`
}

// GetDockerArtifactDetailsParams defines parameters for GetDockerArtifactDetails.
type GetDockerArtifactDetailsParams struct {
	// Digest Digest.
	Digest DigestParam `form:"digest" json:"digest"`
}

// GetDockerArtifactIntegrationDetailsParams defines parameters for GetDockerArtifactIntegrationDetails.
type GetDockerArtifactIntegrationDetailsParams struct {
	// Digest Digest.
	Digest DigestParam `form:"digest" json:"digest"`
}

// GetDockerArtifactLayersParams defines parameters for GetDockerArtifactLayers.
type GetDockerArtifactLayersParams struct {
	// Digest Digest.
	Digest DigestParam `form:"digest" json:"digest"`
}

// GetDockerArtifactManifestParams defines parameters for GetDockerArtifactManifest.
type GetDockerArtifactManifestParams struct {
	// Digest Digest.
	Digest DigestParam `form:"digest" json:"digest"`
}

// GetArtifactFilesParams defines parameters for GetArtifactFiles.
type GetArtifactFilesParams struct {
	// Page Current page number
	Page *PageNumber `form:"page,omitempty" json:"page,omitempty"`

	// Size Number of items per page
	Size *PageSize `form:"size,omitempty" json:"size,omitempty"`

	// SortOrder sortOrder
	SortOrder *SortOrder `form:"sort_order,omitempty" json:"sort_order,omitempty"`

	// SortField sortField
	SortField *SortField `form:"sort_field,omitempty" json:"sort_field,omitempty"`

	// SearchTerm search Term.
	SearchTerm *SearchTerm `form:"search_term,omitempty" json:"search_term,omitempty"`
}

// GetArtifactVersionSummaryParams defines parameters for GetArtifactVersionSummary.
type GetArtifactVersionSummaryParams struct {
	// Digest Digest.
	Digest *DigestOptParam `form:"digest,omitempty" json:"digest,omitempty"`
}

// GetAllArtifactVersionsParams defines parameters for GetAllArtifactVersions.
type GetAllArtifactVersionsParams struct {
	// Page Current page number
	Page *PageNumber `form:"page,omitempty" json:"page,omitempty"`

	// Size Number of items per page
	Size *PageSize `form:"size,omitempty" json:"size,omitempty"`

	// SortOrder sortOrder
	SortOrder *SortOrder `form:"sort_order,omitempty" json:"sort_order,omitempty"`

	// SortField sortField
	SortField *SortField `form:"sort_field,omitempty" json:"sort_field,omitempty"`

	// SearchTerm search Term.
	SearchTerm *SearchTerm `form:"search_term,omitempty" json:"search_term,omitempty"`
}

// GetAllArtifactsByRegistryParams defines parameters for GetAllArtifactsByRegistry.
type GetAllArtifactsByRegistryParams struct {
	// Label Label.
	Label *LabelsParam `form:"label,omitempty" json:"label,omitempty"`

	// Page Current page number
	Page *PageNumber `form:"page,omitempty" json:"page,omitempty"`

	// Size Number of items per page
	Size *PageSize `form:"size,omitempty" json:"size,omitempty"`

	// SortOrder sortOrder
	SortOrder *SortOrder `form:"sort_order,omitempty" json:"sort_order,omitempty"`

	// SortField sortField
	SortField *SortField `form:"sort_field,omitempty" json:"sort_field,omitempty"`

	// SearchTerm search Term.
	SearchTerm *SearchTerm `form:"search_term,omitempty" json:"search_term,omitempty"`
}

// GetClientSetupDetailsParams defines parameters for GetClientSetupDetails.
type GetClientSetupDetailsParams struct {
	// Artifact Artifat
	Artifact *ArtifactParam `form:"artifact,omitempty" json:"artifact,omitempty"`

	// Version Version
	Version *VersionParam `form:"version,omitempty" json:"version,omitempty"`
}

// ListWebhooksParams defines parameters for ListWebhooks.
type ListWebhooksParams struct {
	// Page Current page number
	Page *PageNumber `form:"page,omitempty" json:"page,omitempty"`

	// Size Number of items per page
	Size *PageSize `form:"size,omitempty" json:"size,omitempty"`

	// SortOrder sortOrder
	SortOrder *SortOrder `form:"sort_order,omitempty" json:"sort_order,omitempty"`

	// SortField sortField
	SortField *SortField `form:"sort_field,omitempty" json:"sort_field,omitempty"`

	// SearchTerm search Term.
	SearchTerm *SearchTerm `form:"search_term,omitempty" json:"search_term,omitempty"`
}

// ListWebhookExecutionsParams defines parameters for ListWebhookExecutions.
type ListWebhookExecutionsParams struct {
	// Page Current page number
	Page *PageNumber `form:"page,omitempty" json:"page,omitempty"`

	// Size Number of items per page
	Size *PageSize `form:"size,omitempty" json:"size,omitempty"`
}

// ListReplicationRulesParams defines parameters for ListReplicationRules.
type ListReplicationRulesParams struct {
	// SpaceRef Unique space path
	SpaceRef *SpaceRefQueryParam `form:"space_ref,omitempty" json:"space_ref,omitempty"`
}

// CreateReplicationRuleParams defines parameters for CreateReplicationRule.
type CreateReplicationRuleParams struct {
	// SpaceRef Unique space path
	SpaceRef *SpaceRefQueryParam `form:"space_ref,omitempty" json:"space_ref,omitempty"`
}

// ListMigrationImagesParams defines parameters for ListMigrationImages.
type ListMigrationImagesParams struct {
	// Page Current page number
	Page *PageNumber `form:"page,omitempty" json:"page,omitempty"`

	// Size Number of items per page
	Size *PageSize `form:"size,omitempty" json:"size,omitempty"`

	// SortOrder sortOrder
	SortOrder *SortOrder `form:"sort_order,omitempty" json:"sort_order,omitempty"`

	// SortField sortField
	SortField *SortField `form:"sort_field,omitempty" json:"sort_field,omitempty"`
}

// GetArtifactStatsForSpaceParams defines parameters for GetArtifactStatsForSpace.
type GetArtifactStatsForSpaceParams struct {
	// From Date. Format - MM/DD/YYYY
	From *FromDateParam `form:"from,omitempty" json:"from,omitempty"`

	// To Date. Format - MM/DD/YYYY
	To *ToDateParam `form:"to,omitempty" json:"to,omitempty"`
}

// GetAllHarnessArtifactsParams defines parameters for GetAllHarnessArtifacts.
type GetAllHarnessArtifactsParams struct {
	// RegIdentifier Registry Identifier
	RegIdentifier *RegistryIdentifierParam `form:"reg_identifier,omitempty" json:"reg_identifier,omitempty"`

	// Page Current page number
	Page *PageNumber `form:"page,omitempty" json:"page,omitempty"`

	// Size Number of items per page
	Size *PageSize `form:"size,omitempty" json:"size,omitempty"`

	// SortOrder sortOrder
	SortOrder *SortOrder `form:"sort_order,omitempty" json:"sort_order,omitempty"`

	// SortField sortField
	SortField *SortField `form:"sort_field,omitempty" json:"sort_field,omitempty"`

	// SearchTerm search Term.
	SearchTerm *SearchTerm `form:"search_term,omitempty" json:"search_term,omitempty"`

	// LatestVersion Latest Version Filter.
	LatestVersion *LatestVersion `form:"latest_version,omitempty" json:"latest_version,omitempty"`

	// DeployedArtifact Deployed Artifact Filter.
	DeployedArtifact *DeployedArtifact `form:"deployed_artifact,omitempty" json:"deployed_artifact,omitempty"`

	// PackageType Registry Package Type
	PackageType *PackageTypeParam `form:"package_type,omitempty" json:"package_type,omitempty"`
}

// GetAllRegistriesParams defines parameters for GetAllRegistries.
type GetAllRegistriesParams struct {
	// PackageType Registry Package Type
	PackageType *PackageTypeParam `form:"package_type,omitempty" json:"package_type,omitempty"`

	// Type Registry Type
	Type *GetAllRegistriesParamsType `form:"type,omitempty" json:"type,omitempty"`

	// Page Current page number
	Page *PageNumber `form:"page,omitempty" json:"page,omitempty"`

	// Size Number of items per page
	Size *PageSize `form:"size,omitempty" json:"size,omitempty"`

	// SortOrder sortOrder
	SortOrder *SortOrder `form:"sort_order,omitempty" json:"sort_order,omitempty"`

	// SortField sortField
	SortField *SortField `form:"sort_field,omitempty" json:"sort_field,omitempty"`

	// SearchTerm search Term.
	SearchTerm *SearchTerm `form:"search_term,omitempty" json:"search_term,omitempty"`

	// Recursive Whether to list registries recursively.
	Recursive *RecursiveParam `form:"recursive,omitempty" json:"recursive,omitempty"`
}

// GetAllRegistriesParamsType defines parameters for GetAllRegistries.
type GetAllRegistriesParamsType string

// CreateRegistryJSONRequestBody defines body for CreateRegistry for application/json ContentType.
type CreateRegistryJSONRequestBody = RegistryRequest

// ModifyRegistryJSONRequestBody defines body for ModifyRegistry for application/json ContentType.
type ModifyRegistryJSONRequestBody = RegistryRequest

// UpdateArtifactLabelsJSONRequestBody defines body for UpdateArtifactLabels for application/json ContentType.
type UpdateArtifactLabelsJSONRequestBody = ArtifactLabelRequest

// CreateWebhookJSONRequestBody defines body for CreateWebhook for application/json ContentType.
type CreateWebhookJSONRequestBody = WebhookRequest

// UpdateWebhookJSONRequestBody defines body for UpdateWebhook for application/json ContentType.
type UpdateWebhookJSONRequestBody = WebhookRequest

// CreateReplicationRuleJSONRequestBody defines body for CreateReplicationRule for application/json ContentType.
type CreateReplicationRuleJSONRequestBody = ReplicationRuleRequest

// UpdateReplicationRuleJSONRequestBody defines body for UpdateReplicationRule for application/json ContentType.
type UpdateReplicationRuleJSONRequestBody = ReplicationRuleRequest

// AsDockerArtifactDetailConfig returns the union data inside the ArtifactDetail as a DockerArtifactDetailConfig
func (t ArtifactDetail) AsDockerArtifactDetailConfig() (DockerArtifactDetailConfig, error) {
	var body DockerArtifactDetailConfig
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDockerArtifactDetailConfig overwrites any union data inside the ArtifactDetail as the provided DockerArtifactDetailConfig
func (t *ArtifactDetail) FromDockerArtifactDetailConfig(v DockerArtifactDetailConfig) error {
	t.PackageType = "DOCKER"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDockerArtifactDetailConfig performs a merge with any union data inside the ArtifactDetail, using the provided DockerArtifactDetailConfig
func (t *ArtifactDetail) MergeDockerArtifactDetailConfig(v DockerArtifactDetailConfig) error {
	t.PackageType = "DOCKER"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsHelmArtifactDetailConfig returns the union data inside the ArtifactDetail as a HelmArtifactDetailConfig
func (t ArtifactDetail) AsHelmArtifactDetailConfig() (HelmArtifactDetailConfig, error) {
	var body HelmArtifactDetailConfig
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHelmArtifactDetailConfig overwrites any union data inside the ArtifactDetail as the provided HelmArtifactDetailConfig
func (t *ArtifactDetail) FromHelmArtifactDetailConfig(v HelmArtifactDetailConfig) error {
	t.PackageType = "HELM"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHelmArtifactDetailConfig performs a merge with any union data inside the ArtifactDetail, using the provided HelmArtifactDetailConfig
func (t *ArtifactDetail) MergeHelmArtifactDetailConfig(v HelmArtifactDetailConfig) error {
	t.PackageType = "HELM"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGenericArtifactDetailConfig returns the union data inside the ArtifactDetail as a GenericArtifactDetailConfig
func (t ArtifactDetail) AsGenericArtifactDetailConfig() (GenericArtifactDetailConfig, error) {
	var body GenericArtifactDetailConfig
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGenericArtifactDetailConfig overwrites any union data inside the ArtifactDetail as the provided GenericArtifactDetailConfig
func (t *ArtifactDetail) FromGenericArtifactDetailConfig(v GenericArtifactDetailConfig) error {
	t.PackageType = "GENERIC"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGenericArtifactDetailConfig performs a merge with any union data inside the ArtifactDetail, using the provided GenericArtifactDetailConfig
func (t *ArtifactDetail) MergeGenericArtifactDetailConfig(v GenericArtifactDetailConfig) error {
	t.PackageType = "GENERIC"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMavenArtifactDetailConfig returns the union data inside the ArtifactDetail as a MavenArtifactDetailConfig
func (t ArtifactDetail) AsMavenArtifactDetailConfig() (MavenArtifactDetailConfig, error) {
	var body MavenArtifactDetailConfig
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMavenArtifactDetailConfig overwrites any union data inside the ArtifactDetail as the provided MavenArtifactDetailConfig
func (t *ArtifactDetail) FromMavenArtifactDetailConfig(v MavenArtifactDetailConfig) error {
	t.PackageType = "MAVEN"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMavenArtifactDetailConfig performs a merge with any union data inside the ArtifactDetail, using the provided MavenArtifactDetailConfig
func (t *ArtifactDetail) MergeMavenArtifactDetailConfig(v MavenArtifactDetailConfig) error {
	t.PackageType = "MAVEN"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPythonArtifactDetailConfig returns the union data inside the ArtifactDetail as a PythonArtifactDetailConfig
func (t ArtifactDetail) AsPythonArtifactDetailConfig() (PythonArtifactDetailConfig, error) {
	var body PythonArtifactDetailConfig
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPythonArtifactDetailConfig overwrites any union data inside the ArtifactDetail as the provided PythonArtifactDetailConfig
func (t *ArtifactDetail) FromPythonArtifactDetailConfig(v PythonArtifactDetailConfig) error {
	t.PackageType = "PYTHON"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePythonArtifactDetailConfig performs a merge with any union data inside the ArtifactDetail, using the provided PythonArtifactDetailConfig
func (t *ArtifactDetail) MergePythonArtifactDetailConfig(v PythonArtifactDetailConfig) error {
	t.PackageType = "PYTHON"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNpmArtifactDetailConfig returns the union data inside the ArtifactDetail as a NpmArtifactDetailConfig
func (t ArtifactDetail) AsNpmArtifactDetailConfig() (NpmArtifactDetailConfig, error) {
	var body NpmArtifactDetailConfig
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNpmArtifactDetailConfig overwrites any union data inside the ArtifactDetail as the provided NpmArtifactDetailConfig
func (t *ArtifactDetail) FromNpmArtifactDetailConfig(v NpmArtifactDetailConfig) error {
	t.PackageType = "NPM"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNpmArtifactDetailConfig performs a merge with any union data inside the ArtifactDetail, using the provided NpmArtifactDetailConfig
func (t *ArtifactDetail) MergeNpmArtifactDetailConfig(v NpmArtifactDetailConfig) error {
	t.PackageType = "NPM"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRpmArtifactDetailConfig returns the union data inside the ArtifactDetail as a RpmArtifactDetailConfig
func (t ArtifactDetail) AsRpmArtifactDetailConfig() (RpmArtifactDetailConfig, error) {
	var body RpmArtifactDetailConfig
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRpmArtifactDetailConfig overwrites any union data inside the ArtifactDetail as the provided RpmArtifactDetailConfig
func (t *ArtifactDetail) FromRpmArtifactDetailConfig(v RpmArtifactDetailConfig) error {
	t.PackageType = "RPM"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRpmArtifactDetailConfig performs a merge with any union data inside the ArtifactDetail, using the provided RpmArtifactDetailConfig
func (t *ArtifactDetail) MergeRpmArtifactDetailConfig(v RpmArtifactDetailConfig) error {
	t.PackageType = "RPM"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ArtifactDetail) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"packageType"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t ArtifactDetail) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "DOCKER":
		return t.AsDockerArtifactDetailConfig()
	case "GENERIC":
		return t.AsGenericArtifactDetailConfig()
	case "HELM":
		return t.AsHelmArtifactDetailConfig()
	case "MAVEN":
		return t.AsMavenArtifactDetailConfig()
	case "NPM":
		return t.AsNpmArtifactDetailConfig()
	case "PYTHON":
		return t.AsPythonArtifactDetailConfig()
	case "RPM":
		return t.AsRpmArtifactDetailConfig()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t ArtifactDetail) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.CreatedAt != nil {
		object["createdAt"], err = json.Marshal(t.CreatedAt)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'createdAt': %w", err)
		}
	}

	if t.CreatedBy != nil {
		object["createdBy"], err = json.Marshal(t.CreatedBy)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'createdBy': %w", err)
		}
	}

	if t.DownloadCount != nil {
		object["downloadCount"], err = json.Marshal(t.DownloadCount)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'downloadCount': %w", err)
		}
	}

	if t.ModifiedAt != nil {
		object["modifiedAt"], err = json.Marshal(t.ModifiedAt)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'modifiedAt': %w", err)
		}
	}

	if t.Name != nil {
		object["name"], err = json.Marshal(t.Name)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'name': %w", err)
		}
	}

	object["packageType"], err = json.Marshal(t.PackageType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'packageType': %w", err)
	}

	if t.Size != nil {
		object["size"], err = json.Marshal(t.Size)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'size': %w", err)
		}
	}

	object["version"], err = json.Marshal(t.Version)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'version': %w", err)
	}

	b, err = json.Marshal(object)
	return b, err
}

func (t *ArtifactDetail) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["createdAt"]; found {
		err = json.Unmarshal(raw, &t.CreatedAt)
		if err != nil {
			return fmt.Errorf("error reading 'createdAt': %w", err)
		}
	}

	if raw, found := object["createdBy"]; found {
		err = json.Unmarshal(raw, &t.CreatedBy)
		if err != nil {
			return fmt.Errorf("error reading 'createdBy': %w", err)
		}
	}

	if raw, found := object["downloadCount"]; found {
		err = json.Unmarshal(raw, &t.DownloadCount)
		if err != nil {
			return fmt.Errorf("error reading 'downloadCount': %w", err)
		}
	}

	if raw, found := object["modifiedAt"]; found {
		err = json.Unmarshal(raw, &t.ModifiedAt)
		if err != nil {
			return fmt.Errorf("error reading 'modifiedAt': %w", err)
		}
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &t.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
	}

	if raw, found := object["packageType"]; found {
		err = json.Unmarshal(raw, &t.PackageType)
		if err != nil {
			return fmt.Errorf("error reading 'packageType': %w", err)
		}
	}

	if raw, found := object["size"]; found {
		err = json.Unmarshal(raw, &t.Size)
		if err != nil {
			return fmt.Errorf("error reading 'size': %w", err)
		}
	}

	if raw, found := object["version"]; found {
		err = json.Unmarshal(raw, &t.Version)
		if err != nil {
			return fmt.Errorf("error reading 'version': %w", err)
		}
	}

	return err
}

// AsClientSetupStepConfig returns the union data inside the ClientSetupSection as a ClientSetupStepConfig
func (t ClientSetupSection) AsClientSetupStepConfig() (ClientSetupStepConfig, error) {
	var body ClientSetupStepConfig
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromClientSetupStepConfig overwrites any union data inside the ClientSetupSection as the provided ClientSetupStepConfig
func (t *ClientSetupSection) FromClientSetupStepConfig(v ClientSetupStepConfig) error {
	t.Type = "INLINE"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeClientSetupStepConfig performs a merge with any union data inside the ClientSetupSection, using the provided ClientSetupStepConfig
func (t *ClientSetupSection) MergeClientSetupStepConfig(v ClientSetupStepConfig) error {
	t.Type = "INLINE"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTabSetupStepConfig returns the union data inside the ClientSetupSection as a TabSetupStepConfig
func (t ClientSetupSection) AsTabSetupStepConfig() (TabSetupStepConfig, error) {
	var body TabSetupStepConfig
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTabSetupStepConfig overwrites any union data inside the ClientSetupSection as the provided TabSetupStepConfig
func (t *ClientSetupSection) FromTabSetupStepConfig(v TabSetupStepConfig) error {
	t.Type = "TABS"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTabSetupStepConfig performs a merge with any union data inside the ClientSetupSection, using the provided TabSetupStepConfig
func (t *ClientSetupSection) MergeTabSetupStepConfig(v TabSetupStepConfig) error {
	t.Type = "TABS"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ClientSetupSection) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t ClientSetupSection) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "INLINE":
		return t.AsClientSetupStepConfig()
	case "TABS":
		return t.AsTabSetupStepConfig()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t ClientSetupSection) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.Header != nil {
		object["header"], err = json.Marshal(t.Header)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'header': %w", err)
		}
	}

	if t.SecHeader != nil {
		object["secHeader"], err = json.Marshal(t.SecHeader)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'secHeader': %w", err)
		}
	}

	object["type"], err = json.Marshal(t.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	b, err = json.Marshal(object)
	return b, err
}

func (t *ClientSetupSection) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["header"]; found {
		err = json.Unmarshal(raw, &t.Header)
		if err != nil {
			return fmt.Errorf("error reading 'header': %w", err)
		}
	}

	if raw, found := object["secHeader"]; found {
		err = json.Unmarshal(raw, &t.SecHeader)
		if err != nil {
			return fmt.Errorf("error reading 'secHeader': %w", err)
		}
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &t.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
	}

	return err
}

// AsVirtualConfig returns the union data inside the RegistryConfig as a VirtualConfig
func (t RegistryConfig) AsVirtualConfig() (VirtualConfig, error) {
	var body VirtualConfig
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVirtualConfig overwrites any union data inside the RegistryConfig as the provided VirtualConfig
func (t *RegistryConfig) FromVirtualConfig(v VirtualConfig) error {
	t.Type = "VIRTUAL"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVirtualConfig performs a merge with any union data inside the RegistryConfig, using the provided VirtualConfig
func (t *RegistryConfig) MergeVirtualConfig(v VirtualConfig) error {
	t.Type = "VIRTUAL"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpstreamConfig returns the union data inside the RegistryConfig as a UpstreamConfig
func (t RegistryConfig) AsUpstreamConfig() (UpstreamConfig, error) {
	var body UpstreamConfig
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpstreamConfig overwrites any union data inside the RegistryConfig as the provided UpstreamConfig
func (t *RegistryConfig) FromUpstreamConfig(v UpstreamConfig) error {
	t.Type = "UPSTREAM"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpstreamConfig performs a merge with any union data inside the RegistryConfig, using the provided UpstreamConfig
func (t *RegistryConfig) MergeUpstreamConfig(v UpstreamConfig) error {
	t.Type = "UPSTREAM"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RegistryConfig) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t RegistryConfig) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "UPSTREAM":
		return t.AsUpstreamConfig()
	case "VIRTUAL":
		return t.AsVirtualConfig()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t RegistryConfig) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	object["type"], err = json.Marshal(t.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	b, err = json.Marshal(object)
	return b, err
}

func (t *RegistryConfig) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &t.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
	}

	return err
}

// AsLocalReplicationRegistry returns the union data inside the ReplicationRegistry as a LocalReplicationRegistry
func (t ReplicationRegistry) AsLocalReplicationRegistry() (LocalReplicationRegistry, error) {
	var body LocalReplicationRegistry
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLocalReplicationRegistry overwrites any union data inside the ReplicationRegistry as the provided LocalReplicationRegistry
func (t *ReplicationRegistry) FromLocalReplicationRegistry(v LocalReplicationRegistry) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLocalReplicationRegistry performs a merge with any union data inside the ReplicationRegistry, using the provided LocalReplicationRegistry
func (t *ReplicationRegistry) MergeLocalReplicationRegistry(v LocalReplicationRegistry) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJfrogReplicationRegistry returns the union data inside the ReplicationRegistry as a JfrogReplicationRegistry
func (t ReplicationRegistry) AsJfrogReplicationRegistry() (JfrogReplicationRegistry, error) {
	var body JfrogReplicationRegistry
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJfrogReplicationRegistry overwrites any union data inside the ReplicationRegistry as the provided JfrogReplicationRegistry
func (t *ReplicationRegistry) FromJfrogReplicationRegistry(v JfrogReplicationRegistry) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJfrogReplicationRegistry performs a merge with any union data inside the ReplicationRegistry, using the provided JfrogReplicationRegistry
func (t *ReplicationRegistry) MergeJfrogReplicationRegistry(v JfrogReplicationRegistry) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ReplicationRegistry) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ReplicationRegistry) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsUserPassword returns the union data inside the UpstreamConfig_Auth as a UserPassword
func (t UpstreamConfig_Auth) AsUserPassword() (UserPassword, error) {
	var body UserPassword
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUserPassword overwrites any union data inside the UpstreamConfig_Auth as the provided UserPassword
func (t *UpstreamConfig_Auth) FromUserPassword(v UserPassword) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUserPassword performs a merge with any union data inside the UpstreamConfig_Auth, using the provided UserPassword
func (t *UpstreamConfig_Auth) MergeUserPassword(v UserPassword) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAnonymous returns the union data inside the UpstreamConfig_Auth as a Anonymous
func (t UpstreamConfig_Auth) AsAnonymous() (Anonymous, error) {
	var body Anonymous
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAnonymous overwrites any union data inside the UpstreamConfig_Auth as the provided Anonymous
func (t *UpstreamConfig_Auth) FromAnonymous(v Anonymous) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAnonymous performs a merge with any union data inside the UpstreamConfig_Auth, using the provided Anonymous
func (t *UpstreamConfig_Auth) MergeAnonymous(v Anonymous) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t UpstreamConfig_Auth) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UpstreamConfig_Auth) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CreateRegistryWithBody request with any body
	CreateRegistryWithBody(ctx context.Context, params *CreateRegistryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRegistry(ctx context.Context, params *CreateRegistryParams, body CreateRegistryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RedirectHarnessArtifact request
	RedirectHarnessArtifact(ctx context.Context, registryIdentifier RegistryIdentifierPathParam, artifact ArtifactPathParam, params *RedirectHarnessArtifactParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRegistry request
	DeleteRegistry(ctx context.Context, registryRef RegistryRefPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRegistry request
	GetRegistry(ctx context.Context, registryRef RegistryRefPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifyRegistryWithBody request with any body
	ModifyRegistryWithBody(ctx context.Context, registryRef RegistryRefPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifyRegistry(ctx context.Context, registryRef RegistryRefPathParam, body ModifyRegistryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListArtifactLabels request
	ListArtifactLabels(ctx context.Context, registryRef RegistryRefPathParam, params *ListArtifactLabelsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtifactStatsForRegistry request
	GetArtifactStatsForRegistry(ctx context.Context, registryRef RegistryRefPathParam, params *GetArtifactStatsForRegistryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteArtifact request
	DeleteArtifact(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateArtifactLabelsWithBody request with any body
	UpdateArtifactLabelsWithBody(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateArtifactLabels(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, body UpdateArtifactLabelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtifactStats request
	GetArtifactStats(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, params *GetArtifactStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtifactSummary request
	GetArtifactSummary(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteArtifactVersion request
	DeleteArtifactVersion(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtifactDeployments request
	GetArtifactDeployments(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, params *GetArtifactDeploymentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtifactDetails request
	GetArtifactDetails(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, params *GetArtifactDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDockerArtifactDetails request
	GetDockerArtifactDetails(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, params *GetDockerArtifactDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDockerArtifactIntegrationDetails request
	GetDockerArtifactIntegrationDetails(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, params *GetDockerArtifactIntegrationDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDockerArtifactLayers request
	GetDockerArtifactLayers(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, params *GetDockerArtifactLayersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDockerArtifactManifest request
	GetDockerArtifactManifest(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, params *GetDockerArtifactManifestParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDockerArtifactManifests request
	GetDockerArtifactManifests(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtifactFiles request
	GetArtifactFiles(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, params *GetArtifactFilesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHelmArtifactDetails request
	GetHelmArtifactDetails(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHelmArtifactManifest request
	GetHelmArtifactManifest(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtifactVersionSummary request
	GetArtifactVersionSummary(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, params *GetArtifactVersionSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllArtifactVersions request
	GetAllArtifactVersions(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, params *GetAllArtifactVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllArtifactsByRegistry request
	GetAllArtifactsByRegistry(ctx context.Context, registryRef RegistryRefPathParam, params *GetAllArtifactsByRegistryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientSetupDetails request
	GetClientSetupDetails(ctx context.Context, registryRef RegistryRefPathParam, params *GetClientSetupDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWebhooks request
	ListWebhooks(ctx context.Context, registryRef RegistryRefPathParam, params *ListWebhooksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWebhookWithBody request with any body
	CreateWebhookWithBody(ctx context.Context, registryRef RegistryRefPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateWebhook(ctx context.Context, registryRef RegistryRefPathParam, body CreateWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWebhook request
	DeleteWebhook(ctx context.Context, registryRef RegistryRefPathParam, webhookIdentifier WebhookIdentifierPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWebhook request
	GetWebhook(ctx context.Context, registryRef RegistryRefPathParam, webhookIdentifier WebhookIdentifierPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWebhookWithBody request with any body
	UpdateWebhookWithBody(ctx context.Context, registryRef RegistryRefPathParam, webhookIdentifier WebhookIdentifierPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateWebhook(ctx context.Context, registryRef RegistryRefPathParam, webhookIdentifier WebhookIdentifierPathParam, body UpdateWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWebhookExecutions request
	ListWebhookExecutions(ctx context.Context, registryRef RegistryRefPathParam, webhookIdentifier WebhookIdentifierPathParam, params *ListWebhookExecutionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWebhookExecution request
	GetWebhookExecution(ctx context.Context, registryRef RegistryRefPathParam, webhookIdentifier WebhookIdentifierPathParam, webhookExecutionId WebhookExecutionIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReTriggerWebhookExecution request
	ReTriggerWebhookExecution(ctx context.Context, registryRef RegistryRefPathParam, webhookIdentifier WebhookIdentifierPathParam, webhookExecutionId WebhookExecutionIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListReplicationRules request
	ListReplicationRules(ctx context.Context, params *ListReplicationRulesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateReplicationRuleWithBody request with any body
	CreateReplicationRuleWithBody(ctx context.Context, params *CreateReplicationRuleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateReplicationRule(ctx context.Context, params *CreateReplicationRuleParams, body CreateReplicationRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteReplicationRule request
	DeleteReplicationRule(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReplicationRule request
	GetReplicationRule(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateReplicationRuleWithBody request with any body
	UpdateReplicationRuleWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateReplicationRule(ctx context.Context, id string, body UpdateReplicationRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListMigrationImages request
	ListMigrationImages(ctx context.Context, id string, params *ListMigrationImagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMigrationLogsForImage request
	GetMigrationLogsForImage(ctx context.Context, id string, imageId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StartMigration request
	StartMigration(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StopMigration request
	StopMigration(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtifactStatsForSpace request
	GetArtifactStatsForSpace(ctx context.Context, spaceRef SpaceRefPathParam, params *GetArtifactStatsForSpaceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllHarnessArtifacts request
	GetAllHarnessArtifacts(ctx context.Context, spaceRef SpaceRefPathParam, params *GetAllHarnessArtifactsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStorageDetails request
	GetStorageDetails(ctx context.Context, spaceRef SpaceRefPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllRegistries request
	GetAllRegistries(ctx context.Context, spaceRef SpaceRefPathParam, params *GetAllRegistriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CreateRegistryWithBody(ctx context.Context, params *CreateRegistryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRegistryRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRegistry(ctx context.Context, params *CreateRegistryParams, body CreateRegistryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRegistryRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RedirectHarnessArtifact(ctx context.Context, registryIdentifier RegistryIdentifierPathParam, artifact ArtifactPathParam, params *RedirectHarnessArtifactParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRedirectHarnessArtifactRequest(c.Server, registryIdentifier, artifact, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRegistry(ctx context.Context, registryRef RegistryRefPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRegistryRequest(c.Server, registryRef)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRegistry(ctx context.Context, registryRef RegistryRefPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRegistryRequest(c.Server, registryRef)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyRegistryWithBody(ctx context.Context, registryRef RegistryRefPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyRegistryRequestWithBody(c.Server, registryRef, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyRegistry(ctx context.Context, registryRef RegistryRefPathParam, body ModifyRegistryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyRegistryRequest(c.Server, registryRef, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListArtifactLabels(ctx context.Context, registryRef RegistryRefPathParam, params *ListArtifactLabelsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListArtifactLabelsRequest(c.Server, registryRef, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtifactStatsForRegistry(ctx context.Context, registryRef RegistryRefPathParam, params *GetArtifactStatsForRegistryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtifactStatsForRegistryRequest(c.Server, registryRef, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteArtifact(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteArtifactRequest(c.Server, registryRef, artifact)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateArtifactLabelsWithBody(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateArtifactLabelsRequestWithBody(c.Server, registryRef, artifact, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateArtifactLabels(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, body UpdateArtifactLabelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateArtifactLabelsRequest(c.Server, registryRef, artifact, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtifactStats(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, params *GetArtifactStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtifactStatsRequest(c.Server, registryRef, artifact, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtifactSummary(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtifactSummaryRequest(c.Server, registryRef, artifact)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteArtifactVersion(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteArtifactVersionRequest(c.Server, registryRef, artifact, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtifactDeployments(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, params *GetArtifactDeploymentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtifactDeploymentsRequest(c.Server, registryRef, artifact, version, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtifactDetails(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, params *GetArtifactDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtifactDetailsRequest(c.Server, registryRef, artifact, version, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDockerArtifactDetails(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, params *GetDockerArtifactDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDockerArtifactDetailsRequest(c.Server, registryRef, artifact, version, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDockerArtifactIntegrationDetails(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, params *GetDockerArtifactIntegrationDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDockerArtifactIntegrationDetailsRequest(c.Server, registryRef, artifact, version, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDockerArtifactLayers(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, params *GetDockerArtifactLayersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDockerArtifactLayersRequest(c.Server, registryRef, artifact, version, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDockerArtifactManifest(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, params *GetDockerArtifactManifestParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDockerArtifactManifestRequest(c.Server, registryRef, artifact, version, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDockerArtifactManifests(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDockerArtifactManifestsRequest(c.Server, registryRef, artifact, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtifactFiles(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, params *GetArtifactFilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtifactFilesRequest(c.Server, registryRef, artifact, version, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHelmArtifactDetails(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHelmArtifactDetailsRequest(c.Server, registryRef, artifact, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHelmArtifactManifest(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHelmArtifactManifestRequest(c.Server, registryRef, artifact, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtifactVersionSummary(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, params *GetArtifactVersionSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtifactVersionSummaryRequest(c.Server, registryRef, artifact, version, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllArtifactVersions(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, params *GetAllArtifactVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllArtifactVersionsRequest(c.Server, registryRef, artifact, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllArtifactsByRegistry(ctx context.Context, registryRef RegistryRefPathParam, params *GetAllArtifactsByRegistryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllArtifactsByRegistryRequest(c.Server, registryRef, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientSetupDetails(ctx context.Context, registryRef RegistryRefPathParam, params *GetClientSetupDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientSetupDetailsRequest(c.Server, registryRef, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWebhooks(ctx context.Context, registryRef RegistryRefPathParam, params *ListWebhooksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWebhooksRequest(c.Server, registryRef, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWebhookWithBody(ctx context.Context, registryRef RegistryRefPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWebhookRequestWithBody(c.Server, registryRef, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWebhook(ctx context.Context, registryRef RegistryRefPathParam, body CreateWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWebhookRequest(c.Server, registryRef, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWebhook(ctx context.Context, registryRef RegistryRefPathParam, webhookIdentifier WebhookIdentifierPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWebhookRequest(c.Server, registryRef, webhookIdentifier)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWebhook(ctx context.Context, registryRef RegistryRefPathParam, webhookIdentifier WebhookIdentifierPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWebhookRequest(c.Server, registryRef, webhookIdentifier)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWebhookWithBody(ctx context.Context, registryRef RegistryRefPathParam, webhookIdentifier WebhookIdentifierPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWebhookRequestWithBody(c.Server, registryRef, webhookIdentifier, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWebhook(ctx context.Context, registryRef RegistryRefPathParam, webhookIdentifier WebhookIdentifierPathParam, body UpdateWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWebhookRequest(c.Server, registryRef, webhookIdentifier, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWebhookExecutions(ctx context.Context, registryRef RegistryRefPathParam, webhookIdentifier WebhookIdentifierPathParam, params *ListWebhookExecutionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWebhookExecutionsRequest(c.Server, registryRef, webhookIdentifier, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWebhookExecution(ctx context.Context, registryRef RegistryRefPathParam, webhookIdentifier WebhookIdentifierPathParam, webhookExecutionId WebhookExecutionIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWebhookExecutionRequest(c.Server, registryRef, webhookIdentifier, webhookExecutionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReTriggerWebhookExecution(ctx context.Context, registryRef RegistryRefPathParam, webhookIdentifier WebhookIdentifierPathParam, webhookExecutionId WebhookExecutionIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReTriggerWebhookExecutionRequest(c.Server, registryRef, webhookIdentifier, webhookExecutionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListReplicationRules(ctx context.Context, params *ListReplicationRulesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListReplicationRulesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateReplicationRuleWithBody(ctx context.Context, params *CreateReplicationRuleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateReplicationRuleRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateReplicationRule(ctx context.Context, params *CreateReplicationRuleParams, body CreateReplicationRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateReplicationRuleRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteReplicationRule(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteReplicationRuleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReplicationRule(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReplicationRuleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateReplicationRuleWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateReplicationRuleRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateReplicationRule(ctx context.Context, id string, body UpdateReplicationRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateReplicationRuleRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListMigrationImages(ctx context.Context, id string, params *ListMigrationImagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListMigrationImagesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMigrationLogsForImage(ctx context.Context, id string, imageId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMigrationLogsForImageRequest(c.Server, id, imageId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartMigration(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartMigrationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StopMigration(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStopMigrationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtifactStatsForSpace(ctx context.Context, spaceRef SpaceRefPathParam, params *GetArtifactStatsForSpaceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtifactStatsForSpaceRequest(c.Server, spaceRef, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllHarnessArtifacts(ctx context.Context, spaceRef SpaceRefPathParam, params *GetAllHarnessArtifactsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllHarnessArtifactsRequest(c.Server, spaceRef, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStorageDetails(ctx context.Context, spaceRef SpaceRefPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStorageDetailsRequest(c.Server, spaceRef)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllRegistries(ctx context.Context, spaceRef SpaceRefPathParam, params *GetAllRegistriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllRegistriesRequest(c.Server, spaceRef, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	log.Printf("yey url: %s", req.URL.String())
	return c.Client.Do(req)
}

// NewCreateRegistryRequest calls the generic CreateRegistry builder with application/json body
func NewCreateRegistryRequest(server string, params *CreateRegistryParams, body CreateRegistryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRegistryRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateRegistryRequestWithBody generates requests for CreateRegistry with any type of body
func NewCreateRegistryRequestWithBody(server string, params *CreateRegistryParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/registry")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SpaceRef != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "space_ref", runtime.ParamLocationQuery, *params.SpaceRef); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRedirectHarnessArtifactRequest generates requests for RedirectHarnessArtifact
func NewRedirectHarnessArtifactRequest(server string, registryIdentifier RegistryIdentifierPathParam, artifact ArtifactPathParam, params *RedirectHarnessArtifactParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "registry_identifier", runtime.ParamLocationPath, registryIdentifier)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "artifact", runtime.ParamLocationPath, artifact)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/registry/%s/artifact/%s/+/redirect", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AccountIdentifier != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountIdentifier", runtime.ParamLocationQuery, *params.AccountIdentifier); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRegistryRequest generates requests for DeleteRegistry
func NewDeleteRegistryRequest(server string, registryRef RegistryRefPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "registry_ref", runtime.ParamLocationPath, registryRef)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/registry/%s/+", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRegistryRequest generates requests for GetRegistry
func NewGetRegistryRequest(server string, registryRef RegistryRefPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "registry_ref", runtime.ParamLocationPath, registryRef)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/registry/%s/+", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModifyRegistryRequest calls the generic ModifyRegistry builder with application/json body
func NewModifyRegistryRequest(server string, registryRef RegistryRefPathParam, body ModifyRegistryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifyRegistryRequestWithBody(server, registryRef, "application/json", bodyReader)
}

// NewModifyRegistryRequestWithBody generates requests for ModifyRegistry with any type of body
func NewModifyRegistryRequestWithBody(server string, registryRef RegistryRefPathParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "registry_ref", runtime.ParamLocationPath, registryRef)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/registry/%s/+", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListArtifactLabelsRequest generates requests for ListArtifactLabels
func NewListArtifactLabelsRequest(server string, registryRef RegistryRefPathParam, params *ListArtifactLabelsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "registry_ref", runtime.ParamLocationPath, registryRef)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/registry/%s/+/artifact/labels", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchTerm != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_term", runtime.ParamLocationQuery, *params.SearchTerm); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArtifactStatsForRegistryRequest generates requests for GetArtifactStatsForRegistry
func NewGetArtifactStatsForRegistryRequest(server string, registryRef RegistryRefPathParam, params *GetArtifactStatsForRegistryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "registry_ref", runtime.ParamLocationPath, registryRef)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/registry/%s/+/artifact/stats", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteArtifactRequest generates requests for DeleteArtifact
func NewDeleteArtifactRequest(server string, registryRef RegistryRefPathParam, artifact ArtifactPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "registry_ref", runtime.ParamLocationPath, registryRef)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "artifact", runtime.ParamLocationPath, artifact)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/registry/%s/+/artifact/%s/+", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateArtifactLabelsRequest calls the generic UpdateArtifactLabels builder with application/json body
func NewUpdateArtifactLabelsRequest(server string, registryRef RegistryRefPathParam, artifact ArtifactPathParam, body UpdateArtifactLabelsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateArtifactLabelsRequestWithBody(server, registryRef, artifact, "application/json", bodyReader)
}

// NewUpdateArtifactLabelsRequestWithBody generates requests for UpdateArtifactLabels with any type of body
func NewUpdateArtifactLabelsRequestWithBody(server string, registryRef RegistryRefPathParam, artifact ArtifactPathParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "registry_ref", runtime.ParamLocationPath, registryRef)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "artifact", runtime.ParamLocationPath, artifact)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/registry/%s/+/artifact/%s/+/labels", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetArtifactStatsRequest generates requests for GetArtifactStats
func NewGetArtifactStatsRequest(server string, registryRef RegistryRefPathParam, artifact ArtifactPathParam, params *GetArtifactStatsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "registry_ref", runtime.ParamLocationPath, registryRef)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "artifact", runtime.ParamLocationPath, artifact)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/registry/%s/+/artifact/%s/+/stats", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArtifactSummaryRequest generates requests for GetArtifactSummary
func NewGetArtifactSummaryRequest(server string, registryRef RegistryRefPathParam, artifact ArtifactPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "registry_ref", runtime.ParamLocationPath, registryRef)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "artifact", runtime.ParamLocationPath, artifact)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/registry/%s/+/artifact/%s/+/summary", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteArtifactVersionRequest generates requests for DeleteArtifactVersion
func NewDeleteArtifactVersionRequest(server string, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "registry_ref", runtime.ParamLocationPath, registryRef)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "artifact", runtime.ParamLocationPath, artifact)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/registry/%s/+/artifact/%s/+/version/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArtifactDeploymentsRequest generates requests for GetArtifactDeployments
func NewGetArtifactDeploymentsRequest(server string, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, params *GetArtifactDeploymentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "registry_ref", runtime.ParamLocationPath, registryRef)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "artifact", runtime.ParamLocationPath, artifact)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/registry/%s/+/artifact/%s/+/version/%s/deploymentdetails", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.EnvType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "env_type", runtime.ParamLocationQuery, *params.EnvType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_order", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_field", runtime.ParamLocationQuery, *params.SortField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchTerm != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_term", runtime.ParamLocationQuery, *params.SearchTerm); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArtifactDetailsRequest generates requests for GetArtifactDetails
func NewGetArtifactDetailsRequest(server string, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, params *GetArtifactDetailsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "registry_ref", runtime.ParamLocationPath, registryRef)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "artifact", runtime.ParamLocationPath, artifact)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/registry/%s/+/artifact/%s/+/version/%s/details", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ChildVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "childVersion", runtime.ParamLocationQuery, *params.ChildVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDockerArtifactDetailsRequest generates requests for GetDockerArtifactDetails
func NewGetDockerArtifactDetailsRequest(server string, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, params *GetDockerArtifactDetailsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "registry_ref", runtime.ParamLocationPath, registryRef)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "artifact", runtime.ParamLocationPath, artifact)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/registry/%s/+/artifact/%s/+/version/%s/docker/details", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "digest", runtime.ParamLocationQuery, params.Digest); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDockerArtifactIntegrationDetailsRequest generates requests for GetDockerArtifactIntegrationDetails
func NewGetDockerArtifactIntegrationDetailsRequest(server string, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, params *GetDockerArtifactIntegrationDetailsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "registry_ref", runtime.ParamLocationPath, registryRef)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "artifact", runtime.ParamLocationPath, artifact)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/registry/%s/+/artifact/%s/+/version/%s/docker/integrationdetails", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "digest", runtime.ParamLocationQuery, params.Digest); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDockerArtifactLayersRequest generates requests for GetDockerArtifactLayers
func NewGetDockerArtifactLayersRequest(server string, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, params *GetDockerArtifactLayersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "registry_ref", runtime.ParamLocationPath, registryRef)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "artifact", runtime.ParamLocationPath, artifact)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/registry/%s/+/artifact/%s/+/version/%s/docker/layers", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "digest", runtime.ParamLocationQuery, params.Digest); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDockerArtifactManifestRequest generates requests for GetDockerArtifactManifest
func NewGetDockerArtifactManifestRequest(server string, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, params *GetDockerArtifactManifestParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "registry_ref", runtime.ParamLocationPath, registryRef)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "artifact", runtime.ParamLocationPath, artifact)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/registry/%s/+/artifact/%s/+/version/%s/docker/manifest", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "digest", runtime.ParamLocationQuery, params.Digest); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDockerArtifactManifestsRequest generates requests for GetDockerArtifactManifests
func NewGetDockerArtifactManifestsRequest(server string, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "registry_ref", runtime.ParamLocationPath, registryRef)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "artifact", runtime.ParamLocationPath, artifact)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/registry/%s/+/artifact/%s/+/version/%s/docker/manifests", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArtifactFilesRequest generates requests for GetArtifactFiles
func NewGetArtifactFilesRequest(server string, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, params *GetArtifactFilesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "registry_ref", runtime.ParamLocationPath, registryRef)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "artifact", runtime.ParamLocationPath, artifact)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/registry/%s/+/artifact/%s/+/version/%s/files", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_order", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_field", runtime.ParamLocationQuery, *params.SortField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchTerm != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_term", runtime.ParamLocationQuery, *params.SearchTerm); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHelmArtifactDetailsRequest generates requests for GetHelmArtifactDetails
func NewGetHelmArtifactDetailsRequest(server string, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "registry_ref", runtime.ParamLocationPath, registryRef)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "artifact", runtime.ParamLocationPath, artifact)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/registry/%s/+/artifact/%s/+/version/%s/helm/details", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHelmArtifactManifestRequest generates requests for GetHelmArtifactManifest
func NewGetHelmArtifactManifestRequest(server string, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "registry_ref", runtime.ParamLocationPath, registryRef)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "artifact", runtime.ParamLocationPath, artifact)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/registry/%s/+/artifact/%s/+/version/%s/helm/manifest", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArtifactVersionSummaryRequest generates requests for GetArtifactVersionSummary
func NewGetArtifactVersionSummaryRequest(server string, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, params *GetArtifactVersionSummaryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "registry_ref", runtime.ParamLocationPath, registryRef)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "artifact", runtime.ParamLocationPath, artifact)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/registry/%s/+/artifact/%s/+/version/%s/summary", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Digest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "digest", runtime.ParamLocationQuery, *params.Digest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllArtifactVersionsRequest generates requests for GetAllArtifactVersions
func NewGetAllArtifactVersionsRequest(server string, registryRef RegistryRefPathParam, artifact ArtifactPathParam, params *GetAllArtifactVersionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "registry_ref", runtime.ParamLocationPath, registryRef)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "artifact", runtime.ParamLocationPath, artifact)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/registry/%s/+/artifact/%s/+/versions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_order", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_field", runtime.ParamLocationQuery, *params.SortField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchTerm != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_term", runtime.ParamLocationQuery, *params.SearchTerm); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllArtifactsByRegistryRequest generates requests for GetAllArtifactsByRegistry
func NewGetAllArtifactsByRegistryRequest(server string, registryRef RegistryRefPathParam, params *GetAllArtifactsByRegistryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "registry_ref", runtime.ParamLocationPath, registryRef)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/registry/%s/+/artifacts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Label != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label", runtime.ParamLocationQuery, *params.Label); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_order", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_field", runtime.ParamLocationQuery, *params.SortField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchTerm != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_term", runtime.ParamLocationQuery, *params.SearchTerm); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClientSetupDetailsRequest generates requests for GetClientSetupDetails
func NewGetClientSetupDetailsRequest(server string, registryRef RegistryRefPathParam, params *GetClientSetupDetailsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "registry_ref", runtime.ParamLocationPath, registryRef)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/registry/%s/+/client-setup-details", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Artifact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "artifact", runtime.ParamLocationQuery, *params.Artifact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListWebhooksRequest generates requests for ListWebhooks
func NewListWebhooksRequest(server string, registryRef RegistryRefPathParam, params *ListWebhooksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "registry_ref", runtime.ParamLocationPath, registryRef)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/registry/%s/+/webhooks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_order", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_field", runtime.ParamLocationQuery, *params.SortField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchTerm != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_term", runtime.ParamLocationQuery, *params.SearchTerm); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWebhookRequest calls the generic CreateWebhook builder with application/json body
func NewCreateWebhookRequest(server string, registryRef RegistryRefPathParam, body CreateWebhookJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateWebhookRequestWithBody(server, registryRef, "application/json", bodyReader)
}

// NewCreateWebhookRequestWithBody generates requests for CreateWebhook with any type of body
func NewCreateWebhookRequestWithBody(server string, registryRef RegistryRefPathParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "registry_ref", runtime.ParamLocationPath, registryRef)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/registry/%s/+/webhooks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWebhookRequest generates requests for DeleteWebhook
func NewDeleteWebhookRequest(server string, registryRef RegistryRefPathParam, webhookIdentifier WebhookIdentifierPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "registry_ref", runtime.ParamLocationPath, registryRef)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "webhook_identifier", runtime.ParamLocationPath, webhookIdentifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/registry/%s/+/webhooks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWebhookRequest generates requests for GetWebhook
func NewGetWebhookRequest(server string, registryRef RegistryRefPathParam, webhookIdentifier WebhookIdentifierPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "registry_ref", runtime.ParamLocationPath, registryRef)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "webhook_identifier", runtime.ParamLocationPath, webhookIdentifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/registry/%s/+/webhooks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateWebhookRequest calls the generic UpdateWebhook builder with application/json body
func NewUpdateWebhookRequest(server string, registryRef RegistryRefPathParam, webhookIdentifier WebhookIdentifierPathParam, body UpdateWebhookJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateWebhookRequestWithBody(server, registryRef, webhookIdentifier, "application/json", bodyReader)
}

// NewUpdateWebhookRequestWithBody generates requests for UpdateWebhook with any type of body
func NewUpdateWebhookRequestWithBody(server string, registryRef RegistryRefPathParam, webhookIdentifier WebhookIdentifierPathParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "registry_ref", runtime.ParamLocationPath, registryRef)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "webhook_identifier", runtime.ParamLocationPath, webhookIdentifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/registry/%s/+/webhooks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListWebhookExecutionsRequest generates requests for ListWebhookExecutions
func NewListWebhookExecutionsRequest(server string, registryRef RegistryRefPathParam, webhookIdentifier WebhookIdentifierPathParam, params *ListWebhookExecutionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "registry_ref", runtime.ParamLocationPath, registryRef)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "webhook_identifier", runtime.ParamLocationPath, webhookIdentifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/registry/%s/+/webhooks/%s/executions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWebhookExecutionRequest generates requests for GetWebhookExecution
func NewGetWebhookExecutionRequest(server string, registryRef RegistryRefPathParam, webhookIdentifier WebhookIdentifierPathParam, webhookExecutionId WebhookExecutionIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "registry_ref", runtime.ParamLocationPath, registryRef)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "webhook_identifier", runtime.ParamLocationPath, webhookIdentifier)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "webhook_execution_id", runtime.ParamLocationPath, webhookExecutionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/registry/%s/+/webhooks/%s/executions/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReTriggerWebhookExecutionRequest generates requests for ReTriggerWebhookExecution
func NewReTriggerWebhookExecutionRequest(server string, registryRef RegistryRefPathParam, webhookIdentifier WebhookIdentifierPathParam, webhookExecutionId WebhookExecutionIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "registry_ref", runtime.ParamLocationPath, registryRef)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "webhook_identifier", runtime.ParamLocationPath, webhookIdentifier)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "webhook_execution_id", runtime.ParamLocationPath, webhookExecutionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/registry/%s/+/webhooks/%s/executions/%s/retrigger", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListReplicationRulesRequest generates requests for ListReplicationRules
func NewListReplicationRulesRequest(server string, params *ListReplicationRulesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/replication/rules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SpaceRef != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "space_ref", runtime.ParamLocationQuery, *params.SpaceRef); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateReplicationRuleRequest calls the generic CreateReplicationRule builder with application/json body
func NewCreateReplicationRuleRequest(server string, params *CreateReplicationRuleParams, body CreateReplicationRuleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateReplicationRuleRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateReplicationRuleRequestWithBody generates requests for CreateReplicationRule with any type of body
func NewCreateReplicationRuleRequestWithBody(server string, params *CreateReplicationRuleParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/replication/rules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SpaceRef != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "space_ref", runtime.ParamLocationQuery, *params.SpaceRef); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteReplicationRuleRequest generates requests for DeleteReplicationRule
func NewDeleteReplicationRuleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/replication/rules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetReplicationRuleRequest generates requests for GetReplicationRule
func NewGetReplicationRuleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/replication/rules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateReplicationRuleRequest calls the generic UpdateReplicationRule builder with application/json body
func NewUpdateReplicationRuleRequest(server string, id string, body UpdateReplicationRuleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateReplicationRuleRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateReplicationRuleRequestWithBody generates requests for UpdateReplicationRule with any type of body
func NewUpdateReplicationRuleRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/replication/rules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListMigrationImagesRequest generates requests for ListMigrationImages
func NewListMigrationImagesRequest(server string, id string, params *ListMigrationImagesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/replication/rules/%s/migration/images", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_order", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_field", runtime.ParamLocationQuery, *params.SortField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMigrationLogsForImageRequest generates requests for GetMigrationLogsForImage
func NewGetMigrationLogsForImageRequest(server string, id string, imageId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "image_id", runtime.ParamLocationPath, imageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/replication/rules/%s/migration/images/%s/logs", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStartMigrationRequest generates requests for StartMigration
func NewStartMigrationRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/replication/rules/%s/migration/start", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStopMigrationRequest generates requests for StopMigration
func NewStopMigrationRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/replication/rules/%s/migration/stop", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArtifactStatsForSpaceRequest generates requests for GetArtifactStatsForSpace
func NewGetArtifactStatsForSpaceRequest(server string, spaceRef SpaceRefPathParam, params *GetArtifactStatsForSpaceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "space_ref", runtime.ParamLocationPath, spaceRef)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/+/artifact/stats", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllHarnessArtifactsRequest generates requests for GetAllHarnessArtifacts
func NewGetAllHarnessArtifactsRequest(server string, spaceRef SpaceRefPathParam, params *GetAllHarnessArtifactsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "space_ref", runtime.ParamLocationPath, spaceRef)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/+/artifacts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.RegIdentifier != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reg_identifier", runtime.ParamLocationQuery, *params.RegIdentifier); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_order", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_field", runtime.ParamLocationQuery, *params.SortField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchTerm != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_term", runtime.ParamLocationQuery, *params.SearchTerm); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LatestVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "latest_version", runtime.ParamLocationQuery, *params.LatestVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeployedArtifact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deployed_artifact", runtime.ParamLocationQuery, *params.DeployedArtifact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PackageType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "package_type", runtime.ParamLocationQuery, *params.PackageType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStorageDetailsRequest generates requests for GetStorageDetails
func NewGetStorageDetailsRequest(server string, spaceRef SpaceRefPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "space_ref", runtime.ParamLocationPath, spaceRef)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/+/details", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllRegistriesRequest generates requests for GetAllRegistries
func NewGetAllRegistriesRequest(server string, spaceRef SpaceRefPathParam, params *GetAllRegistriesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "space_ref", runtime.ParamLocationPath, spaceRef)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/+/registries", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PackageType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "package_type", runtime.ParamLocationQuery, *params.PackageType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_order", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_field", runtime.ParamLocationQuery, *params.SortField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchTerm != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_term", runtime.ParamLocationQuery, *params.SearchTerm); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Recursive != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "recursive", runtime.ParamLocationQuery, *params.Recursive); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CreateRegistryWithBodyWithResponse request with any body
	CreateRegistryWithBodyWithResponse(ctx context.Context, params *CreateRegistryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRegistryResp, error)

	CreateRegistryWithResponse(ctx context.Context, params *CreateRegistryParams, body CreateRegistryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRegistryResp, error)

	// RedirectHarnessArtifactWithResponse request
	RedirectHarnessArtifactWithResponse(ctx context.Context, registryIdentifier RegistryIdentifierPathParam, artifact ArtifactPathParam, params *RedirectHarnessArtifactParams, reqEditors ...RequestEditorFn) (*RedirectHarnessArtifactResp, error)

	// DeleteRegistryWithResponse request
	DeleteRegistryWithResponse(ctx context.Context, registryRef RegistryRefPathParam, reqEditors ...RequestEditorFn) (*DeleteRegistryResp, error)

	// GetRegistryWithResponse request
	GetRegistryWithResponse(ctx context.Context, registryRef RegistryRefPathParam, reqEditors ...RequestEditorFn) (*GetRegistryResp, error)

	// ModifyRegistryWithBodyWithResponse request with any body
	ModifyRegistryWithBodyWithResponse(ctx context.Context, registryRef RegistryRefPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyRegistryResp, error)

	ModifyRegistryWithResponse(ctx context.Context, registryRef RegistryRefPathParam, body ModifyRegistryJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyRegistryResp, error)

	// ListArtifactLabelsWithResponse request
	ListArtifactLabelsWithResponse(ctx context.Context, registryRef RegistryRefPathParam, params *ListArtifactLabelsParams, reqEditors ...RequestEditorFn) (*ListArtifactLabelsResp, error)

	// GetArtifactStatsForRegistryWithResponse request
	GetArtifactStatsForRegistryWithResponse(ctx context.Context, registryRef RegistryRefPathParam, params *GetArtifactStatsForRegistryParams, reqEditors ...RequestEditorFn) (*GetArtifactStatsForRegistryResp, error)

	// DeleteArtifactWithResponse request
	DeleteArtifactWithResponse(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, reqEditors ...RequestEditorFn) (*DeleteArtifactResp, error)

	// UpdateArtifactLabelsWithBodyWithResponse request with any body
	UpdateArtifactLabelsWithBodyWithResponse(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateArtifactLabelsResp, error)

	UpdateArtifactLabelsWithResponse(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, body UpdateArtifactLabelsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateArtifactLabelsResp, error)

	// GetArtifactStatsWithResponse request
	GetArtifactStatsWithResponse(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, params *GetArtifactStatsParams, reqEditors ...RequestEditorFn) (*GetArtifactStatsResp, error)

	// GetArtifactSummaryWithResponse request
	GetArtifactSummaryWithResponse(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, reqEditors ...RequestEditorFn) (*GetArtifactSummaryResp, error)

	// DeleteArtifactVersionWithResponse request
	DeleteArtifactVersionWithResponse(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, reqEditors ...RequestEditorFn) (*DeleteArtifactVersionResp, error)

	// GetArtifactDeploymentsWithResponse request
	GetArtifactDeploymentsWithResponse(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, params *GetArtifactDeploymentsParams, reqEditors ...RequestEditorFn) (*GetArtifactDeploymentsResp, error)

	// GetArtifactDetailsWithResponse request
	GetArtifactDetailsWithResponse(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, params *GetArtifactDetailsParams, reqEditors ...RequestEditorFn) (*GetArtifactDetailsResp, error)

	// GetDockerArtifactDetailsWithResponse request
	GetDockerArtifactDetailsWithResponse(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, params *GetDockerArtifactDetailsParams, reqEditors ...RequestEditorFn) (*GetDockerArtifactDetailsResp, error)

	// GetDockerArtifactIntegrationDetailsWithResponse request
	GetDockerArtifactIntegrationDetailsWithResponse(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, params *GetDockerArtifactIntegrationDetailsParams, reqEditors ...RequestEditorFn) (*GetDockerArtifactIntegrationDetailsResp, error)

	// GetDockerArtifactLayersWithResponse request
	GetDockerArtifactLayersWithResponse(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, params *GetDockerArtifactLayersParams, reqEditors ...RequestEditorFn) (*GetDockerArtifactLayersResp, error)

	// GetDockerArtifactManifestWithResponse request
	GetDockerArtifactManifestWithResponse(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, params *GetDockerArtifactManifestParams, reqEditors ...RequestEditorFn) (*GetDockerArtifactManifestResp, error)

	// GetDockerArtifactManifestsWithResponse request
	GetDockerArtifactManifestsWithResponse(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, reqEditors ...RequestEditorFn) (*GetDockerArtifactManifestsResp, error)

	// GetArtifactFilesWithResponse request
	GetArtifactFilesWithResponse(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, params *GetArtifactFilesParams, reqEditors ...RequestEditorFn) (*GetArtifactFilesResp, error)

	// GetHelmArtifactDetailsWithResponse request
	GetHelmArtifactDetailsWithResponse(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, reqEditors ...RequestEditorFn) (*GetHelmArtifactDetailsResp, error)

	// GetHelmArtifactManifestWithResponse request
	GetHelmArtifactManifestWithResponse(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, reqEditors ...RequestEditorFn) (*GetHelmArtifactManifestResp, error)

	// GetArtifactVersionSummaryWithResponse request
	GetArtifactVersionSummaryWithResponse(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, params *GetArtifactVersionSummaryParams, reqEditors ...RequestEditorFn) (*GetArtifactVersionSummaryResp, error)

	// GetAllArtifactVersionsWithResponse request
	GetAllArtifactVersionsWithResponse(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, params *GetAllArtifactVersionsParams, reqEditors ...RequestEditorFn) (*GetAllArtifactVersionsResp, error)

	// GetAllArtifactsByRegistryWithResponse request
	GetAllArtifactsByRegistryWithResponse(ctx context.Context, registryRef RegistryRefPathParam, params *GetAllArtifactsByRegistryParams, reqEditors ...RequestEditorFn) (*GetAllArtifactsByRegistryResp, error)

	// GetClientSetupDetailsWithResponse request
	GetClientSetupDetailsWithResponse(ctx context.Context, registryRef RegistryRefPathParam, params *GetClientSetupDetailsParams, reqEditors ...RequestEditorFn) (*GetClientSetupDetailsResp, error)

	// ListWebhooksWithResponse request
	ListWebhooksWithResponse(ctx context.Context, registryRef RegistryRefPathParam, params *ListWebhooksParams, reqEditors ...RequestEditorFn) (*ListWebhooksResp, error)

	// CreateWebhookWithBodyWithResponse request with any body
	CreateWebhookWithBodyWithResponse(ctx context.Context, registryRef RegistryRefPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWebhookResp, error)

	CreateWebhookWithResponse(ctx context.Context, registryRef RegistryRefPathParam, body CreateWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWebhookResp, error)

	// DeleteWebhookWithResponse request
	DeleteWebhookWithResponse(ctx context.Context, registryRef RegistryRefPathParam, webhookIdentifier WebhookIdentifierPathParam, reqEditors ...RequestEditorFn) (*DeleteWebhookResp, error)

	// GetWebhookWithResponse request
	GetWebhookWithResponse(ctx context.Context, registryRef RegistryRefPathParam, webhookIdentifier WebhookIdentifierPathParam, reqEditors ...RequestEditorFn) (*GetWebhookResp, error)

	// UpdateWebhookWithBodyWithResponse request with any body
	UpdateWebhookWithBodyWithResponse(ctx context.Context, registryRef RegistryRefPathParam, webhookIdentifier WebhookIdentifierPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWebhookResp, error)

	UpdateWebhookWithResponse(ctx context.Context, registryRef RegistryRefPathParam, webhookIdentifier WebhookIdentifierPathParam, body UpdateWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWebhookResp, error)

	// ListWebhookExecutionsWithResponse request
	ListWebhookExecutionsWithResponse(ctx context.Context, registryRef RegistryRefPathParam, webhookIdentifier WebhookIdentifierPathParam, params *ListWebhookExecutionsParams, reqEditors ...RequestEditorFn) (*ListWebhookExecutionsResp, error)

	// GetWebhookExecutionWithResponse request
	GetWebhookExecutionWithResponse(ctx context.Context, registryRef RegistryRefPathParam, webhookIdentifier WebhookIdentifierPathParam, webhookExecutionId WebhookExecutionIdPathParam, reqEditors ...RequestEditorFn) (*GetWebhookExecutionResp, error)

	// ReTriggerWebhookExecutionWithResponse request
	ReTriggerWebhookExecutionWithResponse(ctx context.Context, registryRef RegistryRefPathParam, webhookIdentifier WebhookIdentifierPathParam, webhookExecutionId WebhookExecutionIdPathParam, reqEditors ...RequestEditorFn) (*ReTriggerWebhookExecutionResp, error)

	// ListReplicationRulesWithResponse request
	ListReplicationRulesWithResponse(ctx context.Context, params *ListReplicationRulesParams, reqEditors ...RequestEditorFn) (*ListReplicationRulesResp, error)

	// CreateReplicationRuleWithBodyWithResponse request with any body
	CreateReplicationRuleWithBodyWithResponse(ctx context.Context, params *CreateReplicationRuleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateReplicationRuleResp, error)

	CreateReplicationRuleWithResponse(ctx context.Context, params *CreateReplicationRuleParams, body CreateReplicationRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateReplicationRuleResp, error)

	// DeleteReplicationRuleWithResponse request
	DeleteReplicationRuleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteReplicationRuleResp, error)

	// GetReplicationRuleWithResponse request
	GetReplicationRuleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetReplicationRuleResp, error)

	// UpdateReplicationRuleWithBodyWithResponse request with any body
	UpdateReplicationRuleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateReplicationRuleResp, error)

	UpdateReplicationRuleWithResponse(ctx context.Context, id string, body UpdateReplicationRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateReplicationRuleResp, error)

	// ListMigrationImagesWithResponse request
	ListMigrationImagesWithResponse(ctx context.Context, id string, params *ListMigrationImagesParams, reqEditors ...RequestEditorFn) (*ListMigrationImagesResp, error)

	// GetMigrationLogsForImageWithResponse request
	GetMigrationLogsForImageWithResponse(ctx context.Context, id string, imageId string, reqEditors ...RequestEditorFn) (*GetMigrationLogsForImageResp, error)

	// StartMigrationWithResponse request
	StartMigrationWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*StartMigrationResp, error)

	// StopMigrationWithResponse request
	StopMigrationWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*StopMigrationResp, error)

	// GetArtifactStatsForSpaceWithResponse request
	GetArtifactStatsForSpaceWithResponse(ctx context.Context, spaceRef SpaceRefPathParam, params *GetArtifactStatsForSpaceParams, reqEditors ...RequestEditorFn) (*GetArtifactStatsForSpaceResp, error)

	// GetAllHarnessArtifactsWithResponse request
	GetAllHarnessArtifactsWithResponse(ctx context.Context, spaceRef SpaceRefPathParam, params *GetAllHarnessArtifactsParams, reqEditors ...RequestEditorFn) (*GetAllHarnessArtifactsResp, error)

	// GetStorageDetailsWithResponse request
	GetStorageDetailsWithResponse(ctx context.Context, spaceRef SpaceRefPathParam, reqEditors ...RequestEditorFn) (*GetStorageDetailsResp, error)

	// GetAllRegistriesWithResponse request
	GetAllRegistriesWithResponse(ctx context.Context, spaceRef SpaceRefPathParam, params *GetAllRegistriesParams, reqEditors ...RequestEditorFn) (*GetAllRegistriesResp, error)
}

type CreateRegistryResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RegistryResponse
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r CreateRegistryResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRegistryResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RedirectHarnessArtifactResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r RedirectHarnessArtifactResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RedirectHarnessArtifactResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRegistryResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Success
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r DeleteRegistryResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRegistryResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRegistryResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RegistryResponse
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetRegistryResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRegistryResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifyRegistryResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RegistryResponse
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r ModifyRegistryResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifyRegistryResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListArtifactLabelsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListArtifactLabelResponse
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r ListArtifactLabelsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListArtifactLabelsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtifactStatsForRegistryResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArtifactStatsResponse
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetArtifactStatsForRegistryResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtifactStatsForRegistryResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteArtifactResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Success
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r DeleteArtifactResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteArtifactResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateArtifactLabelsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArtifactLabelResponse
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r UpdateArtifactLabelsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateArtifactLabelsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtifactStatsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArtifactStatsResponse
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetArtifactStatsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtifactStatsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtifactSummaryResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArtifactSummaryResponse
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetArtifactSummaryResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtifactSummaryResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteArtifactVersionResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Success
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r DeleteArtifactVersionResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteArtifactVersionResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtifactDeploymentsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArtifactDeploymentsResponse
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetArtifactDeploymentsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtifactDeploymentsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtifactDetailsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArtifactDetailResponse
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetArtifactDetailsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtifactDetailsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDockerArtifactDetailsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DockerArtifactDetailResponse
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetDockerArtifactDetailsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDockerArtifactDetailsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDockerArtifactIntegrationDetailsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DockerArtifactDetailIntegrationResponse
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetDockerArtifactIntegrationDetailsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDockerArtifactIntegrationDetailsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDockerArtifactLayersResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DockerLayersResponse
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetDockerArtifactLayersResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDockerArtifactLayersResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDockerArtifactManifestResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DockerArtifactManifestResponse
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetDockerArtifactManifestResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDockerArtifactManifestResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDockerArtifactManifestsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DockerManifestsResponse
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetDockerArtifactManifestsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDockerArtifactManifestsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtifactFilesResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FileDetailResponse
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetArtifactFilesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtifactFilesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHelmArtifactDetailsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HelmArtifactDetailResponse
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetHelmArtifactDetailsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHelmArtifactDetailsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHelmArtifactManifestResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HelmArtifactManifestResponse
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetHelmArtifactManifestResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHelmArtifactManifestResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtifactVersionSummaryResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArtifactVersionSummaryResponse
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetArtifactVersionSummaryResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtifactVersionSummaryResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllArtifactVersionsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListArtifactVersionResponse
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetAllArtifactVersionsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllArtifactVersionsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllArtifactsByRegistryResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListRegistryArtifactResponse
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetAllArtifactsByRegistryResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllArtifactsByRegistryResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientSetupDetailsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClientSetupDetailsResponse
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetClientSetupDetailsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientSetupDetailsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWebhooksResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListWebhooksResponse
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r ListWebhooksResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWebhooksResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWebhookResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *WebhookResponse
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r CreateWebhookResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWebhookResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWebhookResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Success
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r DeleteWebhookResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWebhookResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWebhookResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebhookResponse
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetWebhookResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWebhookResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWebhookResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *WebhookResponse
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r UpdateWebhookResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWebhookResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWebhookExecutionsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListWebhooksExecutionResponse
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r ListWebhookExecutionsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWebhookExecutionsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWebhookExecutionResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebhookExecutionResponse
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetWebhookExecutionResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWebhookExecutionResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReTriggerWebhookExecutionResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebhookExecutionResponse
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r ReTriggerWebhookExecutionResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReTriggerWebhookExecutionResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListReplicationRulesResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListReplicationRuleResponse
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r ListReplicationRulesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListReplicationRulesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateReplicationRuleResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReplicationRuleResponse
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r CreateReplicationRuleResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateReplicationRuleResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteReplicationRuleResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Success
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r DeleteReplicationRuleResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteReplicationRuleResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReplicationRuleResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReplicationRuleResponse
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetReplicationRuleResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReplicationRuleResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateReplicationRuleResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReplicationRuleResponse
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r UpdateReplicationRuleResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateReplicationRuleResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListMigrationImagesResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListMigrationImageResponse
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r ListMigrationImagesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListMigrationImagesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMigrationLogsForImageResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetMigrationLogsForImageResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMigrationLogsForImageResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StartMigrationResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Success
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r StartMigrationResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StartMigrationResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StopMigrationResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Success
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r StopMigrationResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StopMigrationResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtifactStatsForSpaceResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArtifactStatsResponse
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetArtifactStatsForSpaceResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtifactStatsForSpaceResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllHarnessArtifactsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListArtifactResponse
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetAllHarnessArtifactsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllHarnessArtifactsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStorageDetailsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StorageDetailsResponse
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetStorageDetailsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStorageDetailsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllRegistriesResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListRegistryResponse
	JSON400      *BadRequest
	JSON401      *Unauthenticated
	JSON403      *Unauthorized
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetAllRegistriesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllRegistriesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CreateRegistryWithBodyWithResponse request with arbitrary body returning *CreateRegistryResp
func (c *ClientWithResponses) CreateRegistryWithBodyWithResponse(ctx context.Context, params *CreateRegistryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRegistryResp, error) {
	rsp, err := c.CreateRegistryWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRegistryResp(rsp)
}

func (c *ClientWithResponses) CreateRegistryWithResponse(ctx context.Context, params *CreateRegistryParams, body CreateRegistryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRegistryResp, error) {
	rsp, err := c.CreateRegistry(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRegistryResp(rsp)
}

// RedirectHarnessArtifactWithResponse request returning *RedirectHarnessArtifactResp
func (c *ClientWithResponses) RedirectHarnessArtifactWithResponse(ctx context.Context, registryIdentifier RegistryIdentifierPathParam, artifact ArtifactPathParam, params *RedirectHarnessArtifactParams, reqEditors ...RequestEditorFn) (*RedirectHarnessArtifactResp, error) {
	rsp, err := c.RedirectHarnessArtifact(ctx, registryIdentifier, artifact, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRedirectHarnessArtifactResp(rsp)
}

// DeleteRegistryWithResponse request returning *DeleteRegistryResp
func (c *ClientWithResponses) DeleteRegistryWithResponse(ctx context.Context, registryRef RegistryRefPathParam, reqEditors ...RequestEditorFn) (*DeleteRegistryResp, error) {
	rsp, err := c.DeleteRegistry(ctx, registryRef, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRegistryResp(rsp)
}

// GetRegistryWithResponse request returning *GetRegistryResp
func (c *ClientWithResponses) GetRegistryWithResponse(ctx context.Context, registryRef RegistryRefPathParam, reqEditors ...RequestEditorFn) (*GetRegistryResp, error) {
	rsp, err := c.GetRegistry(ctx, registryRef, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRegistryResp(rsp)
}

// ModifyRegistryWithBodyWithResponse request with arbitrary body returning *ModifyRegistryResp
func (c *ClientWithResponses) ModifyRegistryWithBodyWithResponse(ctx context.Context, registryRef RegistryRefPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyRegistryResp, error) {
	rsp, err := c.ModifyRegistryWithBody(ctx, registryRef, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyRegistryResp(rsp)
}

func (c *ClientWithResponses) ModifyRegistryWithResponse(ctx context.Context, registryRef RegistryRefPathParam, body ModifyRegistryJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyRegistryResp, error) {
	rsp, err := c.ModifyRegistry(ctx, registryRef, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyRegistryResp(rsp)
}

// ListArtifactLabelsWithResponse request returning *ListArtifactLabelsResp
func (c *ClientWithResponses) ListArtifactLabelsWithResponse(ctx context.Context, registryRef RegistryRefPathParam, params *ListArtifactLabelsParams, reqEditors ...RequestEditorFn) (*ListArtifactLabelsResp, error) {
	rsp, err := c.ListArtifactLabels(ctx, registryRef, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListArtifactLabelsResp(rsp)
}

// GetArtifactStatsForRegistryWithResponse request returning *GetArtifactStatsForRegistryResp
func (c *ClientWithResponses) GetArtifactStatsForRegistryWithResponse(ctx context.Context, registryRef RegistryRefPathParam, params *GetArtifactStatsForRegistryParams, reqEditors ...RequestEditorFn) (*GetArtifactStatsForRegistryResp, error) {
	rsp, err := c.GetArtifactStatsForRegistry(ctx, registryRef, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtifactStatsForRegistryResp(rsp)
}

// DeleteArtifactWithResponse request returning *DeleteArtifactResp
func (c *ClientWithResponses) DeleteArtifactWithResponse(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, reqEditors ...RequestEditorFn) (*DeleteArtifactResp, error) {
	rsp, err := c.DeleteArtifact(ctx, registryRef, artifact, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteArtifactResp(rsp)
}

// UpdateArtifactLabelsWithBodyWithResponse request with arbitrary body returning *UpdateArtifactLabelsResp
func (c *ClientWithResponses) UpdateArtifactLabelsWithBodyWithResponse(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateArtifactLabelsResp, error) {
	rsp, err := c.UpdateArtifactLabelsWithBody(ctx, registryRef, artifact, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateArtifactLabelsResp(rsp)
}

func (c *ClientWithResponses) UpdateArtifactLabelsWithResponse(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, body UpdateArtifactLabelsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateArtifactLabelsResp, error) {
	rsp, err := c.UpdateArtifactLabels(ctx, registryRef, artifact, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateArtifactLabelsResp(rsp)
}

// GetArtifactStatsWithResponse request returning *GetArtifactStatsResp
func (c *ClientWithResponses) GetArtifactStatsWithResponse(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, params *GetArtifactStatsParams, reqEditors ...RequestEditorFn) (*GetArtifactStatsResp, error) {
	rsp, err := c.GetArtifactStats(ctx, registryRef, artifact, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtifactStatsResp(rsp)
}

// GetArtifactSummaryWithResponse request returning *GetArtifactSummaryResp
func (c *ClientWithResponses) GetArtifactSummaryWithResponse(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, reqEditors ...RequestEditorFn) (*GetArtifactSummaryResp, error) {
	rsp, err := c.GetArtifactSummary(ctx, registryRef, artifact, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtifactSummaryResp(rsp)
}

// DeleteArtifactVersionWithResponse request returning *DeleteArtifactVersionResp
func (c *ClientWithResponses) DeleteArtifactVersionWithResponse(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, reqEditors ...RequestEditorFn) (*DeleteArtifactVersionResp, error) {
	rsp, err := c.DeleteArtifactVersion(ctx, registryRef, artifact, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteArtifactVersionResp(rsp)
}

// GetArtifactDeploymentsWithResponse request returning *GetArtifactDeploymentsResp
func (c *ClientWithResponses) GetArtifactDeploymentsWithResponse(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, params *GetArtifactDeploymentsParams, reqEditors ...RequestEditorFn) (*GetArtifactDeploymentsResp, error) {
	rsp, err := c.GetArtifactDeployments(ctx, registryRef, artifact, version, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtifactDeploymentsResp(rsp)
}

// GetArtifactDetailsWithResponse request returning *GetArtifactDetailsResp
func (c *ClientWithResponses) GetArtifactDetailsWithResponse(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, params *GetArtifactDetailsParams, reqEditors ...RequestEditorFn) (*GetArtifactDetailsResp, error) {
	rsp, err := c.GetArtifactDetails(ctx, registryRef, artifact, version, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtifactDetailsResp(rsp)
}

// GetDockerArtifactDetailsWithResponse request returning *GetDockerArtifactDetailsResp
func (c *ClientWithResponses) GetDockerArtifactDetailsWithResponse(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, params *GetDockerArtifactDetailsParams, reqEditors ...RequestEditorFn) (*GetDockerArtifactDetailsResp, error) {
	rsp, err := c.GetDockerArtifactDetails(ctx, registryRef, artifact, version, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDockerArtifactDetailsResp(rsp)
}

// GetDockerArtifactIntegrationDetailsWithResponse request returning *GetDockerArtifactIntegrationDetailsResp
func (c *ClientWithResponses) GetDockerArtifactIntegrationDetailsWithResponse(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, params *GetDockerArtifactIntegrationDetailsParams, reqEditors ...RequestEditorFn) (*GetDockerArtifactIntegrationDetailsResp, error) {
	rsp, err := c.GetDockerArtifactIntegrationDetails(ctx, registryRef, artifact, version, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDockerArtifactIntegrationDetailsResp(rsp)
}

// GetDockerArtifactLayersWithResponse request returning *GetDockerArtifactLayersResp
func (c *ClientWithResponses) GetDockerArtifactLayersWithResponse(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, params *GetDockerArtifactLayersParams, reqEditors ...RequestEditorFn) (*GetDockerArtifactLayersResp, error) {
	rsp, err := c.GetDockerArtifactLayers(ctx, registryRef, artifact, version, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDockerArtifactLayersResp(rsp)
}

// GetDockerArtifactManifestWithResponse request returning *GetDockerArtifactManifestResp
func (c *ClientWithResponses) GetDockerArtifactManifestWithResponse(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, params *GetDockerArtifactManifestParams, reqEditors ...RequestEditorFn) (*GetDockerArtifactManifestResp, error) {
	rsp, err := c.GetDockerArtifactManifest(ctx, registryRef, artifact, version, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDockerArtifactManifestResp(rsp)
}

// GetDockerArtifactManifestsWithResponse request returning *GetDockerArtifactManifestsResp
func (c *ClientWithResponses) GetDockerArtifactManifestsWithResponse(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, reqEditors ...RequestEditorFn) (*GetDockerArtifactManifestsResp, error) {
	rsp, err := c.GetDockerArtifactManifests(ctx, registryRef, artifact, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDockerArtifactManifestsResp(rsp)
}

// GetArtifactFilesWithResponse request returning *GetArtifactFilesResp
func (c *ClientWithResponses) GetArtifactFilesWithResponse(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, params *GetArtifactFilesParams, reqEditors ...RequestEditorFn) (*GetArtifactFilesResp, error) {
	rsp, err := c.GetArtifactFiles(ctx, registryRef, artifact, version, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtifactFilesResp(rsp)
}

// GetHelmArtifactDetailsWithResponse request returning *GetHelmArtifactDetailsResp
func (c *ClientWithResponses) GetHelmArtifactDetailsWithResponse(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, reqEditors ...RequestEditorFn) (*GetHelmArtifactDetailsResp, error) {
	rsp, err := c.GetHelmArtifactDetails(ctx, registryRef, artifact, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHelmArtifactDetailsResp(rsp)
}

// GetHelmArtifactManifestWithResponse request returning *GetHelmArtifactManifestResp
func (c *ClientWithResponses) GetHelmArtifactManifestWithResponse(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, reqEditors ...RequestEditorFn) (*GetHelmArtifactManifestResp, error) {
	rsp, err := c.GetHelmArtifactManifest(ctx, registryRef, artifact, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHelmArtifactManifestResp(rsp)
}

// GetArtifactVersionSummaryWithResponse request returning *GetArtifactVersionSummaryResp
func (c *ClientWithResponses) GetArtifactVersionSummaryWithResponse(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, version VersionPathParam, params *GetArtifactVersionSummaryParams, reqEditors ...RequestEditorFn) (*GetArtifactVersionSummaryResp, error) {
	rsp, err := c.GetArtifactVersionSummary(ctx, registryRef, artifact, version, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtifactVersionSummaryResp(rsp)
}

// GetAllArtifactVersionsWithResponse request returning *GetAllArtifactVersionsResp
func (c *ClientWithResponses) GetAllArtifactVersionsWithResponse(ctx context.Context, registryRef RegistryRefPathParam, artifact ArtifactPathParam, params *GetAllArtifactVersionsParams, reqEditors ...RequestEditorFn) (*GetAllArtifactVersionsResp, error) {
	rsp, err := c.GetAllArtifactVersions(ctx, registryRef, artifact, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllArtifactVersionsResp(rsp)
}

// GetAllArtifactsByRegistryWithResponse request returning *GetAllArtifactsByRegistryResp
func (c *ClientWithResponses) GetAllArtifactsByRegistryWithResponse(ctx context.Context, registryRef RegistryRefPathParam, params *GetAllArtifactsByRegistryParams, reqEditors ...RequestEditorFn) (*GetAllArtifactsByRegistryResp, error) {
	rsp, err := c.GetAllArtifactsByRegistry(ctx, registryRef, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllArtifactsByRegistryResp(rsp)
}

// GetClientSetupDetailsWithResponse request returning *GetClientSetupDetailsResp
func (c *ClientWithResponses) GetClientSetupDetailsWithResponse(ctx context.Context, registryRef RegistryRefPathParam, params *GetClientSetupDetailsParams, reqEditors ...RequestEditorFn) (*GetClientSetupDetailsResp, error) {
	rsp, err := c.GetClientSetupDetails(ctx, registryRef, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientSetupDetailsResp(rsp)
}

// ListWebhooksWithResponse request returning *ListWebhooksResp
func (c *ClientWithResponses) ListWebhooksWithResponse(ctx context.Context, registryRef RegistryRefPathParam, params *ListWebhooksParams, reqEditors ...RequestEditorFn) (*ListWebhooksResp, error) {
	rsp, err := c.ListWebhooks(ctx, registryRef, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWebhooksResp(rsp)
}

// CreateWebhookWithBodyWithResponse request with arbitrary body returning *CreateWebhookResp
func (c *ClientWithResponses) CreateWebhookWithBodyWithResponse(ctx context.Context, registryRef RegistryRefPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWebhookResp, error) {
	rsp, err := c.CreateWebhookWithBody(ctx, registryRef, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWebhookResp(rsp)
}

func (c *ClientWithResponses) CreateWebhookWithResponse(ctx context.Context, registryRef RegistryRefPathParam, body CreateWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWebhookResp, error) {
	rsp, err := c.CreateWebhook(ctx, registryRef, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWebhookResp(rsp)
}

// DeleteWebhookWithResponse request returning *DeleteWebhookResp
func (c *ClientWithResponses) DeleteWebhookWithResponse(ctx context.Context, registryRef RegistryRefPathParam, webhookIdentifier WebhookIdentifierPathParam, reqEditors ...RequestEditorFn) (*DeleteWebhookResp, error) {
	rsp, err := c.DeleteWebhook(ctx, registryRef, webhookIdentifier, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWebhookResp(rsp)
}

// GetWebhookWithResponse request returning *GetWebhookResp
func (c *ClientWithResponses) GetWebhookWithResponse(ctx context.Context, registryRef RegistryRefPathParam, webhookIdentifier WebhookIdentifierPathParam, reqEditors ...RequestEditorFn) (*GetWebhookResp, error) {
	rsp, err := c.GetWebhook(ctx, registryRef, webhookIdentifier, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWebhookResp(rsp)
}

// UpdateWebhookWithBodyWithResponse request with arbitrary body returning *UpdateWebhookResp
func (c *ClientWithResponses) UpdateWebhookWithBodyWithResponse(ctx context.Context, registryRef RegistryRefPathParam, webhookIdentifier WebhookIdentifierPathParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWebhookResp, error) {
	rsp, err := c.UpdateWebhookWithBody(ctx, registryRef, webhookIdentifier, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWebhookResp(rsp)
}

func (c *ClientWithResponses) UpdateWebhookWithResponse(ctx context.Context, registryRef RegistryRefPathParam, webhookIdentifier WebhookIdentifierPathParam, body UpdateWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWebhookResp, error) {
	rsp, err := c.UpdateWebhook(ctx, registryRef, webhookIdentifier, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWebhookResp(rsp)
}

// ListWebhookExecutionsWithResponse request returning *ListWebhookExecutionsResp
func (c *ClientWithResponses) ListWebhookExecutionsWithResponse(ctx context.Context, registryRef RegistryRefPathParam, webhookIdentifier WebhookIdentifierPathParam, params *ListWebhookExecutionsParams, reqEditors ...RequestEditorFn) (*ListWebhookExecutionsResp, error) {
	rsp, err := c.ListWebhookExecutions(ctx, registryRef, webhookIdentifier, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWebhookExecutionsResp(rsp)
}

// GetWebhookExecutionWithResponse request returning *GetWebhookExecutionResp
func (c *ClientWithResponses) GetWebhookExecutionWithResponse(ctx context.Context, registryRef RegistryRefPathParam, webhookIdentifier WebhookIdentifierPathParam, webhookExecutionId WebhookExecutionIdPathParam, reqEditors ...RequestEditorFn) (*GetWebhookExecutionResp, error) {
	rsp, err := c.GetWebhookExecution(ctx, registryRef, webhookIdentifier, webhookExecutionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWebhookExecutionResp(rsp)
}

// ReTriggerWebhookExecutionWithResponse request returning *ReTriggerWebhookExecutionResp
func (c *ClientWithResponses) ReTriggerWebhookExecutionWithResponse(ctx context.Context, registryRef RegistryRefPathParam, webhookIdentifier WebhookIdentifierPathParam, webhookExecutionId WebhookExecutionIdPathParam, reqEditors ...RequestEditorFn) (*ReTriggerWebhookExecutionResp, error) {
	rsp, err := c.ReTriggerWebhookExecution(ctx, registryRef, webhookIdentifier, webhookExecutionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReTriggerWebhookExecutionResp(rsp)
}

// ListReplicationRulesWithResponse request returning *ListReplicationRulesResp
func (c *ClientWithResponses) ListReplicationRulesWithResponse(ctx context.Context, params *ListReplicationRulesParams, reqEditors ...RequestEditorFn) (*ListReplicationRulesResp, error) {
	rsp, err := c.ListReplicationRules(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListReplicationRulesResp(rsp)
}

// CreateReplicationRuleWithBodyWithResponse request with arbitrary body returning *CreateReplicationRuleResp
func (c *ClientWithResponses) CreateReplicationRuleWithBodyWithResponse(ctx context.Context, params *CreateReplicationRuleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateReplicationRuleResp, error) {
	rsp, err := c.CreateReplicationRuleWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateReplicationRuleResp(rsp)
}

func (c *ClientWithResponses) CreateReplicationRuleWithResponse(ctx context.Context, params *CreateReplicationRuleParams, body CreateReplicationRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateReplicationRuleResp, error) {
	rsp, err := c.CreateReplicationRule(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateReplicationRuleResp(rsp)
}

// DeleteReplicationRuleWithResponse request returning *DeleteReplicationRuleResp
func (c *ClientWithResponses) DeleteReplicationRuleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteReplicationRuleResp, error) {
	rsp, err := c.DeleteReplicationRule(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteReplicationRuleResp(rsp)
}

// GetReplicationRuleWithResponse request returning *GetReplicationRuleResp
func (c *ClientWithResponses) GetReplicationRuleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetReplicationRuleResp, error) {
	rsp, err := c.GetReplicationRule(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReplicationRuleResp(rsp)
}

// UpdateReplicationRuleWithBodyWithResponse request with arbitrary body returning *UpdateReplicationRuleResp
func (c *ClientWithResponses) UpdateReplicationRuleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateReplicationRuleResp, error) {
	rsp, err := c.UpdateReplicationRuleWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateReplicationRuleResp(rsp)
}

func (c *ClientWithResponses) UpdateReplicationRuleWithResponse(ctx context.Context, id string, body UpdateReplicationRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateReplicationRuleResp, error) {
	rsp, err := c.UpdateReplicationRule(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateReplicationRuleResp(rsp)
}

// ListMigrationImagesWithResponse request returning *ListMigrationImagesResp
func (c *ClientWithResponses) ListMigrationImagesWithResponse(ctx context.Context, id string, params *ListMigrationImagesParams, reqEditors ...RequestEditorFn) (*ListMigrationImagesResp, error) {
	rsp, err := c.ListMigrationImages(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListMigrationImagesResp(rsp)
}

// GetMigrationLogsForImageWithResponse request returning *GetMigrationLogsForImageResp
func (c *ClientWithResponses) GetMigrationLogsForImageWithResponse(ctx context.Context, id string, imageId string, reqEditors ...RequestEditorFn) (*GetMigrationLogsForImageResp, error) {
	rsp, err := c.GetMigrationLogsForImage(ctx, id, imageId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMigrationLogsForImageResp(rsp)
}

// StartMigrationWithResponse request returning *StartMigrationResp
func (c *ClientWithResponses) StartMigrationWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*StartMigrationResp, error) {
	rsp, err := c.StartMigration(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartMigrationResp(rsp)
}

// StopMigrationWithResponse request returning *StopMigrationResp
func (c *ClientWithResponses) StopMigrationWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*StopMigrationResp, error) {
	rsp, err := c.StopMigration(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStopMigrationResp(rsp)
}

// GetArtifactStatsForSpaceWithResponse request returning *GetArtifactStatsForSpaceResp
func (c *ClientWithResponses) GetArtifactStatsForSpaceWithResponse(ctx context.Context, spaceRef SpaceRefPathParam, params *GetArtifactStatsForSpaceParams, reqEditors ...RequestEditorFn) (*GetArtifactStatsForSpaceResp, error) {
	rsp, err := c.GetArtifactStatsForSpace(ctx, spaceRef, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtifactStatsForSpaceResp(rsp)
}

// GetAllHarnessArtifactsWithResponse request returning *GetAllHarnessArtifactsResp
func (c *ClientWithResponses) GetAllHarnessArtifactsWithResponse(ctx context.Context, spaceRef SpaceRefPathParam, params *GetAllHarnessArtifactsParams, reqEditors ...RequestEditorFn) (*GetAllHarnessArtifactsResp, error) {
	rsp, err := c.GetAllHarnessArtifacts(ctx, spaceRef, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllHarnessArtifactsResp(rsp)
}

// GetStorageDetailsWithResponse request returning *GetStorageDetailsResp
func (c *ClientWithResponses) GetStorageDetailsWithResponse(ctx context.Context, spaceRef SpaceRefPathParam, reqEditors ...RequestEditorFn) (*GetStorageDetailsResp, error) {
	rsp, err := c.GetStorageDetails(ctx, spaceRef, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStorageDetailsResp(rsp)
}

// GetAllRegistriesWithResponse request returning *GetAllRegistriesResp
func (c *ClientWithResponses) GetAllRegistriesWithResponse(ctx context.Context, spaceRef SpaceRefPathParam, params *GetAllRegistriesParams, reqEditors ...RequestEditorFn) (*GetAllRegistriesResp, error) {
	rsp, err := c.GetAllRegistries(ctx, spaceRef, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllRegistriesResp(rsp)
}

// ParseCreateRegistryResp parses an HTTP response from a CreateRegistryWithResponse call
func ParseCreateRegistryResp(rsp *http.Response) (*CreateRegistryResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRegistryResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RegistryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRedirectHarnessArtifactResp parses an HTTP response from a RedirectHarnessArtifactWithResponse call
func ParseRedirectHarnessArtifactResp(rsp *http.Response) (*RedirectHarnessArtifactResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RedirectHarnessArtifactResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteRegistryResp parses an HTTP response from a DeleteRegistryWithResponse call
func ParseDeleteRegistryResp(rsp *http.Response) (*DeleteRegistryResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRegistryResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Success
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetRegistryResp parses an HTTP response from a GetRegistryWithResponse call
func ParseGetRegistryResp(rsp *http.Response) (*GetRegistryResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRegistryResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RegistryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseModifyRegistryResp parses an HTTP response from a ModifyRegistryWithResponse call
func ParseModifyRegistryResp(rsp *http.Response) (*ModifyRegistryResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifyRegistryResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RegistryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListArtifactLabelsResp parses an HTTP response from a ListArtifactLabelsWithResponse call
func ParseListArtifactLabelsResp(rsp *http.Response) (*ListArtifactLabelsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListArtifactLabelsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListArtifactLabelResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetArtifactStatsForRegistryResp parses an HTTP response from a GetArtifactStatsForRegistryWithResponse call
func ParseGetArtifactStatsForRegistryResp(rsp *http.Response) (*GetArtifactStatsForRegistryResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtifactStatsForRegistryResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtifactStatsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteArtifactResp parses an HTTP response from a DeleteArtifactWithResponse call
func ParseDeleteArtifactResp(rsp *http.Response) (*DeleteArtifactResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteArtifactResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Success
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateArtifactLabelsResp parses an HTTP response from a UpdateArtifactLabelsWithResponse call
func ParseUpdateArtifactLabelsResp(rsp *http.Response) (*UpdateArtifactLabelsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateArtifactLabelsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtifactLabelResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetArtifactStatsResp parses an HTTP response from a GetArtifactStatsWithResponse call
func ParseGetArtifactStatsResp(rsp *http.Response) (*GetArtifactStatsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtifactStatsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtifactStatsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetArtifactSummaryResp parses an HTTP response from a GetArtifactSummaryWithResponse call
func ParseGetArtifactSummaryResp(rsp *http.Response) (*GetArtifactSummaryResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtifactSummaryResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtifactSummaryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteArtifactVersionResp parses an HTTP response from a DeleteArtifactVersionWithResponse call
func ParseDeleteArtifactVersionResp(rsp *http.Response) (*DeleteArtifactVersionResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteArtifactVersionResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Success
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetArtifactDeploymentsResp parses an HTTP response from a GetArtifactDeploymentsWithResponse call
func ParseGetArtifactDeploymentsResp(rsp *http.Response) (*GetArtifactDeploymentsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtifactDeploymentsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtifactDeploymentsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetArtifactDetailsResp parses an HTTP response from a GetArtifactDetailsWithResponse call
func ParseGetArtifactDetailsResp(rsp *http.Response) (*GetArtifactDetailsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtifactDetailsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtifactDetailResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetDockerArtifactDetailsResp parses an HTTP response from a GetDockerArtifactDetailsWithResponse call
func ParseGetDockerArtifactDetailsResp(rsp *http.Response) (*GetDockerArtifactDetailsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDockerArtifactDetailsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DockerArtifactDetailResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetDockerArtifactIntegrationDetailsResp parses an HTTP response from a GetDockerArtifactIntegrationDetailsWithResponse call
func ParseGetDockerArtifactIntegrationDetailsResp(rsp *http.Response) (*GetDockerArtifactIntegrationDetailsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDockerArtifactIntegrationDetailsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DockerArtifactDetailIntegrationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetDockerArtifactLayersResp parses an HTTP response from a GetDockerArtifactLayersWithResponse call
func ParseGetDockerArtifactLayersResp(rsp *http.Response) (*GetDockerArtifactLayersResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDockerArtifactLayersResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DockerLayersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetDockerArtifactManifestResp parses an HTTP response from a GetDockerArtifactManifestWithResponse call
func ParseGetDockerArtifactManifestResp(rsp *http.Response) (*GetDockerArtifactManifestResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDockerArtifactManifestResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DockerArtifactManifestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetDockerArtifactManifestsResp parses an HTTP response from a GetDockerArtifactManifestsWithResponse call
func ParseGetDockerArtifactManifestsResp(rsp *http.Response) (*GetDockerArtifactManifestsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDockerArtifactManifestsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DockerManifestsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetArtifactFilesResp parses an HTTP response from a GetArtifactFilesWithResponse call
func ParseGetArtifactFilesResp(rsp *http.Response) (*GetArtifactFilesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtifactFilesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FileDetailResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetHelmArtifactDetailsResp parses an HTTP response from a GetHelmArtifactDetailsWithResponse call
func ParseGetHelmArtifactDetailsResp(rsp *http.Response) (*GetHelmArtifactDetailsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHelmArtifactDetailsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HelmArtifactDetailResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetHelmArtifactManifestResp parses an HTTP response from a GetHelmArtifactManifestWithResponse call
func ParseGetHelmArtifactManifestResp(rsp *http.Response) (*GetHelmArtifactManifestResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHelmArtifactManifestResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HelmArtifactManifestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetArtifactVersionSummaryResp parses an HTTP response from a GetArtifactVersionSummaryWithResponse call
func ParseGetArtifactVersionSummaryResp(rsp *http.Response) (*GetArtifactVersionSummaryResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtifactVersionSummaryResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtifactVersionSummaryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAllArtifactVersionsResp parses an HTTP response from a GetAllArtifactVersionsWithResponse call
func ParseGetAllArtifactVersionsResp(rsp *http.Response) (*GetAllArtifactVersionsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllArtifactVersionsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListArtifactVersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAllArtifactsByRegistryResp parses an HTTP response from a GetAllArtifactsByRegistryWithResponse call
func ParseGetAllArtifactsByRegistryResp(rsp *http.Response) (*GetAllArtifactsByRegistryResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllArtifactsByRegistryResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListRegistryArtifactResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetClientSetupDetailsResp parses an HTTP response from a GetClientSetupDetailsWithResponse call
func ParseGetClientSetupDetailsResp(rsp *http.Response) (*GetClientSetupDetailsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientSetupDetailsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClientSetupDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListWebhooksResp parses an HTTP response from a ListWebhooksWithResponse call
func ParseListWebhooksResp(rsp *http.Response) (*ListWebhooksResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWebhooksResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListWebhooksResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateWebhookResp parses an HTTP response from a CreateWebhookWithResponse call
func ParseCreateWebhookResp(rsp *http.Response) (*CreateWebhookResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWebhookResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest WebhookResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteWebhookResp parses an HTTP response from a DeleteWebhookWithResponse call
func ParseDeleteWebhookResp(rsp *http.Response) (*DeleteWebhookResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWebhookResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Success
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetWebhookResp parses an HTTP response from a GetWebhookWithResponse call
func ParseGetWebhookResp(rsp *http.Response) (*GetWebhookResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWebhookResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebhookResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateWebhookResp parses an HTTP response from a UpdateWebhookWithResponse call
func ParseUpdateWebhookResp(rsp *http.Response) (*UpdateWebhookResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWebhookResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest WebhookResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListWebhookExecutionsResp parses an HTTP response from a ListWebhookExecutionsWithResponse call
func ParseListWebhookExecutionsResp(rsp *http.Response) (*ListWebhookExecutionsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWebhookExecutionsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListWebhooksExecutionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetWebhookExecutionResp parses an HTTP response from a GetWebhookExecutionWithResponse call
func ParseGetWebhookExecutionResp(rsp *http.Response) (*GetWebhookExecutionResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWebhookExecutionResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebhookExecutionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseReTriggerWebhookExecutionResp parses an HTTP response from a ReTriggerWebhookExecutionWithResponse call
func ParseReTriggerWebhookExecutionResp(rsp *http.Response) (*ReTriggerWebhookExecutionResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReTriggerWebhookExecutionResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebhookExecutionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListReplicationRulesResp parses an HTTP response from a ListReplicationRulesWithResponse call
func ParseListReplicationRulesResp(rsp *http.Response) (*ListReplicationRulesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListReplicationRulesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListReplicationRuleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateReplicationRuleResp parses an HTTP response from a CreateReplicationRuleWithResponse call
func ParseCreateReplicationRuleResp(rsp *http.Response) (*CreateReplicationRuleResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateReplicationRuleResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReplicationRuleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteReplicationRuleResp parses an HTTP response from a DeleteReplicationRuleWithResponse call
func ParseDeleteReplicationRuleResp(rsp *http.Response) (*DeleteReplicationRuleResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteReplicationRuleResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Success
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetReplicationRuleResp parses an HTTP response from a GetReplicationRuleWithResponse call
func ParseGetReplicationRuleResp(rsp *http.Response) (*GetReplicationRuleResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReplicationRuleResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReplicationRuleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateReplicationRuleResp parses an HTTP response from a UpdateReplicationRuleWithResponse call
func ParseUpdateReplicationRuleResp(rsp *http.Response) (*UpdateReplicationRuleResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateReplicationRuleResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReplicationRuleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListMigrationImagesResp parses an HTTP response from a ListMigrationImagesWithResponse call
func ParseListMigrationImagesResp(rsp *http.Response) (*ListMigrationImagesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListMigrationImagesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListMigrationImageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetMigrationLogsForImageResp parses an HTTP response from a GetMigrationLogsForImageWithResponse call
func ParseGetMigrationLogsForImageResp(rsp *http.Response) (*GetMigrationLogsForImageResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMigrationLogsForImageResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseStartMigrationResp parses an HTTP response from a StartMigrationWithResponse call
func ParseStartMigrationResp(rsp *http.Response) (*StartMigrationResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StartMigrationResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Success
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseStopMigrationResp parses an HTTP response from a StopMigrationWithResponse call
func ParseStopMigrationResp(rsp *http.Response) (*StopMigrationResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StopMigrationResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Success
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetArtifactStatsForSpaceResp parses an HTTP response from a GetArtifactStatsForSpaceWithResponse call
func ParseGetArtifactStatsForSpaceResp(rsp *http.Response) (*GetArtifactStatsForSpaceResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtifactStatsForSpaceResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtifactStatsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAllHarnessArtifactsResp parses an HTTP response from a GetAllHarnessArtifactsWithResponse call
func ParseGetAllHarnessArtifactsResp(rsp *http.Response) (*GetAllHarnessArtifactsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllHarnessArtifactsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListArtifactResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetStorageDetailsResp parses an HTTP response from a GetStorageDetailsWithResponse call
func ParseGetStorageDetailsResp(rsp *http.Response) (*GetStorageDetailsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStorageDetailsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StorageDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAllRegistriesResp parses an HTTP response from a GetAllRegistriesWithResponse call
func ParseGetAllRegistriesResp(rsp *http.Response) (*GetAllRegistriesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllRegistriesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListRegistryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthenticated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
