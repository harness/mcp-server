// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// Defines values for DBInstanceFilterInFilterType.
const (
	Equals    DBInstanceFilterInFilterType = "Equals"
	NotEquals DBInstanceFilterInFilterType = "NotEquals"
)

// Defines values for DBSchemaOutSchemaSourceType.
const (
	Artifactory DBSchemaOutSchemaSourceType = "Artifactory"
	Custom      DBSchemaOutSchemaSourceType = "Custom"
	Git         DBSchemaOutSchemaSourceType = "Git"
)

// Defines values for DBSchemaType.
const (
	Repository DBSchemaType = "Repository"
	Script     DBSchemaType = "Script"
)

// Defines values for Order.
const (
	OrderASC  Order = "ASC"
	OrderDESC Order = "DESC"
)

// Defines values for Sort.
const (
	SortCreated Sort = "created"
	SortName    Sort = "name"
	SortUpdated Sort = "updated"
)

// Defines values for V1ListProjDbSchemaInstanceParamsSort.
const (
	V1ListProjDbSchemaInstanceParamsSortCreated V1ListProjDbSchemaInstanceParamsSort = "created"
	V1ListProjDbSchemaInstanceParamsSortName    V1ListProjDbSchemaInstanceParamsSort = "name"
	V1ListProjDbSchemaInstanceParamsSortUpdated V1ListProjDbSchemaInstanceParamsSort = "updated"
)

// Defines values for V1ListProjDbSchemaInstanceParamsOrder.
const (
	V1ListProjDbSchemaInstanceParamsOrderASC  V1ListProjDbSchemaInstanceParamsOrder = "ASC"
	V1ListProjDbSchemaInstanceParamsOrderDESC V1ListProjDbSchemaInstanceParamsOrder = "DESC"
)

// ChangeLogScript if schemaType is Script location of the changelog file after using a custom script to download
type ChangeLogScript struct {
	// Command command script used to download the changelog file
	Command string `json:"command"`

	// Image The fully-qualified name (FQN) of the image
	Image string `json:"image"`

	// Location location of the changelog file
	Location string `json:"location"`

	// Shell shell type
	Shell string `json:"shell"`
}

// Changelog if schemaType is Repository location of the changelog file containing schema changes in a git repository
type Changelog struct {
	// ArchivePath path excluding the repo till the archive file
	ArchivePath *string `json:"archivePath,omitempty"`

	// Connector identifier of the harness git connector
	Connector string `json:"connector"`

	// Location path to the change log file
	Location string `json:"location"`

	// Repo repo name of the git based connector when ConnectionType is Account
	Repo *string `json:"repo,omitempty"`
}

// DBInstanceFilterIn DB Instance Filter Request
type DBInstanceFilterIn struct {
	// FilterType filter criteria type. Example: Equals, NotEquals
	FilterType *DBInstanceFilterInFilterType `json:"filterType,omitempty"`

	// InstanceTags an array on db instance key value pairs used against the filter
	InstanceTags *[]NGTag `json:"instanceTags,omitempty"`
}

// DBInstanceFilterInFilterType filter criteria type. Example: Equals, NotEquals
type DBInstanceFilterInFilterType string

// DBInstanceOut Database Instance Response
type DBInstanceOut struct {
	// Branch branch where the instance is stored
	Branch *string `json:"branch,omitempty"`

	// Connector DB Connector
	Connector string `json:"connector"`

	// Context Liquibase context
	Context *string `json:"context,omitempty"`

	// Created epoch seconds when the database instance was created
	Created int64 `json:"created"`

	// Identifier identifier of the database instance
	Identifier string `json:"identifier"`

	// LastAppliedTag Most recent tag applied to the database
	LastAppliedTag *string `json:"lastAppliedTag,omitempty"`

	// LastDeployedChangeSetTag Tag on last deployed changeSet
	LastDeployedChangeSetTag string `json:"lastDeployedChangeSetTag"`

	// LiquibaseSubstituteProperties properties to substitute in liquibase changelog
	LiquibaseSubstituteProperties *map[string]string `json:"liquibaseSubstituteProperties,omitempty"`

	// Name name of the database instance
	Name             string  `json:"name"`
	SchemaId         *string `json:"schemaId,omitempty"`
	SchemaIdentifier *string `json:"schemaIdentifier,omitempty"`

	// Tags tags attached to the database instance
	Tags      map[string]string `json:"tags,omitempty"`
	ToOnboard *bool             `json:"toOnboard,omitempty"`

	// Updated epoch seconds when the database instance was last updated
	Updated *int64 `json:"updated,omitempty"`
}

// DBSchemaOut Database Schema Response
type DBSchemaOut struct {
	// ChangeLogScript if schemaType is Script location of the changelog file after using a custom script to download
	ChangeLogScript *ChangeLogScript `json:"changeLogScript,omitempty"`

	// Changelog if schemaType is Repository location of the changelog file containing schema changes in a git repository
	Changelog *Changelog `json:"changelog,omitempty"`

	// Created epoch seconds when the database schema was created
	Created int64 `json:"created"`

	// Identifier identifier of the database schema
	Identifier string `json:"identifier"`

	// InstanceCount number of database instances corresponding to database schema
	InstanceCount int64 `json:"instanceCount"`

	// Name name of the database schema
	Name string `json:"name"`

	// ParentId parentUniqueId for scope schema belongs to
	ParentId string `json:"parentId"`

	// PrimaryDbInstanceId Identifier for the primary dbInstance used for advanced feature like LLM Authoring etc.
	PrimaryDbInstanceId *string                      `json:"primaryDbInstanceId,omitempty"`
	SchemaSourceType    *DBSchemaOutSchemaSourceType `json:"schemaSourceType,omitempty"`

	// Service harness service corresponding to database schema
	Service *string `json:"service,omitempty"`

	// Tags tags attached to the database schema
	Tags map[string]string `json:"tags,omitempty"`

	// Type db schema type
	Type DBSchemaType `json:"type"`

	// Updated epoch seconds when the database schema was last updated
	Updated *int64 `json:"updated,omitempty"`
}

// DBSchemaOutSchemaSourceType defines model for DBSchemaOut.SchemaSourceType.
type DBSchemaOutSchemaSourceType string

// DBSchemaType db schema type
type DBSchemaType string

// Error Error Response
type Error struct {
	// Message error message detail
	Message string `json:"message"`
}

// NGTag ng tag with key and value
type NGTag struct {
	Key   string  `json:"key"`
	Value *string `json:"value"`
}

// AccountHeader defines model for AccountHeader.
type AccountHeader = string

// DBInstanceParam defines model for DBInstanceParam.
type DBInstanceParam = string

// DBSchemaParam defines model for DBSchemaParam.
type DBSchemaParam = string

// Limit defines model for Limit.
type Limit = int

// LogParam defines model for LogParam.
type LogParam = string

// Order defines model for Order.
type Order string

// OrgParam defines model for OrgParam.
type OrgParam = string

// PageIndex defines model for PageIndex.
type PageIndex = int64

// ProjectParam defines model for ProjectParam.
type ProjectParam = string

// SearchTerm defines model for SearchTerm.
type SearchTerm = string

// Sort defines model for Sort.
type Sort string

// DBInstanceListResponse Response body for List Schema
type DBInstanceListResponse = []DBInstanceOut

// DBInstanceResponse Database Instance Response
type DBInstanceResponse = DBInstanceOut

// DBSchemaResponse Database Schema Response
type DBSchemaResponse = DBSchemaOut

// ErrorResponse Error Response
type ErrorResponse = Error

// DBInstanceFilterRequest DB Instance Filter Request
type DBInstanceFilterRequest = DBInstanceFilterIn

// V1GetProjDbSchemaParams defines parameters for V1GetProjDbSchema.
type V1GetProjDbSchemaParams struct {
	// HarnessAccount Identifier field of the account the resource is scoped to. This is required for Authorization methods other than the x-api-key header. If you are using the x-api-key header, this can be skipped.
	HarnessAccount *AccountHeader `json:"Harness-Account,omitempty"`
}

// V1GetProjDbSchemaInstanceParams defines parameters for V1GetProjDbSchemaInstance.
type V1GetProjDbSchemaInstanceParams struct {
	// HarnessAccount Identifier field of the account the resource is scoped to. This is required for Authorization methods other than the x-api-key header. If you are using the x-api-key header, this can be skipped.
	HarnessAccount *AccountHeader `json:"Harness-Account,omitempty"`
}

// V1ListProjDbSchemaInstanceParams defines parameters for V1ListProjDbSchemaInstance.
type V1ListProjDbSchemaInstanceParams struct {
	// Page Pagination page number strategy: Specify the page number within the paginated collection related to the number of items on each page.
	Page *PageIndex `form:"page,omitempty" json:"page,omitempty"`

	// Limit Pagination: Number of items to return.
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// SearchTerm This would be used to filter resources having attributes matching the search term.
	SearchTerm *SearchTerm `form:"search_term,omitempty" json:"search_term,omitempty"`

	// Sort Parameter on the basis of which sorting is done.
	Sort *V1ListProjDbSchemaInstanceParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Order on the basis of which sorting is done.
	Order *V1ListProjDbSchemaInstanceParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// HarnessAccount Identifier field of the account the resource is scoped to. This is required for Authorization methods other than the x-api-key header. If you are using the x-api-key header, this can be skipped.
	HarnessAccount *string `json:"Harness-Account,omitempty"`
}

// V1ListProjDbSchemaInstanceParamsSort defines parameters for V1ListProjDbSchemaInstance.
type V1ListProjDbSchemaInstanceParamsSort string

// V1ListProjDbSchemaInstanceParamsOrder defines parameters for V1ListProjDbSchemaInstance.
type V1ListProjDbSchemaInstanceParamsOrder string

// V1ListProjDbSchemaInstanceJSONRequestBody defines body for V1ListProjDbSchemaInstance for application/json ContentType.
type V1ListProjDbSchemaInstanceJSONRequestBody = DBInstanceFilterIn

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// V1GetProjDbSchema request
	V1GetProjDbSchema(ctx context.Context, org OrgParam, project ProjectParam, dbschema DBSchemaParam, params *V1GetProjDbSchemaParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V1GetProjDbSchemaInstance request
	V1GetProjDbSchemaInstance(ctx context.Context, org OrgParam, project ProjectParam, dbschema DBSchemaParam, dbinstance DBInstanceParam, params *V1GetProjDbSchemaInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V1ListProjDbSchemaInstanceWithBody request with any body
	V1ListProjDbSchemaInstanceWithBody(ctx context.Context, org string, project string, dbschema string, params *V1ListProjDbSchemaInstanceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	V1ListProjDbSchemaInstance(ctx context.Context, org string, project string, dbschema string, params *V1ListProjDbSchemaInstanceParams, body V1ListProjDbSchemaInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) V1GetProjDbSchema(ctx context.Context, org OrgParam, project ProjectParam, dbschema DBSchemaParam, params *V1GetProjDbSchemaParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1GetProjDbSchemaRequest(c.Server, org, project, dbschema, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1GetProjDbSchemaInstance(ctx context.Context, org OrgParam, project ProjectParam, dbschema DBSchemaParam, dbinstance DBInstanceParam, params *V1GetProjDbSchemaInstanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1GetProjDbSchemaInstanceRequest(c.Server, org, project, dbschema, dbinstance, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1ListProjDbSchemaInstanceWithBody(ctx context.Context, org string, project string, dbschema string, params *V1ListProjDbSchemaInstanceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1ListProjDbSchemaInstanceRequestWithBody(c.Server, org, project, dbschema, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1ListProjDbSchemaInstance(ctx context.Context, org string, project string, dbschema string, params *V1ListProjDbSchemaInstanceParams, body V1ListProjDbSchemaInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1ListProjDbSchemaInstanceRequest(c.Server, org, project, dbschema, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewV1GetProjDbSchemaRequest generates requests for V1GetProjDbSchema
func NewV1GetProjDbSchemaRequest(server string, org OrgParam, project ProjectParam, dbschema DBSchemaParam, params *V1GetProjDbSchemaParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "org", runtime.ParamLocationPath, org)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "dbschema", runtime.ParamLocationPath, dbschema)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/orgs/%s/projects/%s/dbschema/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.HarnessAccount != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Harness-Account", runtime.ParamLocationHeader, *params.HarnessAccount)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Harness-Account", headerParam0)
		}

	}

	return req, nil
}

// NewV1GetProjDbSchemaInstanceRequest generates requests for V1GetProjDbSchemaInstance
func NewV1GetProjDbSchemaInstanceRequest(server string, org OrgParam, project ProjectParam, dbschema DBSchemaParam, dbinstance DBInstanceParam, params *V1GetProjDbSchemaInstanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "org", runtime.ParamLocationPath, org)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "dbschema", runtime.ParamLocationPath, dbschema)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "dbinstance", runtime.ParamLocationPath, dbinstance)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/orgs/%s/projects/%s/dbschema/%s/instance/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.HarnessAccount != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Harness-Account", runtime.ParamLocationHeader, *params.HarnessAccount)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Harness-Account", headerParam0)
		}

	}

	return req, nil
}

// NewV1ListProjDbSchemaInstanceRequest calls the generic V1ListProjDbSchemaInstance builder with application/json body
func NewV1ListProjDbSchemaInstanceRequest(server string, org string, project string, dbschema string, params *V1ListProjDbSchemaInstanceParams, body V1ListProjDbSchemaInstanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewV1ListProjDbSchemaInstanceRequestWithBody(server, org, project, dbschema, params, "application/json", bodyReader)
}

// NewV1ListProjDbSchemaInstanceRequestWithBody generates requests for V1ListProjDbSchemaInstance with any type of body
func NewV1ListProjDbSchemaInstanceRequestWithBody(server string, org string, project string, dbschema string, params *V1ListProjDbSchemaInstanceParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "org", runtime.ParamLocationPath, org)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "dbschema", runtime.ParamLocationPath, dbschema)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/orgs/%s/projects/%s/dbschema/%s/instancelist", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchTerm != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_term", runtime.ParamLocationQuery, *params.SearchTerm); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.HarnessAccount != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Harness-Account", runtime.ParamLocationHeader, *params.HarnessAccount)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Harness-Account", headerParam0)
		}

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// V1GetProjDbSchemaWithResponse request
	V1GetProjDbSchemaWithResponse(ctx context.Context, org OrgParam, project ProjectParam, dbschema DBSchemaParam, params *V1GetProjDbSchemaParams, reqEditors ...RequestEditorFn) (*V1GetProjDbSchemaResponse, error)

	// V1GetProjDbSchemaInstanceWithResponse request
	V1GetProjDbSchemaInstanceWithResponse(ctx context.Context, org OrgParam, project ProjectParam, dbschema DBSchemaParam, dbinstance DBInstanceParam, params *V1GetProjDbSchemaInstanceParams, reqEditors ...RequestEditorFn) (*V1GetProjDbSchemaInstanceResponse, error)

	// V1ListProjDbSchemaInstanceWithBodyWithResponse request with any body
	V1ListProjDbSchemaInstanceWithBodyWithResponse(ctx context.Context, org string, project string, dbschema string, params *V1ListProjDbSchemaInstanceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V1ListProjDbSchemaInstanceResponse, error)

	V1ListProjDbSchemaInstanceWithResponse(ctx context.Context, org string, project string, dbschema string, params *V1ListProjDbSchemaInstanceParams, body V1ListProjDbSchemaInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*V1ListProjDbSchemaInstanceResponse, error)
}

type V1GetProjDbSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DBSchemaResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r V1GetProjDbSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1GetProjDbSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V1GetProjDbSchemaInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DBInstanceResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r V1GetProjDbSchemaInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1GetProjDbSchemaInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V1ListProjDbSchemaInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DBInstanceListResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r V1ListProjDbSchemaInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1ListProjDbSchemaInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// V1GetProjDbSchemaWithResponse request returning *V1GetProjDbSchemaResponse
func (c *ClientWithResponses) V1GetProjDbSchemaWithResponse(ctx context.Context, org OrgParam, project ProjectParam, dbschema DBSchemaParam, params *V1GetProjDbSchemaParams, reqEditors ...RequestEditorFn) (*V1GetProjDbSchemaResponse, error) {
	rsp, err := c.V1GetProjDbSchema(ctx, org, project, dbschema, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV1GetProjDbSchemaResponse(rsp)
}

// V1GetProjDbSchemaInstanceWithResponse request returning *V1GetProjDbSchemaInstanceResponse
func (c *ClientWithResponses) V1GetProjDbSchemaInstanceWithResponse(ctx context.Context, org OrgParam, project ProjectParam, dbschema DBSchemaParam, dbinstance DBInstanceParam, params *V1GetProjDbSchemaInstanceParams, reqEditors ...RequestEditorFn) (*V1GetProjDbSchemaInstanceResponse, error) {
	rsp, err := c.V1GetProjDbSchemaInstance(ctx, org, project, dbschema, dbinstance, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV1GetProjDbSchemaInstanceResponse(rsp)
}

// V1ListProjDbSchemaInstanceWithBodyWithResponse request with arbitrary body returning *V1ListProjDbSchemaInstanceResponse
func (c *ClientWithResponses) V1ListProjDbSchemaInstanceWithBodyWithResponse(ctx context.Context, org string, project string, dbschema string, params *V1ListProjDbSchemaInstanceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V1ListProjDbSchemaInstanceResponse, error) {
	rsp, err := c.V1ListProjDbSchemaInstanceWithBody(ctx, org, project, dbschema, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV1ListProjDbSchemaInstanceResponse(rsp)
}

func (c *ClientWithResponses) V1ListProjDbSchemaInstanceWithResponse(ctx context.Context, org string, project string, dbschema string, params *V1ListProjDbSchemaInstanceParams, body V1ListProjDbSchemaInstanceJSONRequestBody, reqEditors ...RequestEditorFn) (*V1ListProjDbSchemaInstanceResponse, error) {
	rsp, err := c.V1ListProjDbSchemaInstance(ctx, org, project, dbschema, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV1ListProjDbSchemaInstanceResponse(rsp)
}

// ParseV1GetProjDbSchemaResponse parses an HTTP response from a V1GetProjDbSchemaWithResponse call
func ParseV1GetProjDbSchemaResponse(rsp *http.Response) (*V1GetProjDbSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V1GetProjDbSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DBSchemaResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseV1GetProjDbSchemaInstanceResponse parses an HTTP response from a V1GetProjDbSchemaInstanceWithResponse call
func ParseV1GetProjDbSchemaInstanceResponse(rsp *http.Response) (*V1GetProjDbSchemaInstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V1GetProjDbSchemaInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DBInstanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseV1ListProjDbSchemaInstanceResponse parses an HTTP response from a V1ListProjDbSchemaInstanceWithResponse call
func ParseV1ListProjDbSchemaInstanceResponse(rsp *http.Response) (*V1ListProjDbSchemaInstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V1ListProjDbSchemaInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DBInstanceListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
