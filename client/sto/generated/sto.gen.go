// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	Jwt_header_AuthorizationScopes = "jwt_header_Authorization.Scopes"
)

// Defines values for AllIssueSummarySeverityCode.
const (
	Critical   AllIssueSummarySeverityCode = "Critical"
	High       AllIssueSummarySeverityCode = "High"
	Info       AllIssueSummarySeverityCode = "Info"
	Low        AllIssueSummarySeverityCode = "Low"
	Medium     AllIssueSummarySeverityCode = "Medium"
	Unassigned AllIssueSummarySeverityCode = "Unassigned"
)

// AllIssueSummary All issue summary
type AllIssueSummary struct {
	// ExemptionExpiration Unix timestamp at which this Exemption will expire
	ExemptionExpiration *int64 `json:"exemptionExpiration,omitempty"`

	// ExemptionId ID of Security Test Exemption
	ExemptionId *string `json:"exemptionId,omitempty"`

	// ExemptionStatus Status of project scoped exemption for this issue
	ExemptionStatus *string `json:"exemptionStatus,omitempty"`

	// Id Resource identifier
	Id string `json:"id"`

	// IssueType Issue Type
	IssueType *string `json:"issueType,omitempty"`

	// LastDetected Timestamp of the last detection of this issue
	LastDetected int64 `json:"lastDetected"`

	// NumOccurrences Number of occurrences of this issue against the latest baseline scan
	NumOccurrences float32 `json:"numOccurrences"`

	// NumTargetsImpacted Number of targets impacted where this issue was found against the latest baseline scan
	NumTargetsImpacted float32 `json:"numTargetsImpacted"`

	// Override Indicates the issue has been overridden
	Override *map[string]interface{} `json:"override,omitempty"`

	// SeverityCode Severity code
	SeverityCode AllIssueSummarySeverityCode `json:"severityCode"`

	// Title Title of the Security Issue
	Title string `json:"title"`
}

// AllIssueSummarySeverityCode Severity code
type AllIssueSummarySeverityCode string

// AllIssuesListResult defines model for AllIssuesListResult.
type AllIssuesListResult struct {
	// Issues Issues related to the latest scans of a baseline in a specific project
	Issues     []AllIssueSummary `json:"issues"`
	Pagination Pagination        `json:"pagination"`
}

// FrontendAllIssuesListResponseBody defines model for FrontendAllIssuesListResponseBody.
type FrontendAllIssuesListResponseBody = AllIssuesListResult

// NotFound defines model for NotFound.
type NotFound struct {
	Message string `json:"message"`
	Status  *int64 `json:"status,omitempty"`
}

// Pagination defines model for Pagination.
type Pagination struct {
	// Link Link-based paging
	Link *string `json:"link,omitempty"`

	// Page Page number (starting from 0)
	Page int64 `json:"page"`

	// PageSize Requested page size
	PageSize int64 `json:"pageSize"`

	// TotalItems Total results available
	TotalItems int64 `json:"totalItems"`

	// TotalPages Total pages available
	TotalPages int64 `json:"totalPages"`
}

// FrontendAllIssuesListParams defines parameters for FrontendAllIssuesList.
type FrontendAllIssuesListParams struct {
	// AccountId Harness Account ID
	AccountId string `form:"accountId" json:"accountId"`

	// OrgId Harness Organization ID
	OrgId string `form:"orgId" json:"orgId"`

	// ProjectId Harness Project ID
	ProjectId string `form:"projectId" json:"projectId"`

	// Page Page number to fetch (starting from 0)
	Page *int64 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results per page
	PageSize          *int64  `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	TargetIds         *string `form:"targetIds,omitempty" json:"targetIds,omitempty"`
	TargetTypes       *string `form:"targetTypes,omitempty" json:"targetTypes,omitempty"`
	PipelineIds       *string `form:"pipelineIds,omitempty" json:"pipelineIds,omitempty"`
	ScanTools         *string `form:"scanTools,omitempty" json:"scanTools,omitempty"`
	SeverityCodes     *string `form:"severityCodes,omitempty" json:"severityCodes,omitempty"`
	ExemptionStatuses *string `form:"exemptionStatuses,omitempty" json:"exemptionStatuses,omitempty"`
	Search            *string `form:"search,omitempty" json:"search,omitempty"`
	IssueTypes        *string `form:"issueTypes,omitempty" json:"issueTypes,omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// FrontendAllIssuesList request
	FrontendAllIssuesList(ctx context.Context, params *FrontendAllIssuesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) FrontendAllIssuesList(ctx context.Context, params *FrontendAllIssuesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFrontendAllIssuesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewFrontendAllIssuesListRequest generates requests for FrontendAllIssuesList
func NewFrontendAllIssuesListRequest(server string, params *FrontendAllIssuesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/frontend/all-issues/issues")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountId", runtime.ParamLocationQuery, params.AccountId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orgId", runtime.ParamLocationQuery, params.OrgId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectId", runtime.ParamLocationQuery, params.ProjectId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TargetIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "targetIds", runtime.ParamLocationQuery, *params.TargetIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TargetTypes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "targetTypes", runtime.ParamLocationQuery, *params.TargetTypes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PipelineIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pipelineIds", runtime.ParamLocationQuery, *params.PipelineIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScanTools != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scanTools", runtime.ParamLocationQuery, *params.ScanTools); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SeverityCodes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "severityCodes", runtime.ParamLocationQuery, *params.SeverityCodes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExemptionStatuses != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exemptionStatuses", runtime.ParamLocationQuery, *params.ExemptionStatuses); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IssueTypes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "issueTypes", runtime.ParamLocationQuery, *params.IssueTypes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// FrontendAllIssuesListWithResponse request
	FrontendAllIssuesListWithResponse(ctx context.Context, params *FrontendAllIssuesListParams, reqEditors ...RequestEditorFn) (*FrontendAllIssuesListResponse, error)
}

type FrontendAllIssuesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FrontendAllIssuesListResponseBody
	JSON400      *NotFound
	JSON401      *NotFound
	JSON403      *NotFound
	JSON404      *NotFound
	JSON429      *NotFound
	JSON500      *NotFound
}

// Status returns HTTPResponse.Status
func (r FrontendAllIssuesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FrontendAllIssuesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// FrontendAllIssuesListWithResponse request returning *FrontendAllIssuesListResponse
func (c *ClientWithResponses) FrontendAllIssuesListWithResponse(ctx context.Context, params *FrontendAllIssuesListParams, reqEditors ...RequestEditorFn) (*FrontendAllIssuesListResponse, error) {
	rsp, err := c.FrontendAllIssuesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFrontendAllIssuesListResponse(rsp)
}

// ParseFrontendAllIssuesListResponse parses an HTTP response from a FrontendAllIssuesListWithResponse call
func ParseFrontendAllIssuesListResponse(rsp *http.Response) (*FrontendAllIssuesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FrontendAllIssuesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FrontendAllIssuesListResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
