// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	X_api_keyScopes = "x_api_key.Scopes"
)

// Defines values for ActivityDetailsType.
const (
	ActivityDetailsTypeDeployment            ActivityDetailsType = "deployment"
	ActivityDetailsTypeEnforcement           ActivityDetailsType = "enforcement"
	ActivityDetailsTypeIntegrityVerification ActivityDetailsType = "integrity_verification"
	ActivityDetailsTypeOrchestration         ActivityDetailsType = "orchestration"
	ActivityDetailsTypeProvenance            ActivityDetailsType = "provenance"
	ActivityDetailsTypeSigning               ActivityDetailsType = "signing"
	ActivityDetailsTypeVerification          ActivityDetailsType = "verification"
	ActivityDetailsTypeVulnerability         ActivityDetailsType = "vulnerability"
)

// Defines values for ArtifactListingRequestBodyEnvironmentType.
const (
	All     ArtifactListingRequestBodyEnvironmentType = "All"
	NonProd ArtifactListingRequestBodyEnvironmentType = "NonProd"
	None    ArtifactListingRequestBodyEnvironmentType = "None"
	Prod    ArtifactListingRequestBodyEnvironmentType = "Prod"
)

// Defines values for ArtifactListingRequestBodyPolicyViolation.
const (
	ALLOW ArtifactListingRequestBodyPolicyViolation = "ALLOW"
	ANY   ArtifactListingRequestBodyPolicyViolation = "ANY"
	DENY  ArtifactListingRequestBodyPolicyViolation = "DENY"
	NONE  ArtifactListingRequestBodyPolicyViolation = "NONE"
)

// Defines values for ArtifactType.
const (
	ArtifactTypeCONTAINERIMAGE ArtifactType = "CONTAINER_IMAGE"
	ArtifactTypeHELM           ArtifactType = "HELM"
	ArtifactTypeJAR            ArtifactType = "JAR"
	ArtifactTypeMANIFEST       ArtifactType = "MANIFEST"
	ArtifactTypeUNKNOWN        ArtifactType = "UNKNOWN"
	ArtifactTypeWAR            ArtifactType = "WAR"
)

// Defines values for ArtifactTypeDataType.
const (
	CONTAINER    ArtifactTypeDataType = "CONTAINER"
	NONCONTAINER ArtifactTypeDataType = "NON_CONTAINER"
)

// Defines values for ArtifactVariantType.
const (
	Branch ArtifactVariantType = "branch"
	Commit ArtifactVariantType = "commit"
	GitTag ArtifactVariantType = "gitTag"
	Tag    ArtifactVariantType = "tag"
)

// Defines values for ComplianceCheckSeverity.
const (
	CRITICAL ComplianceCheckSeverity = "CRITICAL"
	HIGH     ComplianceCheckSeverity = "HIGH"
	LOW      ComplianceCheckSeverity = "LOW"
	MEDIUM   ComplianceCheckSeverity = "MEDIUM"
)

// Defines values for ComplianceResultStatus.
const (
	ComplianceResultStatusFAILED  ComplianceResultStatus = "FAILED"
	ComplianceResultStatusPASSED  ComplianceResultStatus = "PASSED"
	ComplianceResultStatusUNKNOWN ComplianceResultStatus = "UNKNOWN"
)

// Defines values for ComplianceStandardType.
const (
	CIS   ComplianceStandardType = "CIS"
	OWASP ComplianceStandardType = "OWASP"
)

// Defines values for ComponentFilterFieldName.
const (
	ComponentName    ComponentFilterFieldName = "ComponentName"
	ComponentVersion ComponentFilterFieldName = "ComponentVersion"
)

// Defines values for ExecutionContextV2Type.
const (
	Github  ExecutionContextV2Type = "github"
	Harness ExecutionContextV2Type = "harness"
)

// Defines values for PipelineDetailsStageType.
const (
	BUILD    PipelineDetailsStageType = "BUILD"
	DEPLOY   PipelineDetailsStageType = "DEPLOY"
	SECURITY PipelineDetailsStageType = "SECURITY"
)

// Defines values for PipelineDetailsStatus.
const (
	PipelineDetailsStatusFAILED  PipelineDetailsStatus = "FAILED"
	PipelineDetailsStatusPASSED  PipelineDetailsStatus = "PASSED"
	PipelineDetailsStatusUNKNOWN PipelineDetailsStatus = "UNKNOWN"
)

// Defines values for RepositoryPlatform.
const (
	AZURE     RepositoryPlatform = "AZURE"
	BITBUCKET RepositoryPlatform = "BITBUCKET"
	GIT       RepositoryPlatform = "GIT"
	GITHUB    RepositoryPlatform = "GITHUB"
	GITLAB    RepositoryPlatform = "GITLAB"
	HARNESS   RepositoryPlatform = "HARNESS"
)

// Defines values for StoIssueCountType.
const (
	Image      StoIssueCountType = "image"
	Repository StoIssueCountType = "repository"
)

// Defines values for VerificationStatus.
const (
	VerificationStatusFAILED VerificationStatus = "FAILED"
	VerificationStatusPASSED VerificationStatus = "PASSED"
)

// Defines values for Order.
const (
	OrderASC  Order = "ASC"
	OrderDESC Order = "DESC"
)

// Defines values for OrderDefaultDesc.
const (
	OrderDefaultDescASC  OrderDefaultDesc = "ASC"
	OrderDefaultDescDESC OrderDefaultDesc = "DESC"
)

// Defines values for ListArtifactSourcesParamsOrder.
const (
	ListArtifactSourcesParamsOrderASC  ListArtifactSourcesParamsOrder = "ASC"
	ListArtifactSourcesParamsOrderDESC ListArtifactSourcesParamsOrder = "DESC"
)

// Defines values for ArtifactListV2ParamsOrder.
const (
	ArtifactListV2ParamsOrderASC  ArtifactListV2ParamsOrder = "ASC"
	ArtifactListV2ParamsOrderDESC ArtifactListV2ParamsOrder = "DESC"
)

// Defines values for FetchComplianceResultsByArtifactParamsOrder.
const (
	FetchComplianceResultsByArtifactParamsOrderASC  FetchComplianceResultsByArtifactParamsOrder = "ASC"
	FetchComplianceResultsByArtifactParamsOrderDESC FetchComplianceResultsByArtifactParamsOrder = "DESC"
)

// Defines values for FetchComplianceResultsByArtifactParamsSort.
const (
	Severity FetchComplianceResultsByArtifactParamsSort = "severity"
	Title    FetchComplianceResultsByArtifactParamsSort = "title"
)

// Defines values for CodeRepositoriesListParamsOrder.
const (
	CodeRepositoriesListParamsOrderASC  CodeRepositoriesListParamsOrder = "ASC"
	CodeRepositoriesListParamsOrderDESC CodeRepositoriesListParamsOrder = "DESC"
)

// Defines values for CodeRepositoriesListParamsSort.
const (
	ComplianceResults CodeRepositoriesListParamsSort = "compliance_results"
	LastScan          CodeRepositoriesListParamsSort = "last_scan"
	Name              CodeRepositoriesListParamsSort = "name"
)

// ActivityDetails defines model for ActivityDetails.
type ActivityDetails struct {
	Type ActivityDetailsType `json:"type"`
}

// ActivityDetailsType defines model for ActivityDetails.Type.
type ActivityDetailsType string

// ArtifactChainOfCustodyV2 defines model for ArtifactChainOfCustodyV2.
type ArtifactChainOfCustodyV2 struct {
	Activity        *ActivityDetails   `json:"activity,omitempty"`
	ArtifactDetails *ArtifactV2Details `json:"artifact_details,omitempty"`
	CreatedAt       *int64             `json:"created_at,omitempty"`

	// ExecutionContext Details of the Execution Context
	ExecutionContext *ExecutionContextV2 `json:"execution_context,omitempty"`
}

// ArtifactListingRequestBody defines model for ArtifactListingRequestBody.
type ArtifactListingRequestBody struct {
	ArtifactType        *[]ArtifactType                            `json:"artifact_type,omitempty"`
	ComponentFilter     *[]ComponentFilter                         `json:"component_filter,omitempty"`
	ComponentFilterList *[]ComponentFilter                         `json:"component_filter_list,omitempty"`
	EnvironmentType     *ArtifactListingRequestBodyEnvironmentType `json:"environment_type,omitempty"`
	LicenseFilter       *LicenseFilter                             `json:"license_filter,omitempty"`
	LicenseFilterList   *[]LicenseFilter                           `json:"license_filter_list,omitempty"`
	PolicyViolation     *ArtifactListingRequestBodyPolicyViolation `json:"policy_violation,omitempty"`
	SearchTerm          *string                                    `json:"search_term,omitempty"`
	VerificationStatus  *VerificationStatus                        `json:"verification_status,omitempty"`
}

// ArtifactListingRequestBodyEnvironmentType defines model for ArtifactListingRequestBody.EnvironmentType.
type ArtifactListingRequestBodyEnvironmentType string

// ArtifactListingRequestBodyPolicyViolation defines model for ArtifactListingRequestBody.PolicyViolation.
type ArtifactListingRequestBodyPolicyViolation string

// ArtifactSourcesListingResponse1 defines model for ArtifactSourcesListingResponse.
type ArtifactSourcesListingResponse1 struct {
	ArtifactType *ArtifactTypeData `json:"artifact_type,omitempty"`

	// Count Count of artifacts with the given url and name.
	Count       *int         `json:"count,omitempty"`
	Deployments *Deployments `json:"deployments,omitempty"`

	// Name Artifact name
	Name *string `json:"name,omitempty"`

	// SourceId Identifier of the Artifact Source
	SourceId *string `json:"source_id,omitempty"`

	// StoIssueCount The count of Security Issues, by severity code, for a given Harness Pipeline Execution along with this execution info
	StoIssueCount *StoIssueCount `json:"sto_issue_count,omitempty"`

	// Url Artifact Registry url
	Url *string `json:"url,omitempty"`
}

// ArtifactType defines model for ArtifactType.
type ArtifactType string

// ArtifactTypeData defines model for ArtifactTypeData.
type ArtifactTypeData struct {
	SubType *ArtifactType         `json:"sub_type,omitempty"`
	Type    *ArtifactTypeDataType `json:"type,omitempty"`
}

// ArtifactTypeDataType defines model for ArtifactTypeData.Type.
type ArtifactTypeDataType string

// ArtifactV2Details defines model for ArtifactV2Details.
type ArtifactV2Details struct {
	Digest *string `json:"digest,omitempty"`
	Id     *string `json:"id,omitempty"`
	Name   *string `json:"name,omitempty"`
	Tag    *string `json:"tag,omitempty"`
	Type   *string `json:"type,omitempty"`
}

// ArtifactV2ListingResponse defines model for ArtifactV2ListingResponse.
type ArtifactV2ListingResponse struct {
	ArtifactType *ArtifactTypeData `json:"artifact_type,omitempty"`

	// ComponentsCount Number of components of the artifact
	ComponentsCount *int `json:"components_count,omitempty"`
	Deployment      *struct {
		// NonProdEnvCount Count of pre-production environment this artifact is currently deployed.
		NonProdEnvCount *int `json:"non_prod_env_count,omitempty"`

		// ProdEnvCount Count of production environment this artifact is currently deployed.
		ProdEnvCount *int `json:"prod_env_count,omitempty"`
	} `json:"deployment,omitempty"`

	// Digest Digest of the Artifact
	Digest *string `json:"digest,omitempty"`

	// Id Artifact ID
	Id       *string                 `json:"id,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Name Artifact Name
	Name          *string `json:"name,omitempty"`
	Orchestration *struct {
		// Id Orchestration step execution ID for the aritfact.
		Id *string `json:"id,omitempty"`

		// PipelineExecutionId Build pipeline execution Id used for orchestration of the artifact
		PipelineExecutionId *string `json:"pipeline_execution_id,omitempty"`

		// PipelineId Build pipeline Id used for orchestration of the artifact
		PipelineId *string `json:"pipeline_id,omitempty"`
	} `json:"orchestration,omitempty"`
	PolicyEnforcement *struct {
		// AllowListViolationCount Count of the allow list policy violations
		AllowListViolationCount *string `json:"allow_list_violation_count,omitempty"`

		// DenyListViolationCount Count of the deny list policy violations
		DenyListViolationCount *string `json:"deny_list_violation_count,omitempty"`

		// Id Enforcement Step Id for the artifact lastest enfrocement.
		Id *string `json:"id,omitempty"`
	} `json:"policy_enforcement,omitempty"`
	Scorecard *struct {
		// AvgScore Average score of the artifact SBOM
		AvgScore *string `json:"avg_score,omitempty"`

		// MaxScore Maximum score of the artifact SBOM
		MaxScore *string `json:"max_score,omitempty"`
	} `json:"scorecard,omitempty"`
	Signing *IntegrityVerification `json:"signing,omitempty"`

	// StoIssueCount The count of Security Issues, by severity code, for a given Harness Pipeline Execution along with this execution info
	StoIssueCount *StoIssueCount `json:"sto_issue_count,omitempty"`
	Tags          *[]string      `json:"tags,omitempty"`

	// Updated Last updated time of the artifact
	Updated *string `json:"updated,omitempty"`

	// Url Artifact Origin URL
	Url *string `json:"url,omitempty"`
}

// ArtifactV2Overview defines model for ArtifactV2Overview.
type ArtifactV2Overview struct {
	ArtifactType *ArtifactTypeData `json:"artifact_type,omitempty"`
	Deployments  *Deployments      `json:"deployments,omitempty"`

	// Digest digest of the artifact
	Digest *string `json:"digest,omitempty"`

	// Id Artifact Identifier
	Id       *string                 `json:"id,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Name Artifact Name
	Name            string                 `json:"name"`
	PipelineDetails *PipelineDetails       `json:"pipeline_details,omitempty"`
	SbomDetails     *SBOMInfo              `json:"sbom_details,omitempty"`
	Scorecard       *Scorecard             `json:"scorecard,omitempty"`
	Signing         *IntegrityVerification `json:"signing,omitempty"`
	SlsaDetails     *SLSADetails           `json:"slsa_details,omitempty"`
	SourceId        *string                `json:"source_id,omitempty"`

	// StoIssueCount The count of Security Issues, by severity code, for a given Harness Pipeline Execution along with this execution info
	StoIssueCount *StoIssueCount `json:"sto_issue_count,omitempty"`
	Tags          *[]string      `json:"tags,omitempty"`

	// Updated Last Updated time of artifact
	Updated *string `json:"updated,omitempty"`

	// Url Artifact URL
	Url        string      `json:"url"`
	Violations *Violations `json:"violations,omitempty"`
}

// ArtifactVariant defines model for ArtifactVariant.
type ArtifactVariant struct {
	// Type type of the variant of the artifact.
	Type *ArtifactVariantType `json:"type,omitempty"`

	// Value Value of the variant of the artifact.
	Value *string `json:"value,omitempty"`
}

// ArtifactVariantType type of the variant of the artifact.
type ArtifactVariantType string

// CodeRepositoryListingRequest defines model for CodeRepositoryListingRequest.
type CodeRepositoryListingRequest struct {
	DependencyFilter     *[]ComponentFilter `json:"dependency_filter,omitempty"`
	DependencyFilterList *[]ComponentFilter `json:"dependency_filter_list,omitempty"`
	LicenseFilter        *LicenseFilter     `json:"license_filter,omitempty"`
	LicenseFilterList    *[]LicenseFilter   `json:"license_filter_list,omitempty"`
	SearchTerm           *string            `json:"search_term,omitempty"`
}

// CodeRepositoryListingResponse defines model for CodeRepositoryListingResponse.
type CodeRepositoryListingResponse struct {
	// DependenciesCount Number of dependencies of the repository
	DependenciesCount *int `json:"dependencies_count,omitempty"`

	// Id Code Respository ID
	Id       *string          `json:"id,omitempty"`
	LastScan *PipelineDetails `json:"last_scan,omitempty"`

	// Name Code Repository Name
	Name               *string             `json:"name,omitempty"`
	OrchestrationId    *string             `json:"orchestration_id,omitempty"`
	RepositoryPlatform *RepositoryPlatform `json:"repository_platform,omitempty"`
	RiskAndCompliance  *RiskAndCompliance  `json:"risk_and_compliance,omitempty"`
	Scorecard          *Scorecard          `json:"scorecard,omitempty"`

	// StoIssueCount The count of Security Issues, by severity code, for a given Harness Pipeline Execution along with this execution info
	StoIssueCount *StoIssueCount `json:"sto_issue_count,omitempty"`

	// Url Code Repository URL
	Url     *string          `json:"url,omitempty"`
	Variant *ArtifactVariant `json:"variant,omitempty"`
}

// CodeRepositoryOverview defines model for CodeRepositoryOverview.
type CodeRepositoryOverview struct {
	ComplianceSummary  *ComplianceEvaluationSummary `json:"compliance_summary,omitempty"`
	DriftSummary       *DriftDetailsDTO             `json:"drift_summary,omitempty"`
	LastCommit         *string                      `json:"last_commit,omitempty"`
	LastEvaluation     *int64                       `json:"last_evaluation,omitempty"`
	Name               string                       `json:"name"`
	RepoIdentifier     string                       `json:"repo_identifier"`
	RepositoryPlatform *RepositoryPlatform          `json:"repository_platform,omitempty"`
	SbomDetails        *SBOMInfo                    `json:"sbom_details,omitempty"`
	Scorecard          *Scorecard                   `json:"scorecard,omitempty"`
	Url                string                       `json:"url"`
	Variant            *ArtifactVariant             `json:"variant,omitempty"`
	Violations         *Violations                  `json:"violations,omitempty"`

	// Vulnerabilities The count of Security Issues, by severity code, for a given Harness Pipeline Execution along with this execution info
	Vulnerabilities *StoIssueCount `json:"vulnerabilities,omitempty"`
}

// ComplianceCheckSeverity defines model for ComplianceCheckSeverity.
type ComplianceCheckSeverity string

// ComplianceEvaluationHistory defines model for ComplianceEvaluationHistory.
type ComplianceEvaluationHistory struct {
	CreatedAt           *int64                     `json:"created_at,omitempty"`
	Description         *string                    `json:"description,omitempty"`
	Occurrences         *[]ComplianceOccurrenceDTO `json:"occurrences,omitempty"`
	PipelineExecutionId *string                    `json:"pipeline_execution_id,omitempty"`
	PipelineId          *string                    `json:"pipeline_id,omitempty"`
	Reason              *string                    `json:"reason,omitempty"`
	Remediation         *string                    `json:"remediation,omitempty"`
	StageExecutionId    *string                    `json:"stage_execution_id,omitempty"`
	Status              *ComplianceResultStatus    `json:"status,omitempty"`
	StepExecutionId     *string                    `json:"step_execution_id,omitempty"`
}

// ComplianceEvaluationSummary defines model for ComplianceEvaluationSummary.
type ComplianceEvaluationSummary struct {
	CriticialFailures *int   `json:"criticial_failures,omitempty"`
	EvaluationTime    *int64 `json:"evaluation_time,omitempty"`
	Failed            *int   `json:"failed,omitempty"`
	HighFailures      *int   `json:"high_failures,omitempty"`
	LowFailures       *int   `json:"low_failures,omitempty"`
	MediumFailures    *int   `json:"medium_failures,omitempty"`
	Passed            *int   `json:"passed,omitempty"`
}

// ComplianceOccurrenceDTO defines model for ComplianceOccurrenceDTO.
type ComplianceOccurrenceDTO struct {
	// LineNumber Line number of snippet.
	LineNumber *int `json:"line_number,omitempty"`

	// Snippet Depicts occurrence snippet.
	Snippet *string `json:"snippet,omitempty"`

	// SnippetUrl URL to go to snippet
	SnippetUrl *string `json:"snippet_url,omitempty"`
}

// ComplianceResultByArtifactFilter defines model for ComplianceResultByArtifactFilter.
type ComplianceResultByArtifactFilter struct {
	ComplianceId *string                   `json:"compliance_id,omitempty"`
	SearchTerm   *string                   `json:"search_term,omitempty"`
	Severity     *ComplianceCheckSeverity  `json:"severity,omitempty"`
	Standards    *[]ComplianceStandardType `json:"standards,omitempty"`
	Status       *[]ComplianceResultStatus `json:"status,omitempty"`
}

// ComplianceResultStatus defines model for ComplianceResultStatus.
type ComplianceResultStatus string

// ComplianceStandardType defines model for ComplianceStandardType.
type ComplianceStandardType string

// ComponentFilter defines model for ComponentFilter.
type ComponentFilter struct {
	FieldName ComponentFilterFieldName `json:"field_name"`
	Operator  Operator                 `json:"operator"`
	Value     string                   `json:"value"`
}

// ComponentFilterFieldName defines model for ComponentFilter.FieldName.
type ComponentFilterFieldName string

// Deployments defines model for Deployments.
type Deployments struct {
	EnvIdentifier   *string          `json:"env_identifier,omitempty"`
	EnvName         *string          `json:"env_name,omitempty"`
	EnvType         *interface{}     `json:"env_type,omitempty"`
	NonProdEnvCount *int             `json:"non_prod_env_count,omitempty"`
	PipelineDetails *PipelineDetails `json:"pipeline_details,omitempty"`
	ProdEnvCount    *int             `json:"prod_env_count,omitempty"`
}

// DriftDetailsDTO defines model for DriftDetailsDTO.
type DriftDetailsDTO struct {
	DriftSummary      *OrchestrationDriftSummary `json:"drift_summary,omitempty"`
	OrgIdentifier     string                     `json:"org_identifier"`
	ProjectIdentifier string                     `json:"project_identifier"`
}

// ExecutionContextV2 Details of the Execution Context
type ExecutionContextV2 struct {
	Type ExecutionContextV2Type `json:"type"`
}

// ExecutionContextV2Type defines model for ExecutionContextV2.Type.
type ExecutionContextV2Type string

// FetchComplianceResultByArtifactResponseBody defines model for FetchComplianceResultByArtifactResponseBody.
type FetchComplianceResultByArtifactResponseBody struct {
	ComplianceId        *string                        `json:"compliance_id,omitempty"`
	Description         *string                        `json:"description,omitempty"`
	EvaluationHistory   *[]ComplianceEvaluationHistory `json:"evaluation_history,omitempty"`
	EvaluationTime      *int64                         `json:"evaluation_time,omitempty"`
	Occurrences         *[]ComplianceOccurrenceDTO     `json:"occurrences,omitempty"`
	PipelineExecutionId *string                        `json:"pipelineExecutionId,omitempty"`
	Reason              *string                        `json:"reason,omitempty"`
	Remediation         *string                        `json:"remediation,omitempty"`
	Severity            *ComplianceCheckSeverity       `json:"severity,omitempty"`
	Standards           *[]ComplianceStandardType      `json:"standards,omitempty"`
	Status              *ComplianceResultStatus        `json:"status,omitempty"`
	Tags                *[]string                      `json:"tags,omitempty"`
	Title               *string                        `json:"title,omitempty"`
}

// IntegrityVerification defines model for IntegrityVerification.
type IntegrityVerification struct {
	ErrorMessage        *string             `json:"error_message,omitempty"`
	OrgId               *string             `json:"org_id,omitempty"`
	PipelineExecutionId *string             `json:"pipeline_execution_id,omitempty"`
	PipelineId          *string             `json:"pipeline_id,omitempty"`
	ProjectId           *string             `json:"project_id,omitempty"`
	Rekor               *RekorLog           `json:"rekor,omitempty"`
	Status              *VerificationStatus `json:"status,omitempty"`
	Version             *string             `json:"version,omitempty"`
}

// LicenseFilter defines model for LicenseFilter.
type LicenseFilter struct {
	Operator Operator `json:"operator"`
	Value    string   `json:"value"`
}

// Operator defines model for Operator.
type Operator = interface{}

// OrchestrationDriftSummary defines model for OrchestrationDriftSummary.
type OrchestrationDriftSummary struct {
	Base               *string `json:"base,omitempty"`
	BaseTag            *string `json:"base_tag,omitempty"`
	ComponentDrifts    *int    `json:"component_drifts,omitempty"`
	ComponentsAdded    *int    `json:"components_added,omitempty"`
	ComponentsDeleted  *int    `json:"components_deleted,omitempty"`
	ComponentsModified *int    `json:"components_modified,omitempty"`
	DriftId            *string `json:"drift_id,omitempty"`
	LicenseAdded       *int    `json:"license_added,omitempty"`
	LicenseDeleted     *int    `json:"license_deleted,omitempty"`
	LicenseDrifts      *int    `json:"license_drifts,omitempty"`
	TotalDrifts        *int    `json:"total_drifts,omitempty"`
}

// PipelineDetails defines model for PipelineDetails.
type PipelineDetails struct {
	// ExecutionId Execution Id of the pipeline.
	ExecutionId *string `json:"execution_id,omitempty"`

	// Id Id of the pipeline.
	Id *string `json:"id,omitempty"`

	// Name Name of the pipeline.
	Name *string `json:"name,omitempty"`

	// OrgId Organisation where pipeline is present.
	OrgId *string `json:"org_id,omitempty"`

	// ProjectId Project where pipeline is present.
	ProjectId *string `json:"project_id,omitempty"`

	// StageExecutionId Execution Id for the Stage
	StageExecutionId *string `json:"stage_execution_id,omitempty"`

	// StageType Stage type in which the step executed
	StageType *PipelineDetailsStageType `json:"stage_type,omitempty"`
	Status    *PipelineDetailsStatus    `json:"status,omitempty"`

	// StepExecutionId Execution Id for the step
	StepExecutionId *string `json:"step_execution_id,omitempty"`

	// TriggeredAt Time of trigger of the deployment pipeline
	TriggeredAt *int64 `json:"triggered_at"`

	// TriggeredBy Name of who trigger the deployment pipeline
	TriggeredBy *string `json:"triggered_by,omitempty"`

	// TriggeredById Id of who trigger the deployment pipeline
	TriggeredById *string `json:"triggered_by_id,omitempty"`

	// TriggeredType Trigger type of the deployment pipeline
	TriggeredType *string `json:"triggered_type,omitempty"`
}

// PipelineDetailsStageType Stage type in which the step executed
type PipelineDetailsStageType string

// PipelineDetailsStatus defines model for PipelineDetails.Status.
type PipelineDetailsStatus string

// RekorLog defines model for RekorLog.
type RekorLog struct {
	EntryUuid *string `json:"entry_uuid,omitempty"`
	Hash      *string `json:"hash,omitempty"`
	Signature *string `json:"signature,omitempty"`
	SignedAt  *string `json:"signed_at,omitempty"`
	SignedBy  *string `json:"signed_by,omitempty"`
	TLogIndex *string `json:"t_log_index,omitempty"`
}

// RepositoriesSummary defines model for RepositoriesSummary.
type RepositoriesSummary struct {
	EvaluationSummary *ComplianceEvaluationSummary `json:"evaluation_summary,omitempty"`
	Total             *int                         `json:"total,omitempty"`

	// Vulnerabilities The count of Security Issues, by severity code, for a given Harness Pipeline Execution along with this execution info
	Vulnerabilities *StoIssueCount `json:"vulnerabilities,omitempty"`
}

// RepositoryPlatform defines model for RepositoryPlatform.
type RepositoryPlatform string

// RiskAndCompliance defines model for RiskAndCompliance.
type RiskAndCompliance struct {
	// Critical The number of Critical-severity compliance Issues
	Critical *int `json:"critical,omitempty"`

	// High The number of High-severity compliance Issues
	High *int `json:"high,omitempty"`

	// LastScanned Timestamp at which the Respository was last scanned
	LastScanned *string `json:"last_scanned,omitempty"`

	// Low The number of Low-severity compliance Issues
	Low *int `json:"low,omitempty"`

	// Medium The number of Medium-severity compliance Issues
	Medium          *int             `json:"medium,omitempty"`
	PipelineDetails *PipelineDetails `json:"pipeline_details,omitempty"`
}

// SBOMInfo defines model for SBOMInfo.
type SBOMInfo struct {
	ComponentsCount *int             `json:"components_count,omitempty"`
	DriftId         *string          `json:"drift_id,omitempty"`
	OrchestrationId *string          `json:"orchestration_id,omitempty"`
	OrgId           *string          `json:"org_id,omitempty"`
	PipelineDetails *PipelineDetails `json:"pipeline_details,omitempty"`
	ProjectId       *string          `json:"project_id,omitempty"`
	TotalDrifts     *int             `json:"total_drifts,omitempty"`
}

// SLSADetails defines model for SLSADetails.
type SLSADetails struct {
	OrgId           *string          `json:"org_id,omitempty"`
	PipelineDetails *PipelineDetails `json:"pipeline_details,omitempty"`
	ProjectId       *string          `json:"project_id,omitempty"`
	ProvenanceId    *string          `json:"provenance_id,omitempty"`
	Status          *string          `json:"status,omitempty"`
}

// Scorecard defines model for Scorecard.
type Scorecard struct {
	AvgScore *string `json:"avg_score,omitempty"`
	MaxScore *string `json:"max_score,omitempty"`
}

// StoIssueCount The count of Security Issues, by severity code, for a given Harness Pipeline Execution along with this execution info
type StoIssueCount struct {
	// Critical The number of Critical-severity Issues
	Critical *int `json:"critical,omitempty"`

	// ExecutionId Harness Execution ID
	ExecutionId *string `json:"execution_id,omitempty"`

	// High The number of High-severity Issues
	High *int `json:"high,omitempty"`

	// Ignored The number of Issues ignored due to Exemptions, and therefore not included in other counts
	Ignored *int `json:"ignored,omitempty"`

	// Info The number of Informational Issues
	Info *int `json:"info,omitempty"`

	// LastScanned Timestamp at which the target variant was last scanned
	LastScanned *string `json:"last_scanned,omitempty"`

	// Low The number of Low-severity Issues
	Low *int `json:"low,omitempty"`

	// Medium The number of Medium-severity Issues
	Medium          *int             `json:"medium,omitempty"`
	PipelineDetails *PipelineDetails `json:"pipeline_details,omitempty"`

	// PipelineId Harness Pipeline Id
	PipelineId *string `json:"pipeline_id,omitempty"`

	// TargetId Associated Target ID
	TargetId *string `json:"target_id,omitempty"`

	// TargetName Name of the Scan Target
	TargetName *string `json:"target_name,omitempty"`

	// TargetVariantId Associated Target Variant ID
	TargetVariantId *string `json:"target_variant_id,omitempty"`

	// TargetVariantName Name of the Scan Target
	TargetVariantName *string `json:"target_variant_name,omitempty"`

	// Tool The name of the tool that performed the scan
	Tool *string `json:"tool,omitempty"`

	// Total The number of total-severity Issues
	Total *int `json:"total,omitempty"`

	// Type Scan Target's type
	Type *StoIssueCountType `json:"type,omitempty"`
}

// StoIssueCountType Scan Target's type
type StoIssueCountType string

// VerificationStatus defines model for VerificationStatus.
type VerificationStatus string

// Violations defines model for Violations.
type Violations struct {
	AllowListViolations *int             `json:"allow_list_violations,omitempty"`
	DenyListViolations  *int             `json:"deny_list_violations,omitempty"`
	EnforcementId       *string          `json:"enforcement_id,omitempty"`
	PipelineDetails     *PipelineDetails `json:"pipeline_details,omitempty"`
}

// AccountHeader defines model for AccountHeader.
type AccountHeader = string

// Artifact defines model for Artifact.
type Artifact = string

// Limit defines model for Limit.
type Limit = int

// OrchestrationId defines model for OrchestrationId.
type OrchestrationId = string

// Order defines model for Order.
type Order string

// OrderDefaultDesc defines model for OrderDefaultDesc.
type OrderDefaultDesc string

// OrgParam defines model for OrgParam.
type OrgParam = string

// Page defines model for Page.
type Page = int

// ProjectParam defines model for ProjectParam.
type ProjectParam = string

// ProvenanceId defines model for ProvenanceId.
type ProvenanceId = string

// SignatureId defines model for SignatureId.
type SignatureId = string

// ArtifactSourcesListingResponse defines model for ArtifactSourcesListingResponse.
type ArtifactSourcesListingResponse = []ArtifactSourcesListingResponse1

// ArtifactV2ListingResponseBody defines model for ArtifactV2ListingResponseBody.
type ArtifactV2ListingResponseBody = []ArtifactV2ListingResponse

// CodeRepositoryListingResponseBody defines model for CodeRepositoryListingResponseBody.
type CodeRepositoryListingResponseBody = []CodeRepositoryListingResponse

// CodeRepositoryOverviewResponseBody defines model for CodeRepositoryOverviewResponseBody.
type CodeRepositoryOverviewResponseBody = CodeRepositoryOverview

// FetchComplianceResultByArtifactResponse defines model for FetchComplianceResultByArtifactResponse.
type FetchComplianceResultByArtifactResponse = []FetchComplianceResultByArtifactResponseBody

// CodeRepositoryListingRequestBody defines model for CodeRepositoryListingRequestBody.
type CodeRepositoryListingRequestBody = CodeRepositoryListingRequest

// FetchComplianceResultByArtifactRequestBody defines model for FetchComplianceResultByArtifactRequestBody.
type FetchComplianceResultByArtifactRequestBody = ComplianceResultByArtifactFilter

// ListArtifactSourcesParams defines parameters for ListArtifactSources.
type ListArtifactSourcesParams struct {
	// Limit Number of items to return per page.
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Order on the basis of which sorting is done.
	Order *ListArtifactSourcesParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Page Pagination page number strategy: Specify the page number within the paginated collection related to the number of items in each page
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// Sort Parameter on the basis of which sorting is done.
	Sort *interface{} `form:"sort,omitempty" json:"sort,omitempty"`

	// HarnessAccount Identifier field of the account the resource is scoped to. This is required for Authorization methods other than the x-api-key header. If you are using the x-api-key header, this can be skipped.
	HarnessAccount AccountHeader `json:"Harness-Account"`
}

// ListArtifactSourcesParamsOrder defines parameters for ListArtifactSources.
type ListArtifactSourcesParamsOrder string

// ArtifactListV2Params defines parameters for ArtifactListV2.
type ArtifactListV2Params struct {
	// Limit Number of items to return per page.
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// Page Pagination page number strategy: Specify the page number within the paginated collection related to the number of items in each page
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// Sort Parameter on the basis of which sorting is done.
	Sort *interface{} `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Order on the basis of which sorting is done.
	Order *ArtifactListV2ParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// HarnessAccount Identifier field of the account the resource is scoped to. This is required for Authorization methods other than the x-api-key header. If you are using the x-api-key header, this can be skipped.
	HarnessAccount AccountHeader `json:"Harness-Account"`
}

// ArtifactListV2ParamsOrder defines parameters for ArtifactListV2.
type ArtifactListV2ParamsOrder string

// GetArtifactV2OverviewParams defines parameters for GetArtifactV2Overview.
type GetArtifactV2OverviewParams struct {
	// HarnessAccount Identifier field of the account the resource is scoped to. This is required for Authorization methods other than the x-api-key header. If you are using the x-api-key header, this can be skipped.
	HarnessAccount AccountHeader `json:"Harness-Account"`
}

// FetchComplianceResultsByArtifactParams defines parameters for FetchComplianceResultsByArtifact.
type FetchComplianceResultsByArtifactParams struct {
	// Page Pagination page number strategy: Specify the page number within the paginated collection related to the number of items in each page
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items to return per page.
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Order on the basis of which sorting is done.
	Order *FetchComplianceResultsByArtifactParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Sort Parameter on the basis of which sorting is done.
	Sort *FetchComplianceResultsByArtifactParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// HarnessAccount Identifier field of the account the resource is scoped to. This is required for Authorization methods other than the x-api-key header. If you are using the x-api-key header, this can be skipped.
	HarnessAccount AccountHeader `json:"Harness-Account"`
}

// FetchComplianceResultsByArtifactParamsOrder defines parameters for FetchComplianceResultsByArtifact.
type FetchComplianceResultsByArtifactParamsOrder string

// FetchComplianceResultsByArtifactParamsSort defines parameters for FetchComplianceResultsByArtifact.
type FetchComplianceResultsByArtifactParamsSort string

// CodeRepositoriesListParams defines parameters for CodeRepositoriesList.
type CodeRepositoriesListParams struct {
	// Limit Number of items to return per page.
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// Order Order on the basis of which sorting is done.
	Order *CodeRepositoriesListParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// Page Pagination page number strategy: Specify the page number within the paginated collection related to the number of items in each page
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// Sort Parameter on the basis of which sorting is done.
	Sort *CodeRepositoriesListParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// HarnessAccount Identifier field of the account the resource is scoped to. This is required for Authorization methods other than the x-api-key header. If you are using the x-api-key header, this can be skipped.
	HarnessAccount AccountHeader `json:"Harness-Account"`
}

// CodeRepositoriesListParamsOrder defines parameters for CodeRepositoriesList.
type CodeRepositoriesListParamsOrder string

// CodeRepositoriesListParamsSort defines parameters for CodeRepositoriesList.
type CodeRepositoriesListParamsSort string

// GetAllRepositoriesSummaryParams defines parameters for GetAllRepositoriesSummary.
type GetAllRepositoriesSummaryParams struct {
	// HarnessAccount Identifier field of the account the resource is scoped to. This is required for Authorization methods other than the x-api-key header. If you are using the x-api-key header, this can be skipped.
	HarnessAccount AccountHeader `json:"Harness-Account"`
}

// GetCodeRepositoryOverviewParams defines parameters for GetCodeRepositoryOverview.
type GetCodeRepositoryOverviewParams struct {
	// HarnessAccount Identifier field of the account the resource is scoped to. This is required for Authorization methods other than the x-api-key header. If you are using the x-api-key header, this can be skipped.
	HarnessAccount AccountHeader `json:"Harness-Account"`
}

// GetArtifactChainOfCustodyV2Params defines parameters for GetArtifactChainOfCustodyV2.
type GetArtifactChainOfCustodyV2Params struct {
	// HarnessAccount Identifier field of the account the resource is scoped to. This is required for Authorization methods other than the x-api-key header. If you are using the x-api-key header, this can be skipped.
	HarnessAccount AccountHeader `json:"Harness-Account"`
}

// ListArtifactSourcesJSONRequestBody defines body for ListArtifactSources for application/json ContentType.
type ListArtifactSourcesJSONRequestBody = ArtifactListingRequestBody

// ArtifactListV2JSONRequestBody defines body for ArtifactListV2 for application/json ContentType.
type ArtifactListV2JSONRequestBody = ArtifactListingRequestBody

// FetchComplianceResultsByArtifactJSONRequestBody defines body for FetchComplianceResultsByArtifact for application/json ContentType.
type FetchComplianceResultsByArtifactJSONRequestBody = ComplianceResultByArtifactFilter

// CodeRepositoriesListJSONRequestBody defines body for CodeRepositoriesList for application/json ContentType.
type CodeRepositoriesListJSONRequestBody = CodeRepositoryListingRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListArtifactSourcesWithBody request with any body
	ListArtifactSourcesWithBody(ctx context.Context, org OrgParam, project ProjectParam, params *ListArtifactSourcesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ListArtifactSources(ctx context.Context, org OrgParam, project ProjectParam, params *ListArtifactSourcesParams, body ListArtifactSourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArtifactListV2WithBody request with any body
	ArtifactListV2WithBody(ctx context.Context, org OrgParam, project ProjectParam, source string, params *ArtifactListV2Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ArtifactListV2(ctx context.Context, org OrgParam, project ProjectParam, source string, params *ArtifactListV2Params, body ArtifactListV2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtifactV2Overview request
	GetArtifactV2Overview(ctx context.Context, org OrgParam, project ProjectParam, source string, artifact Artifact, params *GetArtifactV2OverviewParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchComplianceResultsByArtifactWithBody request with any body
	FetchComplianceResultsByArtifactWithBody(ctx context.Context, org OrgParam, project ProjectParam, artifact Artifact, params *FetchComplianceResultsByArtifactParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FetchComplianceResultsByArtifact(ctx context.Context, org OrgParam, project ProjectParam, artifact Artifact, params *FetchComplianceResultsByArtifactParams, body FetchComplianceResultsByArtifactJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CodeRepositoriesListWithBody request with any body
	CodeRepositoriesListWithBody(ctx context.Context, org OrgParam, project ProjectParam, params *CodeRepositoriesListParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CodeRepositoriesList(ctx context.Context, org OrgParam, project ProjectParam, params *CodeRepositoriesListParams, body CodeRepositoriesListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllRepositoriesSummary request
	GetAllRepositoriesSummary(ctx context.Context, org OrgParam, project ProjectParam, params *GetAllRepositoriesSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCodeRepositoryOverview request
	GetCodeRepositoryOverview(ctx context.Context, org OrgParam, project ProjectParam, codeRepo string, params *GetCodeRepositoryOverviewParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtifactChainOfCustodyV2 request
	GetArtifactChainOfCustodyV2(ctx context.Context, org OrgParam, project ProjectParam, artifact Artifact, params *GetArtifactChainOfCustodyV2Params, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListArtifactSourcesWithBody(ctx context.Context, org OrgParam, project ProjectParam, params *ListArtifactSourcesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListArtifactSourcesRequestWithBody(c.Server, org, project, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListArtifactSources(ctx context.Context, org OrgParam, project ProjectParam, params *ListArtifactSourcesParams, body ListArtifactSourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListArtifactSourcesRequest(c.Server, org, project, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArtifactListV2WithBody(ctx context.Context, org OrgParam, project ProjectParam, source string, params *ArtifactListV2Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArtifactListV2RequestWithBody(c.Server, org, project, source, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArtifactListV2(ctx context.Context, org OrgParam, project ProjectParam, source string, params *ArtifactListV2Params, body ArtifactListV2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArtifactListV2Request(c.Server, org, project, source, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtifactV2Overview(ctx context.Context, org OrgParam, project ProjectParam, source string, artifact Artifact, params *GetArtifactV2OverviewParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtifactV2OverviewRequest(c.Server, org, project, source, artifact, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchComplianceResultsByArtifactWithBody(ctx context.Context, org OrgParam, project ProjectParam, artifact Artifact, params *FetchComplianceResultsByArtifactParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchComplianceResultsByArtifactRequestWithBody(c.Server, org, project, artifact, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchComplianceResultsByArtifact(ctx context.Context, org OrgParam, project ProjectParam, artifact Artifact, params *FetchComplianceResultsByArtifactParams, body FetchComplianceResultsByArtifactJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchComplianceResultsByArtifactRequest(c.Server, org, project, artifact, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CodeRepositoriesListWithBody(ctx context.Context, org OrgParam, project ProjectParam, params *CodeRepositoriesListParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCodeRepositoriesListRequestWithBody(c.Server, org, project, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CodeRepositoriesList(ctx context.Context, org OrgParam, project ProjectParam, params *CodeRepositoriesListParams, body CodeRepositoriesListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCodeRepositoriesListRequest(c.Server, org, project, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllRepositoriesSummary(ctx context.Context, org OrgParam, project ProjectParam, params *GetAllRepositoriesSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllRepositoriesSummaryRequest(c.Server, org, project, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCodeRepositoryOverview(ctx context.Context, org OrgParam, project ProjectParam, codeRepo string, params *GetCodeRepositoryOverviewParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCodeRepositoryOverviewRequest(c.Server, org, project, codeRepo, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtifactChainOfCustodyV2(ctx context.Context, org OrgParam, project ProjectParam, artifact Artifact, params *GetArtifactChainOfCustodyV2Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtifactChainOfCustodyV2Request(c.Server, org, project, artifact, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListArtifactSourcesRequest calls the generic ListArtifactSources builder with application/json body
func NewListArtifactSourcesRequest(server string, org OrgParam, project ProjectParam, params *ListArtifactSourcesParams, body ListArtifactSourcesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewListArtifactSourcesRequestWithBody(server, org, project, params, "application/json", bodyReader)
}

// NewListArtifactSourcesRequestWithBody generates requests for ListArtifactSources with any type of body
func NewListArtifactSourcesRequestWithBody(server string, org OrgParam, project ProjectParam, params *ListArtifactSourcesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "org", runtime.ParamLocationPath, org)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/orgs/%s/projects/%s/artifact-sources", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Harness-Account", runtime.ParamLocationHeader, params.HarnessAccount)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Harness-Account", headerParam0)

	}

	return req, nil
}

// NewArtifactListV2Request calls the generic ArtifactListV2 builder with application/json body
func NewArtifactListV2Request(server string, org OrgParam, project ProjectParam, source string, params *ArtifactListV2Params, body ArtifactListV2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewArtifactListV2RequestWithBody(server, org, project, source, params, "application/json", bodyReader)
}

// NewArtifactListV2RequestWithBody generates requests for ArtifactListV2 with any type of body
func NewArtifactListV2RequestWithBody(server string, org OrgParam, project ProjectParam, source string, params *ArtifactListV2Params, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "org", runtime.ParamLocationPath, org)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "source", runtime.ParamLocationPath, source)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/orgs/%s/projects/%s/artifact-sources/%s/artifacts", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Harness-Account", runtime.ParamLocationHeader, params.HarnessAccount)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Harness-Account", headerParam0)

	}

	return req, nil
}

// NewGetArtifactV2OverviewRequest generates requests for GetArtifactV2Overview
func NewGetArtifactV2OverviewRequest(server string, org OrgParam, project ProjectParam, source string, artifact Artifact, params *GetArtifactV2OverviewParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "org", runtime.ParamLocationPath, org)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "source", runtime.ParamLocationPath, source)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "artifact", runtime.ParamLocationPath, artifact)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/orgs/%s/projects/%s/artifact-sources/%s/artifacts/%s/overview", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Harness-Account", runtime.ParamLocationHeader, params.HarnessAccount)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Harness-Account", headerParam0)

	}

	return req, nil
}

// NewFetchComplianceResultsByArtifactRequest calls the generic FetchComplianceResultsByArtifact builder with application/json body
func NewFetchComplianceResultsByArtifactRequest(server string, org OrgParam, project ProjectParam, artifact Artifact, params *FetchComplianceResultsByArtifactParams, body FetchComplianceResultsByArtifactJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFetchComplianceResultsByArtifactRequestWithBody(server, org, project, artifact, params, "application/json", bodyReader)
}

// NewFetchComplianceResultsByArtifactRequestWithBody generates requests for FetchComplianceResultsByArtifact with any type of body
func NewFetchComplianceResultsByArtifactRequestWithBody(server string, org OrgParam, project ProjectParam, artifact Artifact, params *FetchComplianceResultsByArtifactParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "org", runtime.ParamLocationPath, org)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "artifact", runtime.ParamLocationPath, artifact)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/orgs/%s/projects/%s/artifact/%s/compliance-results/list", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Harness-Account", runtime.ParamLocationHeader, params.HarnessAccount)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Harness-Account", headerParam0)

	}

	return req, nil
}

// NewCodeRepositoriesListRequest calls the generic CodeRepositoriesList builder with application/json body
func NewCodeRepositoriesListRequest(server string, org OrgParam, project ProjectParam, params *CodeRepositoriesListParams, body CodeRepositoriesListJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCodeRepositoriesListRequestWithBody(server, org, project, params, "application/json", bodyReader)
}

// NewCodeRepositoriesListRequestWithBody generates requests for CodeRepositoriesList with any type of body
func NewCodeRepositoriesListRequestWithBody(server string, org OrgParam, project ProjectParam, params *CodeRepositoriesListParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "org", runtime.ParamLocationPath, org)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/orgs/%s/projects/%s/code-repos/list", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Harness-Account", runtime.ParamLocationHeader, params.HarnessAccount)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Harness-Account", headerParam0)

	}

	return req, nil
}

// NewGetAllRepositoriesSummaryRequest generates requests for GetAllRepositoriesSummary
func NewGetAllRepositoriesSummaryRequest(server string, org OrgParam, project ProjectParam, params *GetAllRepositoriesSummaryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "org", runtime.ParamLocationPath, org)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/orgs/%s/projects/%s/code-repos/summary", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Harness-Account", runtime.ParamLocationHeader, params.HarnessAccount)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Harness-Account", headerParam0)

	}

	return req, nil
}

// NewGetCodeRepositoryOverviewRequest generates requests for GetCodeRepositoryOverview
func NewGetCodeRepositoryOverviewRequest(server string, org OrgParam, project ProjectParam, codeRepo string, params *GetCodeRepositoryOverviewParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "org", runtime.ParamLocationPath, org)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "code-repo", runtime.ParamLocationPath, codeRepo)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/orgs/%s/projects/%s/code-repos/%s/overview", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Harness-Account", runtime.ParamLocationHeader, params.HarnessAccount)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Harness-Account", headerParam0)

	}

	return req, nil
}

// NewGetArtifactChainOfCustodyV2Request generates requests for GetArtifactChainOfCustodyV2
func NewGetArtifactChainOfCustodyV2Request(server string, org OrgParam, project ProjectParam, artifact Artifact, params *GetArtifactChainOfCustodyV2Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "org", runtime.ParamLocationPath, org)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "artifact", runtime.ParamLocationPath, artifact)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/orgs/%s/projects/%s/artifacts/%s/chain-of-custody", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Harness-Account", runtime.ParamLocationHeader, params.HarnessAccount)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Harness-Account", headerParam0)

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListArtifactSourcesWithBodyWithResponse request with any body
	ListArtifactSourcesWithBodyWithResponse(ctx context.Context, org OrgParam, project ProjectParam, params *ListArtifactSourcesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListArtifactSourcesResponse, error)

	ListArtifactSourcesWithResponse(ctx context.Context, org OrgParam, project ProjectParam, params *ListArtifactSourcesParams, body ListArtifactSourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*ListArtifactSourcesResponse, error)

	// ArtifactListV2WithBodyWithResponse request with any body
	ArtifactListV2WithBodyWithResponse(ctx context.Context, org OrgParam, project ProjectParam, source string, params *ArtifactListV2Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ArtifactListV2Response, error)

	ArtifactListV2WithResponse(ctx context.Context, org OrgParam, project ProjectParam, source string, params *ArtifactListV2Params, body ArtifactListV2JSONRequestBody, reqEditors ...RequestEditorFn) (*ArtifactListV2Response, error)

	// GetArtifactV2OverviewWithResponse request
	GetArtifactV2OverviewWithResponse(ctx context.Context, org OrgParam, project ProjectParam, source string, artifact Artifact, params *GetArtifactV2OverviewParams, reqEditors ...RequestEditorFn) (*GetArtifactV2OverviewResponse, error)

	// FetchComplianceResultsByArtifactWithBodyWithResponse request with any body
	FetchComplianceResultsByArtifactWithBodyWithResponse(ctx context.Context, org OrgParam, project ProjectParam, artifact Artifact, params *FetchComplianceResultsByArtifactParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FetchComplianceResultsByArtifactResponse, error)

	FetchComplianceResultsByArtifactWithResponse(ctx context.Context, org OrgParam, project ProjectParam, artifact Artifact, params *FetchComplianceResultsByArtifactParams, body FetchComplianceResultsByArtifactJSONRequestBody, reqEditors ...RequestEditorFn) (*FetchComplianceResultsByArtifactResponse, error)

	// CodeRepositoriesListWithBodyWithResponse request with any body
	CodeRepositoriesListWithBodyWithResponse(ctx context.Context, org OrgParam, project ProjectParam, params *CodeRepositoriesListParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CodeRepositoriesListResponse, error)

	CodeRepositoriesListWithResponse(ctx context.Context, org OrgParam, project ProjectParam, params *CodeRepositoriesListParams, body CodeRepositoriesListJSONRequestBody, reqEditors ...RequestEditorFn) (*CodeRepositoriesListResponse, error)

	// GetAllRepositoriesSummaryWithResponse request
	GetAllRepositoriesSummaryWithResponse(ctx context.Context, org OrgParam, project ProjectParam, params *GetAllRepositoriesSummaryParams, reqEditors ...RequestEditorFn) (*GetAllRepositoriesSummaryResponse, error)

	// GetCodeRepositoryOverviewWithResponse request
	GetCodeRepositoryOverviewWithResponse(ctx context.Context, org OrgParam, project ProjectParam, codeRepo string, params *GetCodeRepositoryOverviewParams, reqEditors ...RequestEditorFn) (*GetCodeRepositoryOverviewResponse, error)

	// GetArtifactChainOfCustodyV2WithResponse request
	GetArtifactChainOfCustodyV2WithResponse(ctx context.Context, org OrgParam, project ProjectParam, artifact Artifact, params *GetArtifactChainOfCustodyV2Params, reqEditors ...RequestEditorFn) (*GetArtifactChainOfCustodyV2Response, error)
}

type ListArtifactSourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArtifactSourcesListingResponse
}

// Status returns HTTPResponse.Status
func (r ListArtifactSourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListArtifactSourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArtifactListV2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArtifactV2ListingResponseBody
}

// Status returns HTTPResponse.Status
func (r ArtifactListV2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArtifactListV2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtifactV2OverviewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArtifactV2Overview
}

// Status returns HTTPResponse.Status
func (r GetArtifactV2OverviewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtifactV2OverviewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchComplianceResultsByArtifactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FetchComplianceResultByArtifactResponse
}

// Status returns HTTPResponse.Status
func (r FetchComplianceResultsByArtifactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchComplianceResultsByArtifactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CodeRepositoriesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CodeRepositoryListingResponseBody
}

// Status returns HTTPResponse.Status
func (r CodeRepositoriesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CodeRepositoriesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllRepositoriesSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RepositoriesSummary
}

// Status returns HTTPResponse.Status
func (r GetAllRepositoriesSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllRepositoriesSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCodeRepositoryOverviewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CodeRepositoryOverviewResponseBody
}

// Status returns HTTPResponse.Status
func (r GetCodeRepositoryOverviewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCodeRepositoryOverviewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtifactChainOfCustodyV2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ArtifactChainOfCustodyV2
}

// Status returns HTTPResponse.Status
func (r GetArtifactChainOfCustodyV2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtifactChainOfCustodyV2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListArtifactSourcesWithBodyWithResponse request with arbitrary body returning *ListArtifactSourcesResponse
func (c *ClientWithResponses) ListArtifactSourcesWithBodyWithResponse(ctx context.Context, org OrgParam, project ProjectParam, params *ListArtifactSourcesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListArtifactSourcesResponse, error) {
	rsp, err := c.ListArtifactSourcesWithBody(ctx, org, project, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListArtifactSourcesResponse(rsp)
}

func (c *ClientWithResponses) ListArtifactSourcesWithResponse(ctx context.Context, org OrgParam, project ProjectParam, params *ListArtifactSourcesParams, body ListArtifactSourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*ListArtifactSourcesResponse, error) {
	rsp, err := c.ListArtifactSources(ctx, org, project, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListArtifactSourcesResponse(rsp)
}

// ArtifactListV2WithBodyWithResponse request with arbitrary body returning *ArtifactListV2Response
func (c *ClientWithResponses) ArtifactListV2WithBodyWithResponse(ctx context.Context, org OrgParam, project ProjectParam, source string, params *ArtifactListV2Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ArtifactListV2Response, error) {
	rsp, err := c.ArtifactListV2WithBody(ctx, org, project, source, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArtifactListV2Response(rsp)
}

func (c *ClientWithResponses) ArtifactListV2WithResponse(ctx context.Context, org OrgParam, project ProjectParam, source string, params *ArtifactListV2Params, body ArtifactListV2JSONRequestBody, reqEditors ...RequestEditorFn) (*ArtifactListV2Response, error) {
	rsp, err := c.ArtifactListV2(ctx, org, project, source, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArtifactListV2Response(rsp)
}

// GetArtifactV2OverviewWithResponse request returning *GetArtifactV2OverviewResponse
func (c *ClientWithResponses) GetArtifactV2OverviewWithResponse(ctx context.Context, org OrgParam, project ProjectParam, source string, artifact Artifact, params *GetArtifactV2OverviewParams, reqEditors ...RequestEditorFn) (*GetArtifactV2OverviewResponse, error) {
	rsp, err := c.GetArtifactV2Overview(ctx, org, project, source, artifact, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtifactV2OverviewResponse(rsp)
}

// FetchComplianceResultsByArtifactWithBodyWithResponse request with arbitrary body returning *FetchComplianceResultsByArtifactResponse
func (c *ClientWithResponses) FetchComplianceResultsByArtifactWithBodyWithResponse(ctx context.Context, org OrgParam, project ProjectParam, artifact Artifact, params *FetchComplianceResultsByArtifactParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FetchComplianceResultsByArtifactResponse, error) {
	rsp, err := c.FetchComplianceResultsByArtifactWithBody(ctx, org, project, artifact, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchComplianceResultsByArtifactResponse(rsp)
}

func (c *ClientWithResponses) FetchComplianceResultsByArtifactWithResponse(ctx context.Context, org OrgParam, project ProjectParam, artifact Artifact, params *FetchComplianceResultsByArtifactParams, body FetchComplianceResultsByArtifactJSONRequestBody, reqEditors ...RequestEditorFn) (*FetchComplianceResultsByArtifactResponse, error) {
	rsp, err := c.FetchComplianceResultsByArtifact(ctx, org, project, artifact, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchComplianceResultsByArtifactResponse(rsp)
}

// CodeRepositoriesListWithBodyWithResponse request with arbitrary body returning *CodeRepositoriesListResponse
func (c *ClientWithResponses) CodeRepositoriesListWithBodyWithResponse(ctx context.Context, org OrgParam, project ProjectParam, params *CodeRepositoriesListParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CodeRepositoriesListResponse, error) {
	rsp, err := c.CodeRepositoriesListWithBody(ctx, org, project, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCodeRepositoriesListResponse(rsp)
}

func (c *ClientWithResponses) CodeRepositoriesListWithResponse(ctx context.Context, org OrgParam, project ProjectParam, params *CodeRepositoriesListParams, body CodeRepositoriesListJSONRequestBody, reqEditors ...RequestEditorFn) (*CodeRepositoriesListResponse, error) {
	rsp, err := c.CodeRepositoriesList(ctx, org, project, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCodeRepositoriesListResponse(rsp)
}

// GetAllRepositoriesSummaryWithResponse request returning *GetAllRepositoriesSummaryResponse
func (c *ClientWithResponses) GetAllRepositoriesSummaryWithResponse(ctx context.Context, org OrgParam, project ProjectParam, params *GetAllRepositoriesSummaryParams, reqEditors ...RequestEditorFn) (*GetAllRepositoriesSummaryResponse, error) {
	rsp, err := c.GetAllRepositoriesSummary(ctx, org, project, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllRepositoriesSummaryResponse(rsp)
}

// GetCodeRepositoryOverviewWithResponse request returning *GetCodeRepositoryOverviewResponse
func (c *ClientWithResponses) GetCodeRepositoryOverviewWithResponse(ctx context.Context, org OrgParam, project ProjectParam, codeRepo string, params *GetCodeRepositoryOverviewParams, reqEditors ...RequestEditorFn) (*GetCodeRepositoryOverviewResponse, error) {
	rsp, err := c.GetCodeRepositoryOverview(ctx, org, project, codeRepo, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCodeRepositoryOverviewResponse(rsp)
}

// GetArtifactChainOfCustodyV2WithResponse request returning *GetArtifactChainOfCustodyV2Response
func (c *ClientWithResponses) GetArtifactChainOfCustodyV2WithResponse(ctx context.Context, org OrgParam, project ProjectParam, artifact Artifact, params *GetArtifactChainOfCustodyV2Params, reqEditors ...RequestEditorFn) (*GetArtifactChainOfCustodyV2Response, error) {
	rsp, err := c.GetArtifactChainOfCustodyV2(ctx, org, project, artifact, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArtifactChainOfCustodyV2Response(rsp)
}

// ParseListArtifactSourcesResponse parses an HTTP response from a ListArtifactSourcesWithResponse call
func ParseListArtifactSourcesResponse(rsp *http.Response) (*ListArtifactSourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListArtifactSourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtifactSourcesListingResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseArtifactListV2Response parses an HTTP response from a ArtifactListV2WithResponse call
func ParseArtifactListV2Response(rsp *http.Response) (*ArtifactListV2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArtifactListV2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtifactV2ListingResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetArtifactV2OverviewResponse parses an HTTP response from a GetArtifactV2OverviewWithResponse call
func ParseGetArtifactV2OverviewResponse(rsp *http.Response) (*GetArtifactV2OverviewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtifactV2OverviewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtifactV2Overview
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFetchComplianceResultsByArtifactResponse parses an HTTP response from a FetchComplianceResultsByArtifactWithResponse call
func ParseFetchComplianceResultsByArtifactResponse(rsp *http.Response) (*FetchComplianceResultsByArtifactResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchComplianceResultsByArtifactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FetchComplianceResultByArtifactResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCodeRepositoriesListResponse parses an HTTP response from a CodeRepositoriesListWithResponse call
func ParseCodeRepositoriesListResponse(rsp *http.Response) (*CodeRepositoriesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CodeRepositoriesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CodeRepositoryListingResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllRepositoriesSummaryResponse parses an HTTP response from a GetAllRepositoriesSummaryWithResponse call
func ParseGetAllRepositoriesSummaryResponse(rsp *http.Response) (*GetAllRepositoriesSummaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllRepositoriesSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RepositoriesSummary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCodeRepositoryOverviewResponse parses an HTTP response from a GetCodeRepositoryOverviewWithResponse call
func ParseGetCodeRepositoryOverviewResponse(rsp *http.Response) (*GetCodeRepositoryOverviewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCodeRepositoryOverviewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CodeRepositoryOverviewResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetArtifactChainOfCustodyV2Response parses an HTTP response from a GetArtifactChainOfCustodyV2WithResponse call
func ParseGetArtifactChainOfCustodyV2Response(rsp *http.Response) (*GetArtifactChainOfCustodyV2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArtifactChainOfCustodyV2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ArtifactChainOfCustodyV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
