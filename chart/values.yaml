# Default values for chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

global:
  commonLabels: {}
  commonAnnotations: {}
  imagePullSecrets: []
  # -- Wait-For-App initContainers details
  waitForInitContainer:
    ## image version
    ## ref: https://hub.docker.com/r/harness/helm-init-container/tags
    # --image.registry ; image registry
    # --image.repository ; image repository
    # --image.tag ; image tag (immutable tags are recommended)
    # --image.digest ; image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
    # --image.pullPolicy Image pull policy
    # --image.imagePullSecrets Specify docker-registry secret names as an array
    image:
      registry: docker.io
      repository: harness/helm-init-container
      pullPolicy: Always
      tag: "latest"
      digest: ""
      imagePullSecrets: []
    resources:
      limits:
        memory: 500Mi
      requests:
        cpu: 500m
        memory: 500Mi
    securityContext:
      runAsUser: 65534
      runAsNonRoot: true
    enabled: true
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 100
    targetCPU: 80
  ingress:
    # -- create ingress objects
    enabled: false
    disableHostInIngress: false
    pathPrefix: ""
    pathType: ""
    # -- set ingress object classname
    className: harness
    # -- set host of ingressObjects
    hosts:
      - my-host.example.org
    # -- set tls for ingress objects
    tls:
      enabled: true
      secretName: ''
    # -- add annotations to ingress objects
    objects:
      annotations: {}
  istio:
    # -- create virtualServices objects
    enabled: false
    # -- create gateway and use in virtualservice
    gateway:
      create: false
    # -- if gateway not created, use specified gateway and host
    virtualService:
      gateways:
      hosts:
  monitoring:
    enabled: true
    port: 8181
    path: /metrics
  serviceUpStream:
    enabled: false

command:
  - "/app/harness-mcp-server"
args:
  - "http-server"
# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 3
# -- deployment.updateStrategy.type Deployment strategy type
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#update-strategies
## e.g:
updateStrategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 25%
    maxUnavailable: 25%
# -- schedulerName Specifies the schedulerName, if it's nil uses kube-scheduler
## https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
##
schedulerName: ""
# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: nginx
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""
# -- terminationGracePeriodSeconds In seconds, time the given to the pod needs to terminate gracefully
## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods
##
terminationGracePeriodSeconds: "60"
# -- set progressDealineSeconds in seconds, number of seconds the Deployment controller waits before indicating failure
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/
progressDeadlineSeconds: 120
pdb:
  # --pdb.create Enable/disable a Pod Disruption Budget creation
  ##
  create: true
  # --pdb.minAvailable Minimum number/percentage of pods that must still be available after the eviction
  ##
  minAvailable: 50%
  # --pdb.maxUnavailable Maximum number/percentage of pods that may be made unavailable after the eviction
  ##
  maxUnavailable: ""
## image version
## ref: https://hub.docker.com/r/harness/accesscontrol-service-signed/tags
# --image.registry ; image registry
# --image.repository ; image repository
# --image.tag ; image tag (immutable tags are recommended)
# --image.digest ; image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
# --image.pullPolicy Image pull policy
# --image.imagePullSecrets Specify docker-registry secret names as an array
image:
  registry: us.gcr.io/platform-205701
  repository: harness/mcp-server
  pullPolicy: IfNotPresent
  tag: "0.0.9"
  digest: ""
  imagePullSecrets: []
# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext:
  runAsUser: 65534
  runAsNonRoot: true

service:
  annotations: {}
  type: ClusterIP
  port: 8080
  sessionAffinity: "ClientIP"
  sessionAffinityTimeout: 3600

resources:
  limits:
    memory: 500Mi
  requests:
    cpu: 500m
    memory: 500Mi

virtualService:
  annotations: {}
  objects:
    - name: mcp-server
      pathMatchType: prefix
      pathRewrite: "/"
      paths:
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/mcp-server/'
        - path: '{{ .Values.global.istio.virtualService.pathPrefix }}/mcp-server'

ingress:
  pathPrefix: ""
  annotations: {}
  objects:
    - annotations: 
        nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
        nginx.ingress.kubernetes.io/rewrite-target: /$2
        nginx.ingress.kubernetes.io/use-regex: "true"
      conditionalAnnotations:
        - condition: "global.serviceUpStream.enabled"
          annotations:
            nginx.ingress.kubernetes.io/service-upstream: "true"
            nginx.ingress.kubernetes.io/upstream-vhost: '{{ include "mcp-server.name" . }}.{{.Release.Namespace}}.svc.cluster.local'
      paths:
        - path: '{{ .Values.global.ingress.pathPrefix }}/mcp-server(/|$)(.*)'

livenessProbe:
  tcpSocket:
    port: mcp
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

readinessProbe:
  tcpSocket:
    port: mcp
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

## Autoscaling configuration
# --autoscaling.enabled Enable autoscaling for pods
# --autoscaling.minReplicas Minimum number of replicas
# --autoscaling.maxReplicas Maximum number of replicas
# --autoscaling.targetCPU Target CPU utilization percentage
# --autoscaling.targetMemory Target Memory utilization percentage
##
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 100
  targetCPU: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true
extraVolumeMounts: []
extraVolumes: []
initContainers: []
nodeSelector: {}

tolerations: []

secrets:
  secretManagement:
    externalSecretsOperator:
      - secretStore:
          name: ""
          kind: ""
        remoteKeys:
          HARNESS_NG_MANAGER_SECRET:
            name: ""
            property: ""
          HARNESS_PIPELINE_SVC_SECRET:
            name: ""
            property: ""
          HARNESS_ARTIFACT_REGISTRY_SECRET:
            name: ""
            property: ""
          HARNESS_NEXTGEN_CE_SECRET:
            name: ""
            property: ""
          HARNESS_CODE_SVC_SECRET:
            name: ""
            property: ""
          HARNESS_LOG_SVC_SECRET:
            name: ""
            property: ""
          HARNESS_IDP_SVC_SECRET:
            name: ""
            property: ""
          HARNESS_AUDIT_SVC_SECRET:
            name: ""
            property: ""
          HARNESS_INTELLIGENCE_SVC_SECRET:
            name: ""
            property: ""
          HARNESS_GENAI_SECRET:
            name: ""
            property: ""
          HARNESS_TEMPLATE_SVC_SECRET:
            name: ""
            property: ""
          HARNESS_DASHBOARD_SVC_SECRET:
            name: ""
            property: ""
          HARNESS_RBAC_SVC_SECRET:
            name: ""
            property: ""
          HARNESS_STO_SVC_SECRET:
            name: ""
            property: ""
          HARNESS_MCP_SVC_SECRET:
            name: ""
            property: ""
    
config:
  HARNESS_INTELLIGENCE_SVC_BASE_URL: "http://harness-intelligence:80"
  HARNESS_CHATBOT_BASE_URL: "http://chatbot-service:8000"
  HARNESS_AUDIT_SVC_BASE_URL: "http://platform-service:9005"
  HARNESS_CCM_COMM_ORCH_BASE_URL: "http://lwd-autocud:9090"
  HARNESS_SEI_SVC_BASE_URL: "http://sei-panorama-api:8080"
  HARNESS_PIPELINE_SVC_BASE_URL: "http://pipeline-service:12001"
  HARNESS_GENAI_BASE_URL: "http://genai-service:8000"
  HARNESS_NEXTGEN_CE_BASE_URL: "http://nextgen-ce:6340"
  HARNESS_ARTIFACT_REGISTRY_BASE_URL: "http://registry-api:80"
  HARNESS_CHAOS_MANAGER_SVC_BASE_URL: "http://chaos-manager-service:8080"
  HARNESS_CODE_SVC_BASE_URL: "http://code-api:80"
  HARNESS_LOG_SVC_BASE_URL: "http://log-service:8079"
  HARNESS_IDP_SVC_BASE_URL: "http://idp-service:12003"
  HARNESS_STO_SVC_BASE_URL: "http://sto-core:4000"
  HARNESS_SCS_SVC_BASE_URL: "http://ssca-manager:8188"
  HARNESS_DBOPS_SVC_BASE_URL: "http://db-devops-service:5001/"
  HARNESS_NG_MANAGER_BASE_URL: "http://ng-manager:7090"
  HARNESS_TEMPLATE_SVC_BASE_URL: "http://template-service:15002"
  HARNESS_LOG_FORMAT: "json"
  HARNESS_METRICS_PORT: "8181"
 